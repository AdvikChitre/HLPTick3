<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fable.Electron</name></assembly>
<members>
<member name="P:Electron.DefaultFontFamily.standard(System.String)">
<summary>
 Defaults to Times New Roman.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.serif(System.String)">
<summary>
 Defaults to Times New Roman.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.sansSerif(System.String)">
<summary>
 Defaults to Arial.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.monospace(System.String)">
<summary>
 Defaults to Courier New.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.fantasy(System.String)">
<summary>
 Defaults to Impact.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.cursive(System.String)">
<summary>
 Defaults to Script.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.standard">
<summary>
 Defaults to Times New Roman.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.serif">
<summary>
 Defaults to Times New Roman.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.sansSerif">
<summary>
 Defaults to Arial.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.monospace">
<summary>
 Defaults to Courier New.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.fantasy">
<summary>
 Defaults to Impact.
</summary>
</member>
<member name="P:Electron.DefaultFontFamily.cursive">
<summary>
 Defaults to Script.
</summary>
</member>
<member name="P:Electron.WebPreferences.zoomFactor(System.Double)">
<summary>
 The default zoom factor of the page, 3.0 represents 300%. Default is 1.0.
</summary>
</member>
<member name="P:Electron.WebPreferences.webgl(System.Boolean)">
<summary>
 Enables WebGL support. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.webSecurity(System.Boolean)">
<summary>
 When false, it will disable the same-origin policy (usually using testing
 websites by people), and set allowRunningInsecureContent to true if this
 options has not been set by user. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.textAreasAreResizable(System.Boolean)">
<summary>
 Make TextArea elements resizable. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.spellcheck(System.Boolean)">
<summary>
 Whether to enable the builtin spellchecker. Default is `false`.
</summary>
</member>
<member name="P:Electron.WebPreferences.session(Electron.Session)">
<summary>
 Sets the session used by the page. Instead of passing the Session object
 directly, you can also choose to use the `partition` option instead, which
 accepts a partition string. When both session and partition are provided,
 session will be preferred. Default is the default session.
</summary>
</member>
<member name="P:Electron.WebPreferences.scrollBounce(System.Boolean)">
<summary>
 Enables scroll bounce (rubber banding) effect on macOS. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.sandbox(System.Boolean)">
<summary>
 If set, this will sandbox the renderer associated with the window, making
 it compatible with the Chromium OS-level sandbox and disabling the Node.js
 engine. This is not the same as the `nodeIntegration` option and the APIs
 available to the preload script are more limited. Read more about the
 option here: https://electronjs.org/docs/api/sandbox-option.
</summary>
</member>
<member name="P:Electron.WebPreferences.safeDialogsMessage(System.String)">
<summary>
 The message to display when consecutive dialog protection is triggered. If
 not defined the default message would be used, note that currently the
 default message is in English and not localized.
</summary>
</member>
<member name="P:Electron.WebPreferences.safeDialogs(System.Boolean)">
<summary>
 Whether to enable browser style consecutive dialog protection. Default is
 false.
</summary>
</member>
<member name="P:Electron.WebPreferences.preload(System.String)">
<summary>
 Specifies a script that will be loaded before other scripts run in the
 page. This script will always have access to node APIs no matter whether
 node integration is turned on or off. The value should be the absolute
 file path to the script. When node integration is turned off, the preload
 script can reintroduce Node global symbols back to the global scope.
</summary>
</member>
<member name="P:Electron.WebPreferences.plugins(System.Boolean)">
<summary>
 Whether plugins should be enabled. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.partition(System.String)">
<summary>
 Sets the session used by the page according to the session&apos;s partition
 string. If partition starts with `persist:`, the page will use a
 persistent session available to all pages in the app with the same
 partition. If there is no persist: prefix, the page will use an in-memory
 session. By assigning the same partition, multiple pages can share the
 same session. Default is the default session.
</summary>
</member>
<member name="P:Electron.WebPreferences.offscreen(System.Boolean)">
<summary>
 Whether to enable offscreen rendering for the browser window. Defaults to
 false. See here for more details:
 https://electronjs.org/docs/tutorial/offscreen-rendering
</summary>
</member>
<member name="P:Electron.WebPreferences.nodeIntegrationInWorker(System.Boolean)">
<summary>
 Whether node integration is enabled in web workers. Default is false. More
 about this can be found here: https://electronjs.org/docs/tutorial/multithreading
</summary>
</member>
<member name="P:Electron.WebPreferences.nodeIntegrationInSubFrames(System.Boolean)">
<summary>
 Experimental option for enabling Node.js support in sub-frames such as
 iframes and child windows. All your preloads will load for every iframe,
 you can use process.isMainFrame to determine if you are in the main frame
 or not.
</summary>
</member>
<member name="P:Electron.WebPreferences.nodeIntegration(System.Boolean)">
<summary>
 Whether node integration is enabled. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.navigateOnDragDrop(System.Boolean)">
<summary>
 Whether dragging and dropping a file or link onto the page causes a
 navigation. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.nativeWindowOpen(System.Boolean)">
<summary>
 Whether to use native window.open(). Defaults to false. Child windows will
 always have node integration disabled unless `nodeIntegrationInSubFrames`
 is `true`. Note: This option is currently experimental.
</summary>
</member>
<member name="P:Electron.WebPreferences.minimumFontSize(System.Int32)">
<summary>
 Defaults to 0.
</summary>
</member>
<member name="P:Electron.WebPreferences.javascript(System.Boolean)">
<summary>
 Enables JavaScript support. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.images(System.Boolean)">
<summary>
 Enables image support. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.experimentalFeatures(System.Boolean)">
<summary>
 Enables Chromium&apos;s experimental features. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.enableWebSQL(System.Boolean)">
<summary>
 Whether to enable the [WebSQL api](https://www.w3.org/TR/webdatabase/). Default is
 `true`.
</summary>
</member>
<member name="P:Electron.WebPreferences.enableRemoteModule(System.Boolean)">
<summary>
 Whether to enable the `remote` module. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.enableBlinkFeatures(System.String)">
<summary>
 A list of feature strings to enable separated by comma, like
 CSSVariables,KeyboardEventKey. The full list of supported feature strings
 can be found here:
 https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/runtime_enabled_features.json5?l=70
</summary>
</member>
<member name="P:Electron.WebPreferences.disableHtmlFullscreenWindowResize(System.Boolean)">
<summary>
 Whether to prevent the window from resizing when entering HTML Fullscreen.
 Default is `false`.
</summary>
</member>
<member name="P:Electron.WebPreferences.disableDialogs(System.Boolean)">
<summary>
 Whether to disable dialogs completely. Overrides `safeDialogs`. Default is `false`.
</summary>
</member>
<member name="P:Electron.WebPreferences.disableBlinkFeatures(System.String)">
<summary>
 A list of feature strings to disable separated by comma, like
 CSSVariables,KeyboardEventKey. The full list of supported feature strings
 can be found here:
 https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/runtime_enabled_features.json5?l=70
</summary>
</member>
<member name="P:Electron.WebPreferences.devTools(System.Boolean)">
<summary>
 Whether to enable DevTools. If it is set to false, can not use
 BrowserWindow.webContents.openDevTools() to open DevTools. Default is
 true.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultMonospaceFontSize(System.Int32)">
<summary>
 Defaults to 13.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultFontSize(System.Int32)">
<summary>
 Defaults to 16.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultFontFamily(Electron.DefaultFontFamily)">
<summary>
 Sets the default font for the font-family.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultEncoding(System.String)">
<summary>
 Defaults to ISO-8859-1.
</summary>
</member>
<member name="P:Electron.WebPreferences.contextIsolation(System.Boolean)">
<summary>
 Whether to run Electron APIs and the specified preload script in a
 separate JavaScript context. Defaults to false. The context that the
 preload script runs in will still have full access to the document and
 window globals but it will use its own set of JavaScript builtins (Array,
 Object, JSON, etc.) and will be isolated from any changes made to the
 global environment by the loaded page. The Electron API will only be
 available in the preload script and not the loaded page. This option
 should be used when loading potentially untrusted remote content to ensure
 the loaded content cannot tamper with the preload script and any Electron
 APIs being used. This option uses the same technique used by Chrome
 Content Scripts. You can access this context in the dev tools by selecting
 the &apos;Electron Isolated Context&apos; entry in the combo box at the top of the
 Console tab.
</summary>
</member>
<member name="P:Electron.WebPreferences.backgroundThrottling(System.Boolean)">
<summary>
 Whether to throttle animations and timers when the page becomes
 background. This also affects the Page Visibility API. Defaults to true.
</summary>
</member>
<member name="P:Electron.WebPreferences.autoplayPolicy(Electron.AutoplayPolicy)">
<summary>
 Autoplay policy to apply to content in the window.
</summary>
</member>
<member name="P:Electron.WebPreferences.allowRunningInsecureContent(System.Boolean)">
<summary>
 Allow an https page to run JavaScript, CSS or plugins from http URLs.
 Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.affinity(System.String)">
<summary>
 When specified, web pages with the same affinity will run in the same
 renderer process. Note that due to reusing the renderer process, certain
 webPreferences options will also be shared between the web pages even when
 you specified different values for them, including but not limited to
 preload, sandbox and nodeIntegration. So it is suggested to use exact same
 webPreferences for web pages with the same affinity.
</summary>
</member>
<member name="P:Electron.WebPreferences.additionalArguments(System.String[])">
<summary>
 A list of strings that will be appended to process.argv in the renderer
 process of this app. Useful for passing small bits of data down to
 renderer process preload scripts.
</summary>
</member>
<member name="P:Electron.WebPreferences.accessibleTitle(System.String)">
<summary>
 An alternative title string provided only to accessibility tools such as screen
 readers. This string is not directly visible to users.
</summary>
</member>
<member name="P:Electron.WebPreferences.zoomFactor">
<summary>
 The default zoom factor of the page, 3.0 represents 300%. Default is 1.0.
</summary>
</member>
<member name="P:Electron.WebPreferences.webgl">
<summary>
 Enables WebGL support. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.webSecurity">
<summary>
 When false, it will disable the same-origin policy (usually using testing
 websites by people), and set allowRunningInsecureContent to true if this
 options has not been set by user. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.textAreasAreResizable">
<summary>
 Make TextArea elements resizable. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.spellcheck">
<summary>
 Whether to enable the builtin spellchecker. Default is `false`.
</summary>
</member>
<member name="P:Electron.WebPreferences.session">
<summary>
 Sets the session used by the page. Instead of passing the Session object
 directly, you can also choose to use the `partition` option instead, which
 accepts a partition string. When both session and partition are provided,
 session will be preferred. Default is the default session.
</summary>
</member>
<member name="P:Electron.WebPreferences.scrollBounce">
<summary>
 Enables scroll bounce (rubber banding) effect on macOS. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.sandbox">
<summary>
 If set, this will sandbox the renderer associated with the window, making
 it compatible with the Chromium OS-level sandbox and disabling the Node.js
 engine. This is not the same as the `nodeIntegration` option and the APIs
 available to the preload script are more limited. Read more about the
 option here: https://electronjs.org/docs/api/sandbox-option.
</summary>
</member>
<member name="P:Electron.WebPreferences.safeDialogsMessage">
<summary>
 The message to display when consecutive dialog protection is triggered. If
 not defined the default message would be used, note that currently the
 default message is in English and not localized.
</summary>
</member>
<member name="P:Electron.WebPreferences.safeDialogs">
<summary>
 Whether to enable browser style consecutive dialog protection. Default is
 false.
</summary>
</member>
<member name="P:Electron.WebPreferences.preload">
<summary>
 Specifies a script that will be loaded before other scripts run in the
 page. This script will always have access to node APIs no matter whether
 node integration is turned on or off. The value should be the absolute
 file path to the script. When node integration is turned off, the preload
 script can reintroduce Node global symbols back to the global scope.
</summary>
</member>
<member name="P:Electron.WebPreferences.plugins">
<summary>
 Whether plugins should be enabled. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.partition">
<summary>
 Sets the session used by the page according to the session&apos;s partition
 string. If partition starts with `persist:`, the page will use a
 persistent session available to all pages in the app with the same
 partition. If there is no persist: prefix, the page will use an in-memory
 session. By assigning the same partition, multiple pages can share the
 same session. Default is the default session.
</summary>
</member>
<member name="P:Electron.WebPreferences.offscreen">
<summary>
 Whether to enable offscreen rendering for the browser window. Defaults to
 false. See here for more details:
 https://electronjs.org/docs/tutorial/offscreen-rendering
</summary>
</member>
<member name="P:Electron.WebPreferences.nodeIntegrationInWorker">
<summary>
 Whether node integration is enabled in web workers. Default is false. More
 about this can be found here: https://electronjs.org/docs/tutorial/multithreading
</summary>
</member>
<member name="P:Electron.WebPreferences.nodeIntegrationInSubFrames">
<summary>
 Experimental option for enabling Node.js support in sub-frames such as
 iframes and child windows. All your preloads will load for every iframe,
 you can use process.isMainFrame to determine if you are in the main frame
 or not.
</summary>
</member>
<member name="P:Electron.WebPreferences.nodeIntegration">
<summary>
 Whether node integration is enabled. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.navigateOnDragDrop">
<summary>
 Whether dragging and dropping a file or link onto the page causes a
 navigation. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.nativeWindowOpen">
<summary>
 Whether to use native window.open(). Defaults to false. Child windows will
 always have node integration disabled unless `nodeIntegrationInSubFrames`
 is `true`. Note: This option is currently experimental.
</summary>
</member>
<member name="P:Electron.WebPreferences.minimumFontSize">
<summary>
 Defaults to 0.
</summary>
</member>
<member name="P:Electron.WebPreferences.javascript">
<summary>
 Enables JavaScript support. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.images">
<summary>
 Enables image support. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.experimentalFeatures">
<summary>
 Enables Chromium&apos;s experimental features. Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.enableWebSQL">
<summary>
 Whether to enable the [WebSQL api](https://www.w3.org/TR/webdatabase/). Default is
 `true`.
</summary>
</member>
<member name="P:Electron.WebPreferences.enableRemoteModule">
<summary>
 Whether to enable the `remote` module. Default is true.
</summary>
</member>
<member name="P:Electron.WebPreferences.enableBlinkFeatures">
<summary>
 A list of feature strings to enable separated by comma, like
 CSSVariables,KeyboardEventKey. The full list of supported feature strings
 can be found here:
 https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/runtime_enabled_features.json5?l=70
</summary>
</member>
<member name="P:Electron.WebPreferences.disableHtmlFullscreenWindowResize">
<summary>
 Whether to prevent the window from resizing when entering HTML Fullscreen.
 Default is `false`.
</summary>
</member>
<member name="P:Electron.WebPreferences.disableDialogs">
<summary>
 Whether to disable dialogs completely. Overrides `safeDialogs`. Default is `false`.
</summary>
</member>
<member name="P:Electron.WebPreferences.disableBlinkFeatures">
<summary>
 A list of feature strings to disable separated by comma, like
 CSSVariables,KeyboardEventKey. The full list of supported feature strings
 can be found here:
 https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/runtime_enabled_features.json5?l=70
</summary>
</member>
<member name="P:Electron.WebPreferences.devTools">
<summary>
 Whether to enable DevTools. If it is set to false, can not use
 BrowserWindow.webContents.openDevTools() to open DevTools. Default is
 true.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultMonospaceFontSize">
<summary>
 Defaults to 13.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultFontSize">
<summary>
 Defaults to 16.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultFontFamily">
<summary>
 Sets the default font for the font-family.
</summary>
</member>
<member name="P:Electron.WebPreferences.defaultEncoding">
<summary>
 Defaults to ISO-8859-1.
</summary>
</member>
<member name="P:Electron.WebPreferences.contextIsolation">
<summary>
 Whether to run Electron APIs and the specified preload script in a
 separate JavaScript context. Defaults to false. The context that the
 preload script runs in will still have full access to the document and
 window globals but it will use its own set of JavaScript builtins (Array,
 Object, JSON, etc.) and will be isolated from any changes made to the
 global environment by the loaded page. The Electron API will only be
 available in the preload script and not the loaded page. This option
 should be used when loading potentially untrusted remote content to ensure
 the loaded content cannot tamper with the preload script and any Electron
 APIs being used. This option uses the same technique used by Chrome
 Content Scripts. You can access this context in the dev tools by selecting
 the &apos;Electron Isolated Context&apos; entry in the combo box at the top of the
 Console tab.
</summary>
</member>
<member name="P:Electron.WebPreferences.backgroundThrottling">
<summary>
 Whether to throttle animations and timers when the page becomes
 background. This also affects the Page Visibility API. Defaults to true.
</summary>
</member>
<member name="P:Electron.WebPreferences.autoplayPolicy">
<summary>
 Autoplay policy to apply to content in the window.
</summary>
</member>
<member name="P:Electron.WebPreferences.allowRunningInsecureContent">
<summary>
 Allow an https page to run JavaScript, CSS or plugins from http URLs.
 Default is false.
</summary>
</member>
<member name="P:Electron.WebPreferences.affinity">
<summary>
 When specified, web pages with the same affinity will run in the same
 renderer process. Note that due to reusing the renderer process, certain
 webPreferences options will also be shared between the web pages even when
 you specified different values for them, including but not limited to
 preload, sandbox and nodeIntegration. So it is suggested to use exact same
 webPreferences for web pages with the same affinity.
</summary>
</member>
<member name="P:Electron.WebPreferences.additionalArguments">
<summary>
 A list of strings that will be appended to process.argv in the renderer
 process of this app. Useful for passing small bits of data down to
 renderer process preload scripts.
</summary>
</member>
<member name="P:Electron.WebPreferences.accessibleTitle">
<summary>
 An alternative title string provided only to accessibility tools such as screen
 readers. This string is not directly visible to users.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.isPaused">
<summary>
 Whether the media element is paused.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.isMuted">
<summary>
 Whether the media element is muted.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.isLooping">
<summary>
 Whether the media element is looping.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.isControlsVisible">
<summary>
 Whether the media element&apos;s controls are visible.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.inError">
<summary>
 Whether the media element has crashed.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.hasAudio">
<summary>
 Whether the media element has audio.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.canToggleControls">
<summary>
 Whether the media element&apos;s controls are toggleable.
</summary>
</member>
<member name="P:Electron.ContextMenuMediaFlags.canRotate">
<summary>
 Whether the media element can be rotated.
</summary>
</member>
<member name="P:Electron.FoundInPageResult.selectionArea">
<summary>
 Coordinates of first match region.
</summary>
</member>
<member name="P:Electron.FoundInPageResult.matches">
<summary>
 Number of Matches.
</summary>
</member>
<member name="P:Electron.FoundInPageResult.activeMatchOrdinal">
<summary>
 Position of the active match.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canUndo">
<summary>
 Whether the renderer believes it can undo.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canSelectAll">
<summary>
 Whether the renderer believes it can select all.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canRedo">
<summary>
 Whether the renderer believes it can redo.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canPaste">
<summary>
 Whether the renderer believes it can paste.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canDelete">
<summary>
 Whether the renderer believes it can delete.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canCut">
<summary>
 Whether the renderer believes it can cut.
</summary>
</member>
<member name="P:Electron.ContextMenuEditFlags.canCopy">
<summary>
 Whether the renderer believes it can copy
</summary>
</member>
<member name="P:Electron.UploadProgress.total">
<summary>
 The number of bytes that will be uploaded this request
</summary>
</member>
<member name="P:Electron.UploadProgress.started">
<summary>
 Whether the upload has started. If this is false both `current` and
 `total` will be set to 0.
</summary>
</member>
<member name="P:Electron.UploadProgress.current">
<summary>
 The number of bytes that have been uploaded so far
</summary>
</member>
<member name="P:Electron.UploadProgress.active">
<summary>
 Whether the request is currently active. If this is false no other
 properties will be set
</summary>
</member>
<member name="P:Electron.TouchBarSpacerOptions.size(Electron.TouchBarSpacerSize)">
<summary>
 Size of spacer.
</summary>
</member>
<member name="P:Electron.TouchBarSpacerOptions.size">
<summary>
 Size of spacer.
</summary>
</member>
<member name="T:Electron.TouchBarSpacerSize.Flexible">
<summary>
 Take up all available space. Maps to `NSTouchBarItemIdentifierFlexibleSpace`.
</summary>
</member>
<member name="T:Electron.TouchBarSpacerSize.Large">
<summary>
 Large space between items. Maps to `NSTouchBarItemIdentifierFixedSpaceLarge`.
</summary>
</member>
<member name="T:Electron.TouchBarSpacerSize.Small">
<summary>
 Small space between items. Maps to `NSTouchBarItemIdentifierFixedSpaceSmall`. This
 is the default.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.value(System.Int32)">
<summary>
 Selected value.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.minValue(System.Int32)">
<summary>
 Minimum value.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.maxValue(System.Int32)">
<summary>
 Maximum value.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.label(System.String)">
<summary>
 Label text.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.change(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit})">
<summary>
 Function to call when the slider is changed. Called with the value that
 the user selected on the Slider.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.value">
<summary>
 Selected value.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.minValue">
<summary>
 Minimum value.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.maxValue">
<summary>
 Maximum value.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.label">
<summary>
 Label text.
</summary>
</member>
<member name="P:Electron.TouchBarSliderOptions.change">
<summary>
 Function to call when the slider is changed. Called with the value that
 the user selected on the Slider.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.selectedIndex(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 The index of the currently selected segment, will update automatically
 with user interaction. When the `mode` is
 TouchBarSegmentedControlMode.Multiple it will be the last selected item.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.segments(Electron.SegmentedControlSegment[])">
<summary>
 An array of segments to place in this control.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.segmentStyle(Electron.TouchBarSegmentedControlSegmentStyle)">
<summary>
 Style of the segments. Default is
 TouchBarSegmentedControlSegmentStyle.Automatic.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.mode(Electron.TouchBarSegmentedControlMode)">
<summary>
 The selection mode of the control. Default is
 TouchBarSegmentedControlMode.Single.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.change(System.Action{System.Int32,System.Boolean})">
<summary>
 Called when the user selects a new segment. Called with the index of the
 segment the user selected, and whether as a result of user selection the
 segment is selected or not.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.selectedIndex">
<summary>
 The index of the currently selected segment, will update automatically
 with user interaction. When the `mode` is
 TouchBarSegmentedControlMode.Multiple it will be the last selected item.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.segments">
<summary>
 An array of segments to place in this control.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.segmentStyle">
<summary>
 Style of the segments. Default is
 TouchBarSegmentedControlSegmentStyle.Automatic.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.mode">
<summary>
 The selection mode of the control. Default is
 TouchBarSegmentedControlMode.Single.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControlOptions.change">
<summary>
 Called when the user selects a new segment. Called with the index of the
 segment the user selected, and whether as a result of user selection the
 segment is selected or not.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlMode.Buttons">
<summary>
 Make the segments act as buttons, each segment can be pressed and released but never
 marked as active. Maps to `NSSegmentSwitchTrackingMomentary`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlMode.Multiple">
<summary>
 Multiple items can be selected at a time. Maps to
 `NSSegmentSwitchTrackingSelectAny`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlMode.Single">
<summary>
 One item selected at a time, selecting one deselects the previously selected item.
 Maps to `NSSegmentSwitchTrackingSelectOne`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.Separated">
<summary>
 The segments in the control are displayed very close to each other but not touching.
 Maps to `NSSegmentStyleSeparated`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.SmallSquare">
<summary>
 The control is displayed using the small square style. Maps to
 `NSSegmentStyleSmallSquare`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.Capsule">
<summary>
 The control is displayed using the capsule style. Maps to `NSSegmentStyleCapsule`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.TexturedSquare">
<summary>
 The control is displayed using the textured square style. Maps to
 `NSSegmentStyleTexturedSquare`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.RoundRect">
<summary>
 The control is displayed using the round rect style. Maps to
 `NSSegmentStyleRoundRect`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.TexturedRounded">
<summary>
 The control is displayed using the textured rounded style. Maps to
 `NSSegmentStyleTexturedRounded`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.Rounded">
<summary>
 The control is displayed using the rounded style. Maps to `NSSegmentStyleRounded`.
</summary>
</member>
<member name="T:Electron.TouchBarSegmentedControlSegmentStyle.Automatic">
<summary>
 The appearance of the segmented control is automatically determined based on the
 type of window in which the control is displayed and the position within the window.
 Maps to `NSSegmentStyleAutomatic`.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.showArrowButtons(System.Boolean)">
<summary>
 Defaults to false.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.selectedStyle(Electron.TouchBarScrubberStyle)">
<summary>
 Selected item style. Defaults to None.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.select(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit})">
<summary>
 Called when the user taps an item that was not the last tapped item.
 Called with the index of the item the user selected.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.overlayStyle(Electron.TouchBarScrubberStyle)">
<summary>
 Selected overlay item style. Defaults to None.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.mode(Electron.TouchBarScrubberMode)">
<summary>
 Defaults to TouchBarScrubberMode.Free.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.items(Electron.ScrubberItem[])">
<summary>
 An array of items to place in this scrubber.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.highlight(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit})">
<summary>
 Called when the user taps any item. Called with the index of the item the
 user touched
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.continuous(System.Boolean)">
<summary>
 Defaults to true.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.showArrowButtons">
<summary>
 Defaults to false.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.selectedStyle">
<summary>
 Selected item style. Defaults to None.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.select">
<summary>
 Called when the user taps an item that was not the last tapped item.
 Called with the index of the item the user selected.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.overlayStyle">
<summary>
 Selected overlay item style. Defaults to None.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.mode">
<summary>
 Defaults to TouchBarScrubberMode.Free.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.items">
<summary>
 An array of items to place in this scrubber.
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.highlight">
<summary>
 Called when the user taps any item. Called with the index of the item the
 user touched
</summary>
</member>
<member name="P:Electron.TouchBarScrubberOptions.continuous">
<summary>
 Defaults to true.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.showCloseButton(System.Boolean)">
<summary>
 true to display a close button on the left of the popover, false to not
 show it. Default is true.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.label(System.String)">
<summary>
 Popover button text.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.items(Electron.TouchBar)">
<summary>
 Items to display in the popover.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.icon(Electron.NativeImage)">
<summary>
 Popover button icon.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.showCloseButton">
<summary>
 true to display a close button on the left of the popover, false to not
 show it. Default is true.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.label">
<summary>
 Popover button text.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.items">
<summary>
 Items to display in the popover.
</summary>
</member>
<member name="P:Electron.TouchBarPopoverOptions.icon">
<summary>
 Popover button icon.
</summary>
</member>
<member name="P:Electron.TouchBarLabelOptions.textColor(System.String)">
<summary>
 Hex color of text, i.e #ABCDEF.
</summary>
</member>
<member name="P:Electron.TouchBarLabelOptions.label(System.String)">
<summary>
 Text to display.
</summary>
</member>
<member name="P:Electron.TouchBarLabelOptions.accessibilityLabel(System.String)">
<summary>
 A short description of the button for use by screenreaders like VoiceOver. When
 defining `accessibilityLabel`, ensure you have considered macOS [best
 practices](https://developer.apple.com/documentation/appkit/nsaccessibilitybutton/1524910-accessibilitylabel?language=objc).
</summary>
</member>
<member name="P:Electron.TouchBarLabelOptions.textColor">
<summary>
 Hex color of text, i.e #ABCDEF.
</summary>
</member>
<member name="P:Electron.TouchBarLabelOptions.label">
<summary>
 Text to display.
</summary>
</member>
<member name="P:Electron.TouchBarLabelOptions.accessibilityLabel">
<summary>
 A short description of the button for use by screenreaders like VoiceOver. When
 defining `accessibilityLabel`, ensure you have considered macOS [best
 practices](https://developer.apple.com/documentation/appkit/nsaccessibilitybutton/1524910-accessibilitylabel?language=objc).
</summary>
</member>
<member name="P:Electron.TouchBarGroupOptions.items(Electron.TouchBar)">
<summary>
 Items to display as a group.
</summary>
</member>
<member name="P:Electron.TouchBarGroupOptions.items">
<summary>
 Items to display as a group.
</summary>
</member>
<member name="P:Electron.TouchBarColorPickerOptions.selectedColor(System.String)">
<summary>
 The selected hex color in the picker, i.e #ABCDEF.
</summary>
</member>
<member name="P:Electron.TouchBarColorPickerOptions.change(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Function to call when a color is selected. Called with the color that the
 user selected from the picker.
</summary>
</member>
<member name="P:Electron.TouchBarColorPickerOptions.availableColors(System.String[])">
<summary>
 Array of hex color strings to appear as possible colors to select.
</summary>
</member>
<member name="P:Electron.TouchBarColorPickerOptions.selectedColor">
<summary>
 The selected hex color in the picker, i.e #ABCDEF.
</summary>
</member>
<member name="P:Electron.TouchBarColorPickerOptions.change">
<summary>
 Function to call when a color is selected. Called with the color that the
 user selected from the picker.
</summary>
</member>
<member name="P:Electron.TouchBarColorPickerOptions.availableColors">
<summary>
 Array of hex color strings to appear as possible colors to select.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.label(System.String)">
<summary>
 Button text.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.iconPosition(Electron.TouchBarButtonIconPosition)">
<summary>
 Defaults to TouchBarButtonIconPosition.Overlay.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.icon(Fable.Core.U2{Electron.NativeImage,System.String})">
<summary>
 Button icon.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.enabled(System.Boolean)">
<summary>
 Whether the button is in an enabled state. Default is true.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.click(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Function to call when the button is clicked.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.backgroundColor(System.String)">
<summary>
 Button background color in hex format, i.e #ABCDEF.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.accessibilityLabel(System.String)">
<summary>
 A short description of the button for use by screenreaders like VoiceOver. When
 defining `accessibilityLabel`, ensure you have considered macOS [best
 practices](https://developer.apple.com/documentation/appkit/nsaccessibilitybutton/1524910-accessibilitylabel?language=objc).
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.label">
<summary>
 Button text.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.iconPosition">
<summary>
 Defaults to TouchBarButtonIconPosition.Overlay.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.icon">
<summary>
 Button icon.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.enabled">
<summary>
 Whether the button is in an enabled state. Default is true.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.click">
<summary>
 Function to call when the button is clicked.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.backgroundColor">
<summary>
 Button background color in hex format, i.e #ABCDEF.
</summary>
</member>
<member name="P:Electron.TouchBarButtonOptions.accessibilityLabel">
<summary>
 A short description of the button for use by screenreaders like VoiceOver. When
 defining `accessibilityLabel`, ensure you have considered macOS [best
 practices](https://developer.apple.com/documentation/appkit/nsaccessibilitybutton/1524910-accessibilitylabel?language=objc).
</summary>
</member>
<member name="P:Electron.ToPNGOptions.scaleFactor(System.Double)">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.ToPNGOptions.scaleFactor">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.ToDataURLOptions.scaleFactor(System.Double)">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.ToDataURLOptions.scaleFactor">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.ToBitmapOptions.scaleFactor(System.Double)">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.ToBitmapOptions.scaleFactor">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.SystemMemoryInfo.total">
<summary>
 The total amount of physical memory in Kilobytes available to the system.
</summary>
</member>
<member name="P:Electron.SystemMemoryInfo.swapTotal">
<summary>
 [Windows, Linux] The total amount of swap memory in Kilobytes available to
 the system.
</summary>
</member>
<member name="P:Electron.SystemMemoryInfo.swapFree">
<summary>
 [Windows, Linux] The free amount of swap memory in Kilobytes available to
 the system.
</summary>
</member>
<member name="P:Electron.SystemMemoryInfo.free">
<summary>
 The total amount of memory not being used by applications or disk cache.
</summary>
</member>
<member name="P:Electron.GetDesktopCapturerSourcesOptions.types(Electron.DesktopCapturerSourceType[])">
<summary>
 An array of Strings that lists the types of desktop sources to be
 captured.
</summary>
</member>
<member name="P:Electron.GetDesktopCapturerSourcesOptions.thumbnailSize(Electron.Size)">
<summary>
 The size that the media source thumbnail should be scaled to. Default is
 150 x 150. Set width or height to 0 when you do not need the thumbnails.
 This will save the processing time required for capturing the content of
 each window and screen.
</summary>
</member>
<member name="P:Electron.GetDesktopCapturerSourcesOptions.fetchWindowIcons(System.Boolean)">
<summary>
 Set to true to enable fetching window icons. The default value is false.
 When false the appIcon property of the sources return None. Same if a
 source has the type DesktopCapturerSourceType.Screen.
</summary>
</member>
<member name="P:Electron.GetDesktopCapturerSourcesOptions.types">
<summary>
 An array of Strings that lists the types of desktop sources to be
 captured.
</summary>
</member>
<member name="P:Electron.GetDesktopCapturerSourcesOptions.thumbnailSize">
<summary>
 The size that the media source thumbnail should be scaled to. Default is
 150 x 150. Set width or height to 0 when you do not need the thumbnails.
 This will save the processing time required for capturing the content of
 each window and screen.
</summary>
</member>
<member name="P:Electron.GetDesktopCapturerSourcesOptions.fetchWindowIcons">
<summary>
 Set to true to enable fetching window icons. The default value is false.
 When false the appIcon property of the sources return None. Same if a
 source has the type DesktopCapturerSourceType.Screen.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.path(System.String)">
<summary>
 [Windows] The executable to launch at login. Defaults to process.execPath.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.openAtLogin(System.Boolean)">
<summary>
 True to open the app at login, false to remove the app as a login item.
 Defaults to false.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.openAsHidden(System.Boolean)">
<summary>
 [macOS] True to open the app as hidden. Defaults to false. The user can
 edit this setting from the System Preferences, so
 app.getLoginItemSettings().wasOpenedAsHidden should be checked when the
 app is opened to know the current value. This setting is not available on
 Mac App Store builds.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.args(System.String[])">
<summary>
 [Windows] The command-line arguments to pass to the executable. Defaults
 to an empty array. Take care to wrap paths in quotes.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.path">
<summary>
 [Windows] The executable to launch at login. Defaults to process.execPath.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.openAtLogin">
<summary>
 True to open the app at login, false to remove the app as a login item.
 Defaults to false.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.openAsHidden">
<summary>
 [macOS] True to open the app as hidden. Defaults to false. The user can
 edit this setting from the System Preferences, so
 app.getLoginItemSettings().wasOpenedAsHidden should be checked when the
 app is opened to know the current value. This setting is not available on
 Mac App Store builds.
</summary>
</member>
<member name="P:Electron.SetLoginItemSettings.args">
<summary>
 [Windows] The command-line arguments to pass to the executable. Defaults
 to an empty array. Take care to wrap paths in quotes.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.showsTagField(System.Boolean)">
<summary>
 [macOS] Show the tags input box, defaults to true.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.securityScopedBookmarks(System.Boolean)">
<summary>
 [Mac App Store] Create a security scoped bookmark when packaged for the
 Mac App Store. If this option is enabled and the file doesn&apos;t already
 exist a blank file will be created at the chosen path.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.properties(Electron.SaveDialogFeature[])">
<summary>
 Contains which features the dialog should use. The following values are
 supported:
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.nameFieldLabel(System.String)">
<summary>
 [macOS] Custom label for the text displayed in front of the filename text
 field.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.message(System.String)">
<summary>
 [macOS] Message to display above text fields.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.filters(Electron.FileFilter[])">
<summary>
 Filters the file types that are displayed in the dialog.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.defaultPath(System.String)">
<summary>
 Absolute directory path, absolute file path, or file name to use by
 default.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.buttonLabel(System.String)">
<summary>
 Custom label for the confirmation button, when left empty the default
 label will be used.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.showsTagField">
<summary>
 [macOS] Show the tags input box, defaults to true.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.securityScopedBookmarks">
<summary>
 [Mac App Store] Create a security scoped bookmark when packaged for the
 Mac App Store. If this option is enabled and the file doesn&apos;t already
 exist a blank file will be created at the chosen path.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.properties">
<summary>
 Contains which features the dialog should use. The following values are
 supported:
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.nameFieldLabel">
<summary>
 [macOS] Custom label for the text displayed in front of the filename text
 field.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.message">
<summary>
 [macOS] Message to display above text fields.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.filters">
<summary>
 Filters the file types that are displayed in the dialog.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.defaultPath">
<summary>
 Absolute directory path, absolute file path, or file name to use by
 default.
</summary>
</member>
<member name="P:Electron.SaveDialogOptions.buttonLabel">
<summary>
 Custom label for the confirmation button, when left empty the default
 label will be used.
</summary>
</member>
<member name="P:Electron.OnBeforeRequestResponse.redirectURL(System.String)">
<summary>
 The original request is prevented from being sent or completed and is
 instead redirected to the given URL.
</summary>
</member>
<member name="P:Electron.OnBeforeRequestResponse.redirectURL">
<summary>
 The original request is prevented from being sent or completed and is
 instead redirected to the given URL.
</summary>
</member>
<member name="P:Electron.ResizeOptions.width(System.Int32)">
<summary>
 Defaults to the image&apos;s width.
</summary>
</member>
<member name="P:Electron.ResizeOptions.quality(Electron.ResizeQuality)">
<summary>
 The desired quality of the resize image. These values express a desired
 quality/speed tradeoff. They are translated into an algorithm-specific
 method that depends on the capabilities (CPU, GPU) of the underlying
 platform. It is possible for all three methods to be mapped to the same
 algorithm on a given platform.
</summary>
</member>
<member name="P:Electron.ResizeOptions.height(System.Int32)">
<summary>
 Defaults to the image&apos;s height.
</summary>
</member>
<member name="P:Electron.ResizeOptions.width">
<summary>
 Defaults to the image&apos;s width.
</summary>
</member>
<member name="P:Electron.ResizeOptions.quality">
<summary>
 The desired quality of the resize image. These values express a desired
 quality/speed tradeoff. They are translated into an algorithm-specific
 method that depends on the capabilities (CPU, GPU) of the underlying
 platform. It is possible for all three methods to be mapped to the same
 algorithm on a given platform.
</summary>
</member>
<member name="P:Electron.ResizeOptions.height">
<summary>
 Defaults to the image&apos;s height.
</summary>
</member>
<member name="P:Electron.ProtocolResponseUploadData.data(Fable.Core.U2{System.String,Node.Buffer.Buffer})">
<summary>
 Content to be sent.
</summary>
</member>
<member name="P:Electron.ProtocolResponseUploadData.contentType(System.String)">
<summary>
 MIME type of the content.
</summary>
</member>
<member name="P:Electron.ProtocolResponseUploadData.data">
<summary>
 Content to be sent.
</summary>
</member>
<member name="P:Electron.ProtocolResponseUploadData.contentType">
<summary>
 MIME type of the content.
</summary>
</member>
<member name="P:Electron.ClipboardBookmark.url">
<summary>
 The URL of the bookmark in the clipboard. Will be the empty string when
 the bookmark is unavailable.
</summary>
</member>
<member name="P:Electron.ClipboardBookmark.title">
<summary>
 The title of the bookmark in the clipboard. Will be the empty string when
 the bookmark is unavailable.
</summary>
</member>
<member name="P:Electron.SpellCheckProvider.spellCheck(System.Action{System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 First argument is the words words to spellcheck. Second argument is a
 callback that must be called with misspelt words.
</summary>
</member>
<member name="P:Electron.SpellCheckProvider.spellCheck">
<summary>
 First argument is the words words to spellcheck. Second argument is a
 callback that must be called with misspelt words.
</summary>
</member>
<member name="P:Electron.ProgressBarOptions.mode(Electron.ProgressBarMode)">
<summary>
 [Windows] Mode for the progress bar. Can be none, normal, indeterminate,
 error or paused.
</summary>
</member>
<member name="P:Electron.ProgressBarOptions.mode">
<summary>
 [Windows] Mode for the progress bar. Can be none, normal, indeterminate,
 error or paused.
</summary>
</member>
<member name="P:Electron.ProcessMemoryInfo.shared">
<summary>
 The amount of memory shared between processes, typically memory consumed
 by the Electron code itself in Kilobytes.
</summary>
</member>
<member name="P:Electron.ProcessMemoryInfo.residentSet">
<summary>
 [Linux, Windows] The amount of memory currently pinned to actual physical
 RAM in Kilobytes.

 Chromium does not provide `residentSet` value for macOS. This is because
 macOS performs in-memory compression of pages that haven&apos;t been recently
 used. As a result the resident set size value is not what one would
 expect. `private` memory is more representative of the actual
 pre-compression memory usage of the process on macOS.
</summary>
</member>
<member name="P:Electron.ProcessMemoryInfo.private">
<summary>
 The amount of memory not shared by other processes, such as JS heap or
 HTML content in Kilobytes.
</summary>
</member>
<member name="P:Electron.BlinkMemoryInfo.total">
<summary>
 Total allocated space in Kilobytes.
</summary>
</member>
<member name="P:Electron.BlinkMemoryInfo.marked">
<summary>
 Size of all marked objects in Kilobytes.
</summary>
</member>
<member name="P:Electron.BlinkMemoryInfo.allocated">
<summary>
 Size of all allocated objects in Kilobytes.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.supportFetchAPI(System.Boolean)">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.standard(System.Boolean)">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.secure(System.Boolean)">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.corsEnabled(System.Boolean)">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.bypassCSP(System.Boolean)">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.allowServiceWorkers(System.Boolean)">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.supportFetchAPI">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.standard">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.secure">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.corsEnabled">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.bypassCSP">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.CustomSchemePrivileges.allowServiceWorkers">
<summary>
 Default false.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.scaleFactor(System.Double)">
<summary>
 The scale factor of the web page. Can range from 0 to 100.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.printSelectionOnly(System.Boolean)">
<summary>
 Whether to print selection only. Default false.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.printBackground(System.Boolean)">
<summary>
 Whether to print CSS backgrounds. Default false.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.pageSize(Fable.Core.U2{Electron.PrintToPDFSize,Electron.Size})">
<summary>
 Specify page size of the generated PDF. Can be A3, A4, A5, Legal, Letter,
 Tabloid or an object containing height and width in microns.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.marginsType(System.Int32)">
<summary>
 Specifies the type of margins to use. Uses 0 for default margin, 1 for no
 margin, and 2 for minimum margin. Default 0.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.landscape(System.Boolean)">
<summary>
 `true` for landscape,`false` for portrait.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.scaleFactor">
<summary>
 The scale factor of the web page. Can range from 0 to 100.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.printSelectionOnly">
<summary>
 Whether to print selection only. Default false.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.printBackground">
<summary>
 Whether to print CSS backgrounds. Default false.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.pageSize">
<summary>
 Specify page size of the generated PDF. Can be A3, A4, A5, Legal, Letter,
 Tabloid or an object containing height and width in microns.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.pageRanges">
<summary>
 The page ranges to print.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.marginsType">
<summary>
 Specifies the type of margins to use. Uses 0 for default margin, 1 for no
 margin, and 2 for minimum margin. Default 0.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptions.landscape">
<summary>
 `true` for landscape,`false` for portrait.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptionsHeaderFooter.url(System.String)">
<summary>
 The url for the PDF footer.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptionsHeaderFooter.title(System.String)">
<summary>
 The title for the PDF header.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptionsHeaderFooter.url">
<summary>
 The url for the PDF footer.
</summary>
</member>
<member name="P:Electron.PrintToPDFOptionsHeaderFooter.title">
<summary>
 The title for the PDF header.
</summary>
</member>
<member name="P:Electron.PrintOptions.silent(System.Boolean)">
<summary>
 Don&apos;t ask user for print settings. Default is false.
</summary>
</member>
<member name="P:Electron.PrintOptions.scaleFactor(System.Double)">
<summary>
 The scale factor of the web page.
</summary>
</member>
<member name="P:Electron.PrintOptions.printBackground(System.Boolean)">
<summary>
 Prints the background color and image of the web page. Default is `false`.
</summary>
</member>
<member name="P:Electron.PrintOptions.pagesPerSheet(System.Int32)">
<summary>
 The number of pages to print per page sheet.
</summary>
</member>
<member name="P:Electron.PrintOptions.pageRanges(Electron.PageRange[])">
<summary>
 The page range to print.
</summary>
</member>
<member name="P:Electron.PrintOptions.landscape(System.Boolean)">
<summary>
 Whether the web page should be printed in landscape mode. Default is
 `false`.
</summary>
</member>
<member name="P:Electron.PrintOptions.header(System.String)">
<summary>
 String to be printed as page header.
</summary>
</member>
<member name="P:Electron.PrintOptions.footer(System.String)">
<summary>
 String to be printed as page footer.
</summary>
</member>
<member name="P:Electron.PrintOptions.duplexMode(Electron.PrintDuplexMode)">
<summary>
 Set the duplex mode of the printed web page.
</summary>
</member>
<member name="P:Electron.PrintOptions.deviceName(System.String)">
<summary>
 Set the printer device name to use. Must be the system-defined name and not the
 &apos;friendly&apos; name, e.g &apos;Brother_QL_820NWB&apos; and not &apos;Brother QL-820NWB&apos;.
</summary>
</member>
<member name="P:Electron.PrintOptions.copies(System.Int32)">
<summary>
 The number of copies of the web page to print.
</summary>
</member>
<member name="P:Electron.PrintOptions.color(System.Boolean)">
<summary>
 Set whether the printed web page will be in color or grayscale. Default is
 `true`.
</summary>
</member>
<member name="P:Electron.PrintOptions.collate(System.Boolean)">
<summary>
 Whether the web page should be collated.
</summary>
</member>
<member name="P:Electron.PrintOptions.silent">
<summary>
 Don&apos;t ask user for print settings. Default is false.
</summary>
</member>
<member name="P:Electron.PrintOptions.scaleFactor">
<summary>
 The scale factor of the web page.
</summary>
</member>
<member name="P:Electron.PrintOptions.printBackground">
<summary>
 Prints the background color and image of the web page. Default is `false`.
</summary>
</member>
<member name="P:Electron.PrintOptions.pagesPerSheet">
<summary>
 The number of pages to print per page sheet.
</summary>
</member>
<member name="P:Electron.PrintOptions.pageRanges">
<summary>
 The page range to print.
</summary>
</member>
<member name="P:Electron.PrintOptions.landscape">
<summary>
 Whether the web page should be printed in landscape mode. Default is
 `false`.
</summary>
</member>
<member name="P:Electron.PrintOptions.header">
<summary>
 String to be printed as page header.
</summary>
</member>
<member name="P:Electron.PrintOptions.footer">
<summary>
 String to be printed as page footer.
</summary>
</member>
<member name="P:Electron.PrintOptions.duplexMode">
<summary>
 Set the duplex mode of the printed web page.
</summary>
</member>
<member name="P:Electron.PrintOptions.deviceName">
<summary>
 Set the printer device name to use. Must be the system-defined name and not the
 &apos;friendly&apos; name, e.g &apos;Brother_QL_820NWB&apos; and not &apos;Brother QL-820NWB&apos;.
</summary>
</member>
<member name="P:Electron.PrintOptions.copies">
<summary>
 The number of copies of the web page to print.
</summary>
</member>
<member name="P:Electron.PrintOptions.color">
<summary>
 Set whether the printed web page will be in color or grayscale. Default is
 `true`.
</summary>
</member>
<member name="P:Electron.PrintOptions.collate">
<summary>
 Whether the web page should be collated.
</summary>
</member>
<member name="P:Electron.PrintDpi.vertical(System.Int32)">
<summary>
 The vertical dpi.
</summary>
</member>
<member name="P:Electron.PrintDpi.horizontal(System.Int32)">
<summary>
 The horizontal dpi.
</summary>
</member>
<member name="P:Electron.PrintDpi.vertical">
<summary>
 The vertical dpi.
</summary>
</member>
<member name="P:Electron.PrintDpi.horizontal">
<summary>
 The horizontal dpi.
</summary>
</member>
<member name="P:Electron.PrintMargin.top">
<summary>
 The top margin of the printed web page, in pixels.
</summary>
</member>
<member name="P:Electron.PrintMargin.right">
<summary>
 The right margin of the printed web page, in pixels.
</summary>
</member>
<member name="P:Electron.PrintMargin.marginType">
<summary>
 If `PrintOptionsMarginType.Custom` is chosen, you will also need to
 specify `top`, `bottom`, `left`, and `right`.
</summary>
</member>
<member name="P:Electron.PrintMargin.left">
<summary>
 The left margin of the printed web page, in pixels.
</summary>
</member>
<member name="P:Electron.PrintMargin.bottom">
<summary>
 The bottom margin of the printed web page, in pixels.
</summary>
</member>
<member name="P:Electron.PopupOptions.y(System.Int32)">
<summary>
 Default is the current mouse cursor position. Must be set if x is set.
</summary>
</member>
<member name="P:Electron.PopupOptions.x(System.Int32)">
<summary>
 Default is the current mouse cursor position. Must be set if y is set.
</summary>
</member>
<member name="P:Electron.PopupOptions.window(Electron.BrowserWindow)">
<summary>
 Default is the focused window.
</summary>
</member>
<member name="P:Electron.PopupOptions.positioningItem(System.Int32)">
<summary>
 [macOS] The index of the menu item to be positioned under the mouse cursor
 at the specified coordinates. Default is -1.
</summary>
</member>
<member name="P:Electron.PopupOptions.callback(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Called when menu is closed.
</summary>
</member>
<member name="P:Electron.PopupOptions.y">
<summary>
 Default is the current mouse cursor position. Must be set if x is set.
</summary>
</member>
<member name="P:Electron.PopupOptions.x">
<summary>
 Default is the current mouse cursor position. Must be set if y is set.
</summary>
</member>
<member name="P:Electron.PopupOptions.window">
<summary>
 Default is the focused window.
</summary>
</member>
<member name="P:Electron.PopupOptions.positioningItem">
<summary>
 [macOS] The index of the menu item to be positioned under the mouse cursor
 at the specified coordinates. Default is -1.
</summary>
</member>
<member name="P:Electron.PopupOptions.callback">
<summary>
 Called when menu is closed.
</summary>
</member>
<member name="P:Electron.PermissionRequestHandlerDetails.requestingUrl">
<summary>
 The last URL the requesting frame loaded
</summary>
</member>
<member name="P:Electron.PermissionRequestHandlerDetails.mediaTypes">
<summary>
 The types of media access being requested
</summary>
</member>
<member name="P:Electron.PermissionRequestHandlerDetails.isMainFrame">
<summary>
 Whether the frame making the request is the main frame
</summary>
</member>
<member name="P:Electron.PermissionRequestHandlerDetails.externalURL">
<summary>
 The url of the openExternal request.
</summary>
</member>
<member name="P:Electron.PermissionCheckHandlerDetails.securityOrigin">
<summary>
 The security orign of the `media` check.
</summary>
</member>
<member name="P:Electron.PermissionCheckHandlerDetails.requestingUrl">
<summary>
 The last URL the requesting frame loaded
</summary>
</member>
<member name="P:Electron.PermissionCheckHandlerDetails.mediaType">
<summary>
 The type of media access being requested.
</summary>
</member>
<member name="P:Electron.PermissionCheckHandlerDetails.isMainFrame">
<summary>
 Whether the frame making the request is the main frame
</summary>
</member>
<member name="P:Electron.Payment.quantity">
<summary>
 The quantity purchased.
</summary>
</member>
<member name="P:Electron.Payment.productIdentifier">
<summary>
 The identifier of the purchased product.
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.viewSize(Electron.Size)">
<summary>
 Set the emulated view size (empty means no override)
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.viewPosition(Electron.Point)">
<summary>
 Position the view on the screen (screenPosition ==
 DeviceEmulationScreenPosition.Mobile) (default: { x: 0, y: 0 }).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.screenSize(Electron.Size)">
<summary>
 Set the emulated screen size (screenPosition ==
 DeviceEmulationScreenPosition.Mobile).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.screenPosition(Electron.DeviceEmulationScreenPosition)">
<summary>
 Specify the screen type to emulate (default:
 DeviceEmulationScreenPosition.Desktop):
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.scale(System.Double)">
<summary>
 Scale of emulated view inside available space (not in fit to view mode)
 (default: 1).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.deviceScaleFactor(System.Int32)">
<summary>
 Set the device scale factor (if zero defaults to original device scale
 factor) (default: 0).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.viewSize">
<summary>
 Set the emulated view size (empty means no override)
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.viewPosition">
<summary>
 Position the view on the screen (screenPosition ==
 DeviceEmulationScreenPosition.Mobile) (default: { x: 0, y: 0 }).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.screenSize">
<summary>
 Set the emulated screen size (screenPosition ==
 DeviceEmulationScreenPosition.Mobile).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.screenPosition">
<summary>
 Specify the screen type to emulate (default:
 DeviceEmulationScreenPosition.Desktop):
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.scale">
<summary>
 Scale of emulated view inside available space (not in fit to view mode)
 (default: 1).
</summary>
</member>
<member name="P:Electron.DeviceEmulationParameters.deviceScaleFactor">
<summary>
 Set the device scale factor (if zero defaults to original device scale
 factor) (default: 0).
</summary>
</member>
<member name="P:Electron.OpenExternalOptions.workingDirectory(System.String)">
<summary>
 [Windows] The working directory.
</summary>
</member>
<member name="P:Electron.OpenExternalOptions.activate(System.Boolean)">
<summary>
 [macOS] true to bring the opened application to the foreground. The
 default is true.
</summary>
</member>
<member name="P:Electron.OpenExternalOptions.workingDirectory">
<summary>
 [Windows] The working directory.
</summary>
</member>
<member name="P:Electron.OpenExternalOptions.activate">
<summary>
 [macOS] true to bring the opened application to the foreground. The
 default is true.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.securityScopedBookmarks(System.Boolean)">
<summary>
 [Mac App Store] Create security scoped bookmarks when packaged for the Mac
 App Store.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.properties(Electron.OpenDialogFeature[])">
<summary>
 Contains which features the dialog should use. The following values are
 supported:
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.message(System.String)">
<summary>
 [macOS] Message to display above input boxes.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.filters(Electron.FileFilter[])">
<summary>
 Filters the file types that are displayed or selected in the dialog.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.buttonLabel(System.String)">
<summary>
 Custom label for the confirmation button, when left empty the default
 label will be used.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.securityScopedBookmarks">
<summary>
 [Mac App Store] Create security scoped bookmarks when packaged for the Mac
 App Store.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.properties">
<summary>
 Contains which features the dialog should use. The following values are
 supported:
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.message">
<summary>
 [macOS] Message to display above input boxes.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.filters">
<summary>
 Filters the file types that are displayed or selected in the dialog.
</summary>
</member>
<member name="P:Electron.OpenDialogOptions.buttonLabel">
<summary>
 Custom label for the confirmation button, when left empty the default
 label will be used.
</summary>
</member>
<member name="T:Electron.SaveDialogFeature.DontAddToRecent">
<summary>
 Do not add the item being opened to the recent documents list.
</summary>
</member>
<member name="T:Electron.SaveDialogFeature.ShowOverwriteConfirmation">
<summary>
 [linux] Sets whether the user will be presented a confirmation dialog if the user
 types a file name that already exists.
</summary>
</member>
<member name="T:Electron.SaveDialogFeature.TreatPackageAsDirectory">
<summary>
 [macOS] Treat packages, such as .app folders, as a directory instead of a
 file.
</summary>
</member>
<member name="T:Electron.SaveDialogFeature.CreateDirectory">
<summary>
 [macOS] Allow creating new directories from dialog.
</summary>
</member>
<member name="T:Electron.SaveDialogFeature.ShowHiddenFiles">
<summary>
 Show hidden files in dialog.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.DontAddToRecent">
<summary>
 Do not add the item being opened to the recent documents list.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.TreatPackageAsDirectory">
<summary>
 [macOS] Treat packages, such as .app folders, as a directory instead of a
 file.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.NoResolveAliases">
<summary>
 [macOS] Disable the automatic alias (symlink) path resolution. Selected
 aliases will now return the alias path instead of their target path.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.PromptToCreate">
<summary>
 [Windows] Prompt for creation if the file path entered in the dialog does
 not exist. This does not actually create the file at the path but allows
 non-existent paths to be returned that should be created by the
 application.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.CreateDirectory">
<summary>
 [macOS] Allow creating new directories from dialog.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.ShowHiddenFiles">
<summary>
 Show hidden files in dialog.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.MultiSelections">
<summary>
 Allow multiple paths to be selected.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.OpenDirectory">
<summary>
 Allow directories to be selected. Note: On Windows and Linux, can not be
 combined with OpenFile. OpenDirectory will take precedence.
</summary>
</member>
<member name="T:Electron.OpenDialogFeature.OpenFile">
<summary>
 Allow files to be selected. Note: On Windows and Linux, can not be
 combined with OpenDirectory. OpenDirectory will take precedence.
</summary>
</member>
<member name="P:Electron.OpenDevToolsOptions.mode(Electron.DevToolsDockMode)">
<summary>
 Opens the devtools with specified dock state. Defaults to last used dock
 state. In DevToolsDockMode.Undocked mode it&apos;s possible to dock back. In
 DevToolsDockMode.Detach mode it&apos;s not.
</summary>
</member>
<member name="P:Electron.OpenDevToolsOptions.activate(System.Boolean)">
<summary>
 Whether to bring the opened devtools window to the foreground. The default
 is true.
</summary>
</member>
<member name="P:Electron.OpenDevToolsOptions.mode">
<summary>
 Opens the devtools with specified dock state. Defaults to last used dock
 state. In DevToolsDockMode.Undocked mode it&apos;s possible to dock back. In
 DevToolsDockMode.Detach mode it&apos;s not.
</summary>
</member>
<member name="P:Electron.OpenDevToolsOptions.activate">
<summary>
 Whether to bring the opened devtools window to the foreground. The default
 is true.
</summary>
</member>
<member name="P:Electron.OnSendHeadersFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnSendHeadersFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnSendHeadersDetails.requestHeaders">
<summary>
 Properties are `string`.
</summary>
</member>
<member name="P:Electron.OnResponseStartedFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnResponseStartedFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnResponseStartedDetails.responseHeaders">
<summary>
 Properties are `string`.
</summary>
</member>
<member name="P:Electron.OnResponseStartedDetails.fromCache">
<summary>
 Indicates whether the response was fetched from disk cache.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedResponse.statusLine(System.String)">
<summary>
 Should be provided when overriding responseHeaders to change header status
 otherwise original response header&apos;s status will be used.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedResponse.responseHeaders(System.Object)">
<summary>
 When provided, the server is assumed to have responded with these headers.
 Properties must be `string` or `string []`.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedResponse.statusLine">
<summary>
 Should be provided when overriding responseHeaders to change header status
 otherwise original response header&apos;s status will be used.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedResponse.responseHeaders">
<summary>
 When provided, the server is assumed to have responded with these headers.
 Properties must be `string` or `string []`.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedDetails.responseHeaders">
<summary>
 Properties are `string []`.
</summary>
</member>
<member name="P:Electron.OnHeadersReceivedDetails.requestHeaders">
<summary>
 Properties are `string`.
</summary>
</member>
<member name="P:Electron.OnErrorOccurredFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnErrorOccurredFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnErrorOccurredDetails.error">
<summary>
 The error description.
</summary>
</member>
<member name="P:Electron.OnCompletedFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnCompletedFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnCompletedDetails.responseHeaders">
<summary>
 Properties are `string`.
</summary>
</member>
<member name="P:Electron.OnBeforeSendHeadersResponse.requestHeaders(System.Object)">
<summary>
 When provided, request will be made with these headers. Properties must be `string`
 or `string []`.
</summary>
</member>
<member name="P:Electron.OnBeforeSendHeadersResponse.requestHeaders">
<summary>
 When provided, request will be made with these headers. Properties must be `string`
 or `string []`.
</summary>
</member>
<member name="P:Electron.OnBeforeSendHeadersFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnBeforeSendHeadersFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnBeforeSendHeadersDetails.requestHeaders">
<summary>
 Properties are `string`.
</summary>
</member>
<member name="P:Electron.OnBeforeRequestFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnBeforeRequestFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnBeforeRedirectFilter.urls(System.String[])">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnBeforeRedirectFilter.urls">
<summary>
 Array of URL patterns that will be used to filter out the requests that do
 not match the URL patterns.
</summary>
</member>
<member name="P:Electron.OnBeforeRedirectDetails.responseHeaders">
<summary>
 Properties are `string`.
</summary>
</member>
<member name="P:Electron.OnBeforeRedirectDetails.ip">
<summary>
 The server IP address that the request was actually sent to.
</summary>
</member>
<member name="P:Electron.NotificationOptions.urgency(Electron.NotificationUrgency)">
<summary>
 [Linux] The urgency level of the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.title(System.String)">
<summary>
 A title for the notification, which will be shown at the top of the
 notification window when it is shown.
</summary>
</member>
<member name="P:Electron.NotificationOptions.timeoutType(Electron.NotificationTimeoutType)">
<summary>
 [Linux, Windows] The timeout duration of the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.subtitle(System.String)">
<summary>
 [macOS] A subtitle for the notification, which will be displayed below the
 title.
</summary>
</member>
<member name="P:Electron.NotificationOptions.sound(System.String)">
<summary>
 [macOS] The name of the sound file to play when the notification is shown.
</summary>
</member>
<member name="P:Electron.NotificationOptions.silent(System.Boolean)">
<summary>
 Whether or not to emit an OS notification noise when showing the
 notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.replyPlaceholder(System.String)">
<summary>
 [macOS] The placeholder to write in the inline reply input field.
</summary>
</member>
<member name="P:Electron.NotificationOptions.icon(Fable.Core.U2{System.String,Electron.NativeImage})">
<summary>
 An icon to use in the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.hasReply(System.Boolean)">
<summary>
 [macOS] Whether or not to add an inline reply option to the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.closeButtonText(System.String)">
<summary>
 [macOS] A custom title for the close button of an alert. An empty string
 will cause the default localized text to be used.
</summary>
</member>
<member name="P:Electron.NotificationOptions.body(System.String)">
<summary>
 The body text of the notification, which will be displayed below the title
 or subtitle.
</summary>
</member>
<member name="P:Electron.NotificationOptions.actions(Electron.NotificationAction[])">
<summary>
 [macOS] Actions to add to the notification. Please read the available
 actions and limitations in the NotificationAction documentation.
</summary>
</member>
<member name="P:Electron.NotificationOptions.urgency">
<summary>
 [Linux] The urgency level of the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.title">
<summary>
 A title for the notification, which will be shown at the top of the
 notification window when it is shown.
</summary>
</member>
<member name="P:Electron.NotificationOptions.timeoutType">
<summary>
 [Linux, Windows] The timeout duration of the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.subtitle">
<summary>
 [macOS] A subtitle for the notification, which will be displayed below the
 title.
</summary>
</member>
<member name="P:Electron.NotificationOptions.sound">
<summary>
 [macOS] The name of the sound file to play when the notification is shown.
</summary>
</member>
<member name="P:Electron.NotificationOptions.silent">
<summary>
 Whether or not to emit an OS notification noise when showing the
 notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.replyPlaceholder">
<summary>
 [macOS] The placeholder to write in the inline reply input field.
</summary>
</member>
<member name="P:Electron.NotificationOptions.icon">
<summary>
 An icon to use in the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.hasReply">
<summary>
 [macOS] Whether or not to add an inline reply option to the notification.
</summary>
</member>
<member name="P:Electron.NotificationOptions.closeButtonText">
<summary>
 [macOS] A custom title for the close button of an alert. An empty string
 will cause the default localized text to be used.
</summary>
</member>
<member name="P:Electron.NotificationOptions.body">
<summary>
 The body text of the notification, which will be displayed below the title
 or subtitle.
</summary>
</member>
<member name="P:Electron.NotificationOptions.actions">
<summary>
 [macOS] Actions to add to the notification. Please read the available
 actions and limitations in the NotificationAction documentation.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.title(System.String)">
<summary>
 Title of the message box, some platforms will not show it.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.normalizeAccessKeys(System.Boolean)">
<summary>
 Normalize the keyboard access keys across platforms. Default is false.
 Enabling this assumes &amp; is used in the button labels for the placement of
 the keyboard shortcut access key and labels will be converted so they work
 correctly on each platform, &amp; characters are removed on macOS, converted
 to _ on Linux, and left untouched on Windows. For example, a button label
 of Vie&amp;w will be converted to Vie_w on Linux and View on macOS and can be
 selected via Alt-W on Windows and Linux.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.noLink(System.Boolean)">
<summary>
 On Windows Electron will try to figure out which one of the buttons are
 common buttons (like &quot;Cancel&quot; or &quot;Yes&quot;), and show the others as command
 links in the dialog. This can make the dialog appear in the style of
 modern Windows apps. If you don&apos;t like this behavior, you can set noLink
 to true.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.message(System.String)">
<summary>
 Content of the message box.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.detail(System.String)">
<summary>
 Extra information of the message.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.defaultId(System.Int32)">
<summary>
 Index of the button in the buttons array which will be selected by default
 when the message box opens.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.checkboxLabel(System.String)">
<summary>
 If provided, the message box will include a checkbox with the given label.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.checkboxChecked(System.Boolean)">
<summary>
 Initial checked state of the checkbox. `false` by default.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.cancelId(System.Int32)">
<summary>
 The index of the button to be used to cancel the dialog, via the Esc key.
 By default this is assigned to the first button with &quot;cancel&quot; or &quot;no&quot; as
 the label. If no such labeled buttons exist and this option is not set, 0
 will be used as the return value or callback response.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.buttons(System.String[])">
<summary>
 Array of texts for buttons. On Windows, an empty array will result in one
 button labeled &quot;OK&quot;.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.title">
<summary>
 Title of the message box, some platforms will not show it.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.normalizeAccessKeys">
<summary>
 Normalize the keyboard access keys across platforms. Default is false.
 Enabling this assumes &amp; is used in the button labels for the placement of
 the keyboard shortcut access key and labels will be converted so they work
 correctly on each platform, &amp; characters are removed on macOS, converted
 to _ on Linux, and left untouched on Windows. For example, a button label
 of Vie&amp;w will be converted to Vie_w on Linux and View on macOS and can be
 selected via Alt-W on Windows and Linux.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.noLink">
<summary>
 On Windows Electron will try to figure out which one of the buttons are
 common buttons (like &quot;Cancel&quot; or &quot;Yes&quot;), and show the others as command
 links in the dialog. This can make the dialog appear in the style of
 modern Windows apps. If you don&apos;t like this behavior, you can set noLink
 to true.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.message">
<summary>
 Content of the message box.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.detail">
<summary>
 Extra information of the message.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.defaultId">
<summary>
 Index of the button in the buttons array which will be selected by default
 when the message box opens.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.checkboxLabel">
<summary>
 If provided, the message box will include a checkbox with the given label.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.checkboxChecked">
<summary>
 Initial checked state of the checkbox. `false` by default.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.cancelId">
<summary>
 The index of the button to be used to cancel the dialog, via the Esc key.
 By default this is assigned to the first button with &quot;cancel&quot; or &quot;no&quot; as
 the label. If no such labeled buttons exist and this option is not set, 0
 will be used as the return value or callback response.
</summary>
</member>
<member name="P:Electron.MessageBoxOptions.buttons">
<summary>
 Array of texts for buttons. On Windows, an empty array will result in one
 button labeled &quot;OK&quot;.
</summary>
</member>
<member name="T:Electron.MessageBoxType.Warning">
<summary>
 On macOS, by default uses the same icon as Error.
</summary>
</member>
<member name="T:Electron.MessageBoxType.Question">
<summary>
 On Windows, by default uses the same icon as Info.
</summary>
</member>
<member name="T:Electron.MessageBoxType.Error">
<summary>
 On macOS, by default uses the same icon as Warning.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.visible(System.Boolean)">
<summary>
 If false, the menu item will be entirely hidden.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.toolTip(System.String)">
<summary>
 [macOS] Hover text for this menu item.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.submenu(Fable.Core.U2{Electron.MenuItemOptions[],Electron.Menu})">
<summary>
 Should be specified for MenuItemType.SubMenu type menu items. If this
 property is set, then the `type` property may be omitted.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.role(Electron.MenuItemRole)">
<summary>
 The action of the menu item, when specified the `click` property will be
 ignored. More information: https://electronjs.org/docs/api/menu-item#roles
</summary>
</member>
<member name="P:Electron.MenuItemOptions.registerAccelerator(System.Boolean)">
<summary>
 [Linux, Windows] If false, the accelerator won&apos;t be registered with the
 system, but it will still be displayed. Defaults to true.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.id(System.String)">
<summary>
 Unique within a single menu. If defined then it can be used as a reference
 to this item by the position attribute.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.enabled(System.Boolean)">
<summary>
 If false, the menu item will be greyed out and unclickable.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.click(System.Action{Electron.MenuItem,Electron.BrowserWindow,Electron.KeyboardEvent})">
<summary>
 Will be called when the menu item is clicked.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.checked(System.Boolean)">
<summary>
 Should only be specified for MenuItemType.Checkbox and MenuItemType.Radio
 type menu items.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.beforeGroupContaining(System.String[])">
<summary>
 Provides a means for a single context menu to declare the placement of
 their containing group before the containing group of the item with the
 specified label.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.before(System.String[])">
<summary>
 Inserts this item before the item with the specified label. If the
 referenced item doesn&apos;t exist the item will be inserted at the end of the
 menu. Also implies that the menu item in question should be placed in the
 same “group” as the item.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.afterGroupContaining(System.String[])">
<summary>
 Provides a means for a single context menu to declare the placement of
 their containing group after the containing group of the item with the
 specified label.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.after(System.String[])">
<summary>
 Inserts this item after the item with the specified label. If the
 referenced item doesn&apos;t exist the item will be inserted at the end of the
 menu.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.acceleratorWorksWhenHidden(System.Boolean)">
<summary>
 [macOS] Default is `true`, and when `false` will prevent the accelerator
 from triggering the item if the item is not visible.

 This is specified as being macOS-only because accelerators always work
 when items are hidden on Windows and Linux. The option is exposed to users
 to give them the option to turn it off, as this is possible in native
 macOS development. This property is only usable on macOS High Sierra 10.13
 or newer.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.visible">
<summary>
 If false, the menu item will be entirely hidden.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.toolTip">
<summary>
 [macOS] Hover text for this menu item.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.submenu">
<summary>
 Should be specified for MenuItemType.SubMenu type menu items. If this
 property is set, then the `type` property may be omitted.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.role">
<summary>
 The action of the menu item, when specified the `click` property will be
 ignored. More information: https://electronjs.org/docs/api/menu-item#roles
</summary>
</member>
<member name="P:Electron.MenuItemOptions.registerAccelerator">
<summary>
 [Linux, Windows] If false, the accelerator won&apos;t be registered with the
 system, but it will still be displayed. Defaults to true.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.id">
<summary>
 Unique within a single menu. If defined then it can be used as a reference
 to this item by the position attribute.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.enabled">
<summary>
 If false, the menu item will be greyed out and unclickable.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.click">
<summary>
 Will be called when the menu item is clicked.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.checked">
<summary>
 Should only be specified for MenuItemType.Checkbox and MenuItemType.Radio
 type menu items.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.beforeGroupContaining">
<summary>
 Provides a means for a single context menu to declare the placement of
 their containing group before the containing group of the item with the
 specified label.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.before">
<summary>
 Inserts this item before the item with the specified label. If the
 referenced item doesn&apos;t exist the item will be inserted at the end of the
 menu. Also implies that the menu item in question should be placed in the
 same “group” as the item.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.afterGroupContaining">
<summary>
 Provides a means for a single context menu to declare the placement of
 their containing group after the containing group of the item with the
 specified label.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.after">
<summary>
 Inserts this item after the item with the specified label. If the
 referenced item doesn&apos;t exist the item will be inserted at the end of the
 menu.
</summary>
</member>
<member name="P:Electron.MenuItemOptions.acceleratorWorksWhenHidden">
<summary>
 [macOS] Default is `true`, and when `false` will prevent the accelerator
 from triggering the item if the item is not visible.

 This is specified as being macOS-only because accelerators always work
 when items are hidden on Windows and Linux. The option is exposed to users
 to give them the option to turn it off, as this is possible in native
 macOS development. This property is only usable on macOS High Sierra 10.13
 or newer.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ClearRecentDocuments">
<summary>
 [macOS] Map to the `clearRecentDocuments` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.RecentDocuments">
<summary>
 [macOS] The submenu is an &quot;Open Recent&quot; menu.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Services">
<summary>
 [macOS] The submenu is a &quot;Services&quot; menu. This is only intended for use in
 the Application Menu and is not the same as the &quot;Services&quot; submenu used in
 context menus in macOS apps, which is not implemented in Electron.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Help">
<summary>
 [macOS] The submenu is a &quot;Help&quot; menu.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Window">
<summary>
 [macOS] The submenu is a &quot;Window&quot; menu.
</summary>
</member>
<member name="T:Electron.MenuItemRole.MoveTabToNewWindow">
<summary>
 [macOS] Map to the `moveTabToNewWindow` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.MergeAllWindows">
<summary>
 [macOS] Map to the `mergeAllWindows` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.SelectPreviousTab">
<summary>
 [macOS] Map to the `selectPreviousTab` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.SelectNextTab">
<summary>
 [macOS] Map to the `selectNextTab` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ToggleTabBar">
<summary>
 [macOS] Map to the `toggleTabBar` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Zoom">
<summary>
 [macOS] Map to the `performZoom` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Front">
<summary>
 [macOS] Map to the `arrangeInFront` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.StopSpeaking">
<summary>
 [macOS] Map to the `stopSpeaking` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.StartSpeaking">
<summary>
 [macOS] Map to the `startSpeaking` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Unhide">
<summary>
 [macOS] Map to the `unhideAllApplications` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.HideOthers">
<summary>
 [macOS] Map to the `hideOtherApplications` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Hide">
<summary>
 [macOS] Map to the `hide` action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.About">
<summary>
 [macOS] Map to the orderFrontStandardAboutPanel action.
</summary>
</member>
<member name="T:Electron.MenuItemRole.AppMenu">
<summary>
 [macOS] Whole default &quot;App&quot; menu (About, Services, etc.)
</summary>
</member>
<member name="T:Electron.MenuItemRole.WindowMenu">
<summary>
 Whole default &quot;Window&quot; menu (Minimize, Zoom, etc.).
</summary>
</member>
<member name="T:Electron.MenuItemRole.ViewMenu">
<summary>
 Whole default &quot;View&quot; menu (Reload, Toggle Developer Tools, etc.)
</summary>
</member>
<member name="T:Electron.MenuItemRole.EditMenu">
<summary>
 Whole default &quot;Edit&quot; menu (Undo, Copy, etc.).
</summary>
</member>
<member name="T:Electron.MenuItemRole.FileMenu">
<summary>
 Whole default &quot;File&quot; menu (Close / Quit)
</summary>
</member>
<member name="T:Electron.MenuItemRole.ZoomOut">
<summary>
 Zoom out the focused page by 10%.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ZoomIn">
<summary>
 Zoom in the focused page by 10%.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ResetZoom">
<summary>
 Reset the focused page&apos;s zoom level to the original size.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ToggleFullScreen">
<summary>
 Toggle full screen mode on the current window.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ToggleDevTools">
<summary>
 Toggle developer tools in the current window.
</summary>
</member>
<member name="T:Electron.MenuItemRole.ForceReload">
<summary>
 Reload the current window ignoring the cache.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Reload">
<summary>
 Reload the current window.
</summary>
</member>
<member name="T:Electron.MenuItemRole.Quit">
<summary>
 Quit the application.
</summary>
</member>
<member name="P:Electron.GetLoginItemSettingsOptions.path(System.String)">
<summary>
 [Windows] The executable path to compare against. Defaults to
 process.execPath.
</summary>
</member>
<member name="P:Electron.GetLoginItemSettingsOptions.args(System.String[])">
<summary>
 [Windows] The command-line arguments to compare against. Defaults to an
 empty array.
</summary>
</member>
<member name="P:Electron.GetLoginItemSettingsOptions.path">
<summary>
 [Windows] The executable path to compare against. Defaults to
 process.execPath.
</summary>
</member>
<member name="P:Electron.GetLoginItemSettingsOptions.args">
<summary>
 [Windows] The command-line arguments to compare against. Defaults to an
 empty array.
</summary>
</member>
<member name="P:Electron.LoginItemSettings.wasOpenedAtLogin">
<summary>
 True if the app was opened at login automatically. This setting is not
 available on Mac App Store builds.
</summary>
</member>
<member name="P:Electron.LoginItemSettings.wasOpenedAsHidden">
<summary>
 True if the app was opened as a hidden login item. This indicates that the
 app should not open any windows at startup. This setting is not available
 on Mac App Store builds.
</summary>
</member>
<member name="P:Electron.LoginItemSettings.restoreState">
<summary>
 True if the app was opened as a login item that should restore the state
 from the previous session. This indicates that the app should restore the
 windows that were open the last time the app was closed. This setting is
 not available on Mac App Store builds.
</summary>
</member>
<member name="P:Electron.LoginItemSettings.openAtLogin">
<summary>
 True if the app is set to open at login.
</summary>
</member>
<member name="P:Electron.LoginItemSettings.openAsHidden">
<summary>
 [macOS] True if the app is set to open as hidden at login. This setting is
 not available on Mac App Store builds.
</summary>
</member>
<member name="P:Electron.LoadURLOptions.userAgent(System.String)">
<summary>
 A user agent originating the request.
</summary>
</member>
<member name="P:Electron.LoadURLOptions.httpReferrer(Fable.Core.U2{System.String,Electron.Referrer})">
<summary>
 An HTTP Referrer URL.
</summary>
</member>
<member name="P:Electron.LoadURLOptions.extraHeaders(System.String)">
<summary>
 Extra headers separated by &quot;\n&quot;
</summary>
</member>
<member name="P:Electron.LoadURLOptions.baseURLForDataURL(System.String)">
<summary>
 Base URL (with trailing path separator) for files to be loaded by the data
 url. This is needed only if the specified url is a data url and needs to
 load other files.
</summary>
</member>
<member name="P:Electron.LoadURLOptions.userAgent">
<summary>
 A user agent originating the request.
</summary>
</member>
<member name="P:Electron.LoadURLOptions.httpReferrer">
<summary>
 An HTTP Referrer URL.
</summary>
</member>
<member name="P:Electron.LoadURLOptions.extraHeaders">
<summary>
 Extra headers separated by &quot;\n&quot;
</summary>
</member>
<member name="P:Electron.LoadURLOptions.baseURLForDataURL">
<summary>
 Base URL (with trailing path separator) for files to be loaded by the data
 url. This is needed only if the specified url is a data url and needs to
 load other files.
</summary>
</member>
<member name="P:Electron.LoadFileOptions.search(System.String)">
<summary>
 Passed to url.format().
</summary>
</member>
<member name="P:Electron.LoadFileOptions.query(System.Object)">
<summary>
 Passed to url.format(). The members must be `string`.
</summary>
</member>
<member name="P:Electron.LoadFileOptions.hash(System.String)">
<summary>
 Passed to url.format().
</summary>
</member>
<member name="P:Electron.LoadFileOptions.search">
<summary>
 Passed to url.format().
</summary>
</member>
<member name="P:Electron.LoadFileOptions.query">
<summary>
 Passed to url.format(). The members must be `string`.
</summary>
</member>
<member name="P:Electron.LoadFileOptions.hash">
<summary>
 Passed to url.format().
</summary>
</member>
<member name="P:Electron.JumpListSettings.removedItems">
<summary>
 Items that the user has explicitly removed from custom categories in the
 Jump List. These items must not be re-added to the Jump List in the next
 call to app.setJumpList(). Windows will not display any custom category
 that contains any of the removed items.
</summary>
</member>
<member name="P:Electron.JumpListSettings.minItems">
<summary>
 The minimum number of items that will be shown in the Jump List. For
 details, see
 https://docs.microsoft.com/en-us/windows/desktop/api/shobjidl_core/nf-shobjidl_core-icustomdestinationlist-beginlist
</summary>
</member>
<member name="P:Electron.DraggedItem.icon(Fable.Core.U2{Electron.NativeImage,System.String})">
<summary>
 The image showing under the cursor when dragging. Must be non-empty on
 macOS.
</summary>
</member>
<member name="P:Electron.DraggedItem.files(System.String[])">
<summary>
 The absolute paths to the files being dragged. Mutually exclusive with `file`.
</summary>
</member>
<member name="P:Electron.DraggedItem.file(System.String)">
<summary>
 The absolute path to the file being dragged. Mutually exclusive with `files`.
</summary>
</member>
<member name="P:Electron.DraggedItem.icon">
<summary>
 The image showing under the cursor when dragging. Must be non-empty on
 macOS.
</summary>
</member>
<member name="P:Electron.DraggedItem.files">
<summary>
 The absolute paths to the files being dragged. Mutually exclusive with `file`.
</summary>
</member>
<member name="P:Electron.DraggedItem.file">
<summary>
 The absolute path to the file being dragged. Mutually exclusive with `files`.
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.type(System.String)">
<summary>
 Either keyUp or keyDown.
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.shift(System.Boolean)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.meta(System.Boolean)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.key(System.String)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.isAutoRepeat(System.Boolean)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.control(System.Boolean)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.code(System.String)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.alt(System.Boolean)">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.type">
<summary>
 Either keyUp or keyDown.
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.shift">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.meta">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.key">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.isAutoRepeat">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.control">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.code">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.BeforeInputEventData.alt">
<summary>
 Equivalent to .
</summary>
</member>
<member name="P:Electron.IsolatedWorldInfo.securityOrigin(System.String)">
<summary>
 Security origin for the isolated world.
</summary>
</member>
<member name="P:Electron.IsolatedWorldInfo.name(System.String)">
<summary>
 Name for isolated world. Useful in devtools.
</summary>
</member>
<member name="P:Electron.IsolatedWorldInfo.csp(System.String)">
<summary>
 Content Security Policy for the isolated world. If this is specified, then
 `securityOrigin` also has to be specified.
</summary>
</member>
<member name="P:Electron.IsolatedWorldInfo.securityOrigin">
<summary>
 Security origin for the isolated world.
</summary>
</member>
<member name="P:Electron.IsolatedWorldInfo.name">
<summary>
 Name for isolated world. Useful in devtools.
</summary>
</member>
<member name="P:Electron.IsolatedWorldInfo.csp">
<summary>
 Content Security Policy for the isolated world. If this is specified, then
 `securityOrigin` also has to be specified.
</summary>
</member>
<member name="P:Electron.ImportCertificateOptions.password(System.String)">
<summary>
 Passphrase for the certificate.
</summary>
</member>
<member name="P:Electron.ImportCertificateOptions.certificate(System.String)">
<summary>
 Path for the pkcs12 file.
</summary>
</member>
<member name="P:Electron.ImportCertificateOptions.password">
<summary>
 Passphrase for the certificate.
</summary>
</member>
<member name="P:Electron.ImportCertificateOptions.certificate">
<summary>
 Path for the pkcs12 file.
</summary>
</member>
<member name="P:Electron.IgnoreMouseEventsOptions.forward(System.Boolean)">
<summary>
 [macOS, Windows] If true, forwards mouse move messages to Chromium,
 enabling mouse related events such as mouseleave. Only used when ignore is
 true. If ignore is false, forwarding is always disabled regardless of this
 value.
</summary>
</member>
<member name="P:Electron.IgnoreMouseEventsOptions.forward">
<summary>
 [macOS, Windows] If true, forwards mouse move messages to Chromium,
 enabling mouse related events such as mouseleave. Only used when ignore is
 true. If ignore is false, forwarding is always disabled regardless of this
 value.
</summary>
</member>
<member name="P:Electron.FromPartitionOptions.cache(System.Boolean)">
<summary>
 Whether to enable cache.
</summary>
</member>
<member name="P:Electron.FromPartitionOptions.cache">
<summary>
 Whether to enable cache.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.wordStart(System.Boolean)">
<summary>
 Whether to look only at the start of words. defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.medialCapitalAsWordStart(System.Boolean)">
<summary>
 When combined with wordStart, accepts a match in the middle of a word if
 the match begins with an uppercase letter followed by a lowercase or
 non-letter. Accepts several other intra-word matches, defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.matchCase(System.Boolean)">
<summary>
 Whether search should be case-sensitive, defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.forward(System.Boolean)">
<summary>
 Whether to search forward or backward, defaults to true.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.findNext(System.Boolean)">
<summary>
 Whether the operation is first request or a follow up, defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.wordStart">
<summary>
 Whether to look only at the start of words. defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.medialCapitalAsWordStart">
<summary>
 When combined with wordStart, accepts a match in the middle of a word if
 the match begins with an uppercase letter followed by a lowercase or
 non-letter. Accepts several other intra-word matches, defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.matchCase">
<summary>
 Whether search should be case-sensitive, defaults to false.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.forward">
<summary>
 Whether to search forward or backward, defaults to true.
</summary>
</member>
<member name="P:Electron.FindInPageOptions.findNext">
<summary>
 Whether the operation is first request or a follow up, defaults to false.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.url(System.String)">
<summary>
 Retrieves cookies which are associated with URL. Empty implies retrieving
 cookies of all urls.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.session(System.Boolean)">
<summary>
 Filters out session or persistent cookies.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.secure(System.Boolean)">
<summary>
 Filters cookies by their Secure property.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.path(System.String)">
<summary>
 Retrieves cookies whose path matches `path`.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.name(System.String)">
<summary>
 Filters cookies by name.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.domain(System.String)">
<summary>
 Retrieves cookies whose domains match or are subdomains of `domain`.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.url">
<summary>
 Retrieves cookies which are associated with URL. Empty implies retrieving
 cookies of all urls.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.session">
<summary>
 Filters out session or persistent cookies.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.secure">
<summary>
 Filters cookies by their Secure property.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.path">
<summary>
 Retrieves cookies whose path matches `path`.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.name">
<summary>
 Filters cookies by name.
</summary>
</member>
<member name="P:Electron.GetCookiesFilter.domain">
<summary>
 Retrieves cookies whose domains match or are subdomains of `domain`.
</summary>
</member>
<member name="T:Electron.FileIconSize.Large">
<summary>
 48x48 on Linux, 32x32 on Windows, unsupported on macOS.
</summary>
</member>
<member name="T:Electron.FileIconSize.Normal">
<summary>
 32x32
</summary>
</member>
<member name="T:Electron.FileIconSize.Small">
<summary>
 16x16
</summary>
</member>
<member name="P:Electron.AutoUpdateFeedOptions.serverType(Electron.AutoUpdateFeedServerType)">
<summary>
 [macOS] See the Squirrel.Mac README for more information:
 https://github.com/Squirrel/Squirrel.Mac
</summary>
</member>
<member name="P:Electron.AutoUpdateFeedOptions.headers(System.Object)">
<summary>
 [macOS] HTTP request headers.
</summary>
</member>
<member name="P:Electron.AutoUpdateFeedOptions.serverType">
<summary>
 [macOS] See the Squirrel.Mac README for more information:
 https://github.com/Squirrel/Squirrel.Mac
</summary>
</member>
<member name="P:Electron.AutoUpdateFeedOptions.headers">
<summary>
 [macOS] HTTP request headers.
</summary>
</member>
<member name="P:Electron.PreconnectOptions.url(System.String)">
<summary>
 URL for preconnect. Only the origin is relevant for opening the socket.
</summary>
</member>
<member name="P:Electron.PreconnectOptions.numSockets(System.Int32)">
<summary>
 Number of sockets to preconnect. Must be between 1 and 6. Defaults to 1.
</summary>
</member>
<member name="P:Electron.PreconnectOptions.url">
<summary>
 URL for preconnect. Only the origin is relevant for opening the socket.
</summary>
</member>
<member name="P:Electron.PreconnectOptions.numSockets">
<summary>
 Number of sockets to preconnect. Must be between 1 and 6. Defaults to 1.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.uploadThroughput(System.Double)">
<summary>
 Upload rate in Bps. Defaults to 0 which will disable upload throttling.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.offline(System.Boolean)">
<summary>
 Whether to emulate network outage. Defaults to false.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.latency(System.Double)">
<summary>
 RTT in ms. Defaults to 0 which will disable latency throttling.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.downloadThroughput(System.Double)">
<summary>
 Download rate in Bps. Defaults to 0 which will disable download
 throttling.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.uploadThroughput">
<summary>
 Upload rate in Bps. Defaults to 0 which will disable upload throttling.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.offline">
<summary>
 Whether to emulate network outage. Defaults to false.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.latency">
<summary>
 RTT in ms. Defaults to 0 which will disable latency throttling.
</summary>
</member>
<member name="P:Electron.EnableNetworkEmulationOptions.downloadThroughput">
<summary>
 Download rate in Bps. Defaults to 0 which will disable download
 throttling.
</summary>
</member>
<member name="M:Electron.Dock.show">
<summary>
 [macOS] Shows the dock icon. The promise resolves when the dock icon is
 shown.
</summary>
</member>
<member name="M:Electron.Dock.setMenu(Electron.Menu)">
<summary>
 [macOS] Sets the application&apos;s dock menu. More information:
 https://developer.apple.com/design/human-interface-guidelines/macos/menus/dock-menus/
</summary>
</member>
<member name="M:Electron.Dock.setIcon(System.String)">
<summary>
 [macOS] Sets the image associated with this dock icon.
</summary>
</member>
<member name="M:Electron.Dock.setIcon(Electron.NativeImage)">
<summary>
 [macOS] Sets the image associated with this dock icon.
</summary>
</member>
<member name="M:Electron.Dock.setBadge(System.String)">
<summary>
 [macOS] Sets the string to be displayed in the dock’s badging area.
</summary>
</member>
<member name="M:Electron.Dock.isVisible">
<summary>
 [macOS] Indicates whether the dock icon is visible. The app.dock.show()
 call is asynchronous so this method might not return true immediately
 after that call.
</summary>
</member>
<member name="M:Electron.Dock.hide">
<summary>
 [macOS] Hides the dock icon.
</summary>
</member>
<member name="M:Electron.Dock.getMenu">
<summary>
 [macOS] Returns The application&apos;s dock menu. More information:
 https://developer.apple.com/design/human-interface-guidelines/macos/menus/dock-menus/
</summary>
</member>
<member name="M:Electron.Dock.getBadge">
<summary>
 [macOS] Returns the badge string of the dock.
</summary>
</member>
<member name="M:Electron.Dock.downloadFinished(System.String)">
<summary>
 [macOS] Bounces the Downloads stack if the `filePath` is inside the
 Downloads folder.
</summary>
</member>
<member name="M:Electron.Dock.cancelBounce(System.Int32)">
<summary>
 [macOS] Cancel the bounce of `id`.
</summary>
</member>
<member name="M:Electron.Dock.bounce(Electron.DockBounceType)">
<summary>
 Returns an ID representing the request.

 [macOS] When DockBounceType.Critical is passed, the dock icon will bounce
 until either the application becomes active or the request is canceled.

 When DockBounceType.Informational is passed, the dock icon will bounce for
 one second. However, the request remains active until either the
 application becomes active or the request is canceled.
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.respectQuietTime(System.Boolean)">
<summary>
 Do not display the balloon notification if the current user is in &quot;quiet time&quot;.
 Default is `false`. Maps to
 [`NIIF_RESPECT_QUIET_TIME`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_respect_quiet_time-0x00000080).
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.noSound(System.Boolean)">
<summary>
 Do not play the associated sound. Default is `false`. Maps to
 [`NIIF_NOSOUND`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_nosound-0x00000010).
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.largeIcon(System.Boolean)">
<summary>
 The large version of the icon should be used. Default is `true`. Maps to
 [`NIIF_LARGE_ICON`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_large_icon-0x00000020).
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.iconType(Electron.BalloonIconType)">
<summary>
 Default is `BalloonIconType.Custom`.
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.icon(Fable.Core.U2{Electron.NativeImage,System.String})">
<summary>
 Icon to use when `iconType` is `custom`.
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.respectQuietTime">
<summary>
 Do not display the balloon notification if the current user is in &quot;quiet time&quot;.
 Default is `false`. Maps to
 [`NIIF_RESPECT_QUIET_TIME`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_respect_quiet_time-0x00000080).
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.noSound">
<summary>
 Do not play the associated sound. Default is `false`. Maps to
 [`NIIF_NOSOUND`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_nosound-0x00000010).
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.largeIcon">
<summary>
 The large version of the icon should be used. Default is `true`. Maps to
 [`NIIF_LARGE_ICON`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_large_icon-0x00000020).
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.iconType">
<summary>
 Default is `BalloonIconType.Custom`.
</summary>
</member>
<member name="P:Electron.DisplayBalloonOptions.icon">
<summary>
 Icon to use when `iconType` is `custom`.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.value(System.String)">
<summary>
 The value of the cookie. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.url(System.String)">
<summary>
 The URL to associate the cookie with. If invalid, the promise returned
 when setting the cookie will be rejected.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.secure(System.Boolean)">
<summary>
 Whether the cookie should be marked as Secure. Defaults to false.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.path(System.String)">
<summary>
 The path of the cookie. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.name(System.String)">
<summary>
 The name of the cookie. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.httpOnly(System.Boolean)">
<summary>
 Whether the cookie should be marked as HTTP only. Defaults to false.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.expirationDate(System.Double)">
<summary>
 The expiration date of the cookie as the number of seconds since the UNIX
 epoch. If omitted then the cookie becomes a session cookie and will not be
 retained between sessions.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.domain(System.String)">
<summary>
 The domain of the cookie; this will be normalized with a preceding dot so
 that it&apos;s also valid for subdomains. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.value">
<summary>
 The value of the cookie. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.url">
<summary>
 The URL to associate the cookie with. If invalid, the promise returned
 when setting the cookie will be rejected.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.secure">
<summary>
 Whether the cookie should be marked as Secure. Defaults to false.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.path">
<summary>
 The path of the cookie. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.name">
<summary>
 The name of the cookie. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.httpOnly">
<summary>
 Whether the cookie should be marked as HTTP only. Defaults to false.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.expirationDate">
<summary>
 The expiration date of the cookie as the number of seconds since the UNIX
 epoch. If omitted then the cookie becomes a session cookie and will not be
 retained between sessions.
</summary>
</member>
<member name="P:Electron.SetCookieDetails.domain">
<summary>
 The domain of the cookie; this will be normalized with a preceding dot so
 that it&apos;s also valid for subdomains. Empty by default if omitted.
</summary>
</member>
<member name="P:Electron.ClipboardData.bookmark(System.String)">
<summary>
 The title of the URL at `text`.
</summary>
</member>
<member name="P:Electron.ClipboardData.bookmark">
<summary>
 The title of the URL at `text`.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.urlChain(System.String[])">
<summary>
 Complete URL chain for the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.startTime(System.Double)">
<summary>
 Time when download was started in number of seconds since UNIX epoch.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.path(System.String)">
<summary>
 Absolute path of the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.offset(System.Int32)">
<summary>
 Start range for the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.length(System.Int32)">
<summary>
 Total length of the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.lastModified(System.String)">
<summary>
 Last-Modified header value.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.eTag(System.String)">
<summary>
 ETag header value.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.urlChain">
<summary>
 Complete URL chain for the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.startTime">
<summary>
 Time when download was started in number of seconds since UNIX epoch.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.path">
<summary>
 Absolute path of the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.offset">
<summary>
 Start range for the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.length">
<summary>
 Total length of the download.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.lastModified">
<summary>
 Last-Modified header value.
</summary>
</member>
<member name="P:Electron.CreateInterruptedDownloadOptions.eTag">
<summary>
 ETag header value.
</summary>
</member>
<member name="P:Electron.NativeImageFromBufferOptions.width(System.Int32)">
<summary>
 Required for bitmap buffers.
</summary>
</member>
<member name="P:Electron.NativeImageFromBufferOptions.scaleFactor(System.Double)">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.NativeImageFromBufferOptions.height(System.Int32)">
<summary>
 Required for bitmap buffers.
</summary>
</member>
<member name="P:Electron.NativeImageFromBufferOptions.width">
<summary>
 Required for bitmap buffers.
</summary>
</member>
<member name="P:Electron.NativeImageFromBufferOptions.scaleFactor">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.NativeImageFromBufferOptions.height">
<summary>
 Required for bitmap buffers.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.uploadToServer(System.Boolean)">
<summary>
 Whether crash reports should be sent to the server. If false, crash reports will be
 collected and stored in the crashes directory, but not uploaded. Default is true.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.submitURL(System.String)">
<summary>
 URL that crash reports will be sent to as POST.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.rateLimit(System.Boolean)">
<summary>
 [macOS, Windows] If true, limit the number of crashes uploaded to 1/hour. Default is
 false.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.productName(System.String)">
<summary>
 Defaults to `app.name`.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.ignoreSystemCrashHandler(System.Boolean)">
<summary>
 If true, crashes generated in the main process will not be forwarded to the system
 crash handler. Default is false.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.globalExtra(System.Object)">
<summary>
 Extra string key/value annotations that will be sent along with any crash reports
 generated in any process. These annotations cannot be changed once the crash
 reporter has been started. If a key is present in both the global extra parameters
 and the process-specific extra parameters, then the global one will take precedence.
 By default, `productName` and the app version are included, as well as the Electron
 version.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.extra(System.Object)">
<summary>
 Extra string key/value annotations that will be sent along with crash reports that
 are generated in the main process. Only string values are supported. Crashes
 generated in child processes will not contain these extra parameters to crash
 reports generated from child processes, call `addExtraParameter` from the child
 process.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.compress(System.Boolean)">
<summary>
 If true, crash reports will be compressed and uploaded with `Content-Encoding:
 gzip`. Not all collection servers support compressed payloads. Default is false.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.uploadToServer">
<summary>
 Whether crash reports should be sent to the server. If false, crash reports will be
 collected and stored in the crashes directory, but not uploaded. Default is true.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.submitURL">
<summary>
 URL that crash reports will be sent to as POST.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.rateLimit">
<summary>
 [macOS, Windows] If true, limit the number of crashes uploaded to 1/hour. Default is
 false.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.productName">
<summary>
 Defaults to `app.name`.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.ignoreSystemCrashHandler">
<summary>
 If true, crashes generated in the main process will not be forwarded to the system
 crash handler. Default is false.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.globalExtra">
<summary>
 Extra string key/value annotations that will be sent along with any crash reports
 generated in any process. These annotations cannot be changed once the crash
 reporter has been started. If a key is present in both the global extra parameters
 and the process-specific extra parameters, then the global one will take precedence.
 By default, `productName` and the app version are included, as well as the Electron
 version.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.extra">
<summary>
 Extra string key/value annotations that will be sent along with crash reports that
 are generated in the main process. Only string values are supported. Crashes
 generated in child processes will not contain these extra parameters to crash
 reports generated from child processes, call `addExtraParameter` from the child
 process.
</summary>
</member>
<member name="P:Electron.CrashReporterStartOptions.compress">
<summary>
 If true, crash reports will be compressed and uploaded with `Content-Encoding:
 gzip`. Not all collection servers support compressed payloads. Default is false.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.y">
<summary>
 y coordinate.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.x">
<summary>
 x coordinate.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.titleText">
<summary>
 Title or alt text of the selection that the context was invoked on.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.srcURL">
<summary>
 Source URL for the element that the context menu was invoked on. Elements
 with source URLs are images, audio and video.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.selectionText">
<summary>
 Text of the selection that the context menu was invoked on.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.pageURL">
<summary>
 URL of the top level page that the context menu was invoked on.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.misspelledWord">
<summary>
 The misspelled word under the cursor, if any.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.menuSourceType">
<summary>
 Input source that invoked the context menu.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.mediaType">
<summary>
 Type of the node the context menu was invoked on. Can be none, image,
 audio, video, canvas, file or plugin.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.mediaFlags">
<summary>
 The flags for the media element the context menu was invoked on.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.linkURL">
<summary>
 URL of the link that encloses the node the context menu was invoked on.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.linkText">
<summary>
 Text associated with the link. May be an empty string if the contents of
 the link are an image.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.isEditable">
<summary>
 Whether the context is editable.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.inputFieldType">
<summary>
 If the context menu was invoked on an input field, the type of that field.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.hasImageContents">
<summary>
 Whether the context menu was invoked on an image which has non-empty
 contents.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.frameURL">
<summary>
 URL of the subframe that the context menu was invoked on.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.frameCharset">
<summary>
 The character encoding of the frame on which the menu was invoked.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.editFlags">
<summary>
 These flags indicate whether the renderer believes it is able to perform
 the corresponding action.
</summary>
</member>
<member name="P:Electron.ContextMenuParams.dictionarySuggestions">
<summary>
 An array of suggested words to show the user to replace the `misspelledWord`. Only
 available if there is a misspelled word and spellchecker is enabled.
</summary>
</member>
<member name="P:Electron.ProxyConfig.proxyRules(System.String)">
<summary>
 Rules indicating which proxies to use.

 When pacScript and proxyRules are provided together, the proxyRules option
 is ignored and pacScript configuration is applied.

 This property has to follow specific rules, see
 https://electronjs.org/docs/api/session#sessetproxyconfig
</summary>
</member>
<member name="P:Electron.ProxyConfig.proxyBypassRules(System.String)">
<summary>
 Rules indicating which URLs should bypass the proxy settings.

 This property has to follow specific rules, see
 https://electronjs.org/docs/api/session#sessetproxyconfig
</summary>
</member>
<member name="P:Electron.ProxyConfig.pacScript(System.String)">
<summary>
 The URL associated with the PAC file.

 When pacScript and proxyRules are provided together, the proxyRules option
 is ignored and pacScript configuration is applied.
</summary>
</member>
<member name="P:Electron.ProxyConfig.proxyRules">
<summary>
 Rules indicating which proxies to use.

 When pacScript and proxyRules are provided together, the proxyRules option
 is ignored and pacScript configuration is applied.

 This property has to follow specific rules, see
 https://electronjs.org/docs/api/session#sessetproxyconfig
</summary>
</member>
<member name="P:Electron.ProxyConfig.proxyBypassRules">
<summary>
 Rules indicating which URLs should bypass the proxy settings.

 This property has to follow specific rules, see
 https://electronjs.org/docs/api/session#sessetproxyconfig
</summary>
</member>
<member name="P:Electron.ProxyConfig.pacScript">
<summary>
 The URL associated with the PAC file.

 When pacScript and proxyRules are provided together, the proxyRules option
 is ignored and pacScript configuration is applied.
</summary>
</member>
<member name="M:Electron.CommandLine.hasSwitch(System.String)">
<summary>
 Indicates whether the command-line switch is present.
</summary>
</member>
<member name="M:Electron.CommandLine.getSwitchValue(System.String)">
<summary>
 Returns the command-line switch value.

 Note: When the switch is not present or has no value, it returns empty
 string.
</summary>
</member>
<member name="M:Electron.CommandLine.appendSwitch(System.String,System.String)">
 <summary>
   Append a switch (with optional value) to Chromium's command line.

   Note: This will not affect process.argv. The intended usage of this
   function is to control Chromium's behaviors.
 </summary>
 <param name="switch">A command-line switch, without the leading --</param>
 <param name="value"></param>
</member>
<member name="M:Electron.CommandLine.appendArgument(System.String)">
<summary>
 Append an argument to Chromium&apos;s command line. The argument will be quoted
 correctly.

 Switches will precede arguments regardless of appending order. If you&apos;re
 appending an argument like --switch=value, consider using
 appendSwitch(&apos;switch&apos;, &apos;value&apos;) instead.

 Note: This will not affect process.argv. The intended usage of this
 function is to control Chromium&apos;s behavior.
</summary>
</member>
<member name="P:Electron.ClearStorageDataOptions.storages(Electron.StorageType[])">
<summary>
 The types of storages to clear. If not specified, clear all storage types.
</summary>
</member>
<member name="P:Electron.ClearStorageDataOptions.quotas(Electron.StorageQuota[])">
<summary>
 The types of quotas to clear. If not specified, clear all quotas.
</summary>
</member>
<member name="P:Electron.ClearStorageDataOptions.origin(System.String)">
<summary>
 Should follow window.location.origin’s representation scheme://host:port.
</summary>
</member>
<member name="P:Electron.ClearStorageDataOptions.storages">
<summary>
 The types of storages to clear. If not specified, clear all storage types.
</summary>
</member>
<member name="P:Electron.ClearStorageDataOptions.quotas">
<summary>
 The types of quotas to clear. If not specified, clear all quotas.
</summary>
</member>
<member name="P:Electron.ClearStorageDataOptions.origin">
<summary>
 Should follow window.location.origin’s representation scheme://host:port.
</summary>
</member>
<member name="P:Electron.CertificateVerifyProcRequest.verificationResult(System.String)">
<summary>
 Verification result from chromium.
</summary>
</member>
<member name="P:Electron.CertificateVerifyProcRequest.errorCode(System.Int32)">
<summary>
 Error code.
</summary>
</member>
<member name="P:Electron.CertificateVerifyProcRequest.verificationResult">
<summary>
 Verification result from chromium.
</summary>
</member>
<member name="P:Electron.CertificateVerifyProcRequest.errorCode">
<summary>
 Error code.
</summary>
</member>
<member name="P:Electron.CertificateTrustDialogOptions.message(System.String)">
<summary>
 [macOS] The message to display to the user.
</summary>
</member>
<member name="P:Electron.CertificateTrustDialogOptions.certificate(Electron.Certificate)">
<summary>
 The certificate to trust/import.
</summary>
</member>
<member name="P:Electron.CertificateTrustDialogOptions.message">
<summary>
 [macOS] The message to display to the user.
</summary>
</member>
<member name="P:Electron.CertificateTrustDialogOptions.certificate">
<summary>
 The certificate to trust/import.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.zoomToPageWidth(System.Boolean)">
<summary>
 Controls the behavior on macOS when option-clicking the green stoplight
 button on the toolbar or by clicking the Window &gt; Zoom menu item. If true,
 the window will grow to the preferred width of the web page when zoomed,
 false will cause it to zoom to the width of the screen. This will also
 affect the behavior when calling maximize() directly. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.y(System.Int32)">
<summary>
 Window&apos;s top offset from screen. Required if `x` is used. Default is to
 center the window.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.x(System.Int32)">
<summary>
 Window&apos;s left offset from screen. Required if `y` is used. Default is to
 center the window.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.width(System.Int32)">
<summary>
 Window&apos;s width in pixels. Default is 800.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.webPreferences(Electron.WebPreferences)">
<summary>
 Settings of web page&apos;s features.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.vibrancy(Electron.VibrancyType)">
<summary>
 Add a type of vibrancy effect to the window, only on macOS. Please note
 that using `frame: false` in combination with a vibrancy value requires
 that you use a non-default `titleBarStyle` as well.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.useContentSize(System.Boolean)">
<summary>
 The width and height would be used as web page&apos;s size, which means the
 actual window&apos;s size will include window frame&apos;s size and be slightly
 larger. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.type(Electron.BrowserWindowStyle)">
<summary>
 The type of window.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.transparent(System.Boolean)">
<summary>
 Makes the window transparent. Default is `false`. On Windows, does not
 work unless the window is frameless.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.trafficLightPosition(Electron.Point)">
<summary>
 Set a custom position for the traffic light buttons. Can only be used with
 `titleBarStyle` set to `TitleBarStyle.Hidden`.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.titleBarStyle(Electron.TitleBarStyle)">
<summary>
 The style of window title bar. Default is TitleBarStyle.Default.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.title(System.String)">
<summary>
 Default window title. Default is &quot;Electron&quot;. If the HTML tag `&lt;title&gt;` is
 defined in the HTML file loaded by loadURL(), this property will be
 ignored.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.thickFrame(System.Boolean)">
<summary>
 Use `WS_THICKFRAME` style for frameless windows on Windows, which adds
 standard window frame. Setting it to false will remove window shadow and
 window animations. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.tabbingIdentifier(System.String)">
<summary>
 Tab group name, allows opening the window as a native tab on macOS 10.12+.
 Windows with the same tabbing identifier will be grouped together. This
 also adds a native new tab button to your window&apos;s tab bar and allows your
 app and window to receive the new-window-for-tab event.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.skipTaskbar(System.Boolean)">
<summary>
 Whether to show the window in taskbar. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.simpleFullscreen(System.Boolean)">
<summary>
 Use pre-Lion fullscreen on macOS. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.show(System.Boolean)">
<summary>
 Whether window should be shown when created. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.resizable(System.Boolean)">
<summary>
 Whether window is resizable. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.parent(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserWindow})">
<summary>
 Specify parent window. Default is None.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.paintWhenInitiallyHidden(System.Boolean)">
<summary>
 Whether the renderer should be active when `show` is `false` and it has
 just been created. In order for `document.visibilityState` to work
 correctly on first load with `show: false` you should set this to `false`.
 Setting this to `false` will cause the `ready-to-show` event to not fire.
 Default is `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.opacity(System.Double)">
<summary>
 Set the initial opacity of the window, between 0.0 (fully transparent) and
 1.0 (fully opaque). This is only implemented on Windows and macOS.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.movable(System.Boolean)">
<summary>
 Whether window is movable. This is not implemented on Linux. Default is
 true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.modal(System.Boolean)">
<summary>
 Whether this is a modal window. This only works when the window is a child
 window. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.minimizable(System.Boolean)">
<summary>
 Whether window is minimizable. This is not implemented on Linux. Default
 is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.minWidth(System.Int32)">
<summary>
 Window&apos;s minimum width. Default is 0.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.minHeight(System.Int32)">
<summary>
 Window&apos;s minimum height. Default is 0.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.maximizable(System.Boolean)">
<summary>
 Whether window is maximizable. This is not implemented on Linux. Default
 is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.maxWidth(System.Int32)">
<summary>
 Window&apos;s maximum width. Default is no limit.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.maxHeight(System.Int32)">
<summary>
 Window&apos;s maximum height. Default is no limit.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.kiosk(System.Boolean)">
<summary>
 Whether the window is in kiosk mode. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.icon(Fable.Core.U2{Electron.NativeImage,System.String})">
<summary>
 The window icon. On Windows it is recommended to use ICO icons to get best
 visual effects, you can also leave it undefined so the executable&apos;s icon
 will be used.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.height(System.Int32)">
<summary>
 Window&apos;s height in pixels. Default is 600.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.hasShadow(System.Boolean)">
<summary>
 Whether window should have a shadow. This is only implemented on macOS.
 Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.fullscreenable(System.Boolean)">
<summary>
 Whether the window can be put into fullscreen mode. On macOS, also whether
 the maximize/zoom button should toggle full screen mode or maximize
 window. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.fullscreenWindowTitle(System.Boolean)">
<summary>
 Shows the title in the title bar in full screen mode on macOS for all
 titleBarStyle options. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.fullscreen(System.Boolean)">
<summary>
 Whether the window should show in fullscreen. When explicitly set to false
 the fullscreen button will be hidden or disabled on macOS. Default is
 false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.frame(System.Boolean)">
<summary>
 Specify false to create a frameless window. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.focusable(System.Boolean)">
<summary>
 Whether the window can be focused. Default is true. On Windows setting
 focusable: false also implies setting skipTaskbar: true. On Linux setting
 focusable: false makes the window stop interacting with wm, so the window
 will always stay on top in all workspaces.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.enableLargerThanScreen(System.Boolean)">
<summary>
 Enable the window to be resized larger than screen. Only relevant for
 macOS, as other OSes allow larger-than-screen windows by default. Default
 is `false`.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.disableAutoHideCursor(System.Boolean)">
<summary>
 Whether to hide cursor when typing. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.darkTheme(System.Boolean)">
<summary>
 Forces using dark theme for the window, only works on some GTK+3 desktop
 environments. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.closable(System.Boolean)">
<summary>
 Whether window is closable. This is not implemented on Linux. Default is
 true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.center(System.Boolean)">
<summary>
 Show window in the center of the screen.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.backgroundColor(System.String)">
<summary>
 Window&apos;s background color as a hexadecimal value, like #66CD00 or #FFF or
 #80FFFFFF (alpha in #AARRGGBB format is supported if transparent is set to
 true). Default is #FFF (white).
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.autoHideMenuBar(System.Boolean)">
<summary>
 Auto hide the menu bar unless the Alt key is pressed. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.alwaysOnTop(System.Boolean)">
<summary>
 Whether the window should always stay on top of other windows. Default is
 false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.acceptFirstMouse(System.Boolean)">
<summary>
 Whether the web view accepts a single mouse-down event that simultaneously
 activates the window. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.zoomToPageWidth">
<summary>
 Controls the behavior on macOS when option-clicking the green stoplight
 button on the toolbar or by clicking the Window &gt; Zoom menu item. If true,
 the window will grow to the preferred width of the web page when zoomed,
 false will cause it to zoom to the width of the screen. This will also
 affect the behavior when calling maximize() directly. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.y">
<summary>
 Window&apos;s top offset from screen. Required if `x` is used. Default is to
 center the window.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.x">
<summary>
 Window&apos;s left offset from screen. Required if `y` is used. Default is to
 center the window.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.width">
<summary>
 Window&apos;s width in pixels. Default is 800.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.webPreferences">
<summary>
 Settings of web page&apos;s features.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.vibrancy">
<summary>
 Add a type of vibrancy effect to the window, only on macOS. Please note
 that using `frame: false` in combination with a vibrancy value requires
 that you use a non-default `titleBarStyle` as well.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.useContentSize">
<summary>
 The width and height would be used as web page&apos;s size, which means the
 actual window&apos;s size will include window frame&apos;s size and be slightly
 larger. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.type">
<summary>
 The type of window.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.transparent">
<summary>
 Makes the window transparent. Default is `false`. On Windows, does not
 work unless the window is frameless.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.trafficLightPosition">
<summary>
 Set a custom position for the traffic light buttons. Can only be used with
 `titleBarStyle` set to `TitleBarStyle.Hidden`.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.titleBarStyle">
<summary>
 The style of window title bar. Default is TitleBarStyle.Default.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.title">
<summary>
 Default window title. Default is &quot;Electron&quot;. If the HTML tag `&lt;title&gt;` is
 defined in the HTML file loaded by loadURL(), this property will be
 ignored.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.thickFrame">
<summary>
 Use `WS_THICKFRAME` style for frameless windows on Windows, which adds
 standard window frame. Setting it to false will remove window shadow and
 window animations. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.tabbingIdentifier">
<summary>
 Tab group name, allows opening the window as a native tab on macOS 10.12+.
 Windows with the same tabbing identifier will be grouped together. This
 also adds a native new tab button to your window&apos;s tab bar and allows your
 app and window to receive the new-window-for-tab event.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.skipTaskbar">
<summary>
 Whether to show the window in taskbar. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.simpleFullscreen">
<summary>
 Use pre-Lion fullscreen on macOS. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.show">
<summary>
 Whether window should be shown when created. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.resizable">
<summary>
 Whether window is resizable. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.parent">
<summary>
 Specify parent window. Default is None.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.paintWhenInitiallyHidden">
<summary>
 Whether the renderer should be active when `show` is `false` and it has
 just been created. In order for `document.visibilityState` to work
 correctly on first load with `show: false` you should set this to `false`.
 Setting this to `false` will cause the `ready-to-show` event to not fire.
 Default is `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.opacity">
<summary>
 Set the initial opacity of the window, between 0.0 (fully transparent) and
 1.0 (fully opaque). This is only implemented on Windows and macOS.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.movable">
<summary>
 Whether window is movable. This is not implemented on Linux. Default is
 true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.modal">
<summary>
 Whether this is a modal window. This only works when the window is a child
 window. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.minimizable">
<summary>
 Whether window is minimizable. This is not implemented on Linux. Default
 is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.minWidth">
<summary>
 Window&apos;s minimum width. Default is 0.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.minHeight">
<summary>
 Window&apos;s minimum height. Default is 0.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.maximizable">
<summary>
 Whether window is maximizable. This is not implemented on Linux. Default
 is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.maxWidth">
<summary>
 Window&apos;s maximum width. Default is no limit.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.maxHeight">
<summary>
 Window&apos;s maximum height. Default is no limit.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.kiosk">
<summary>
 Whether the window is in kiosk mode. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.icon">
<summary>
 The window icon. On Windows it is recommended to use ICO icons to get best
 visual effects, you can also leave it undefined so the executable&apos;s icon
 will be used.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.height">
<summary>
 Window&apos;s height in pixels. Default is 600.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.hasShadow">
<summary>
 Whether window should have a shadow. This is only implemented on macOS.
 Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.fullscreenable">
<summary>
 Whether the window can be put into fullscreen mode. On macOS, also whether
 the maximize/zoom button should toggle full screen mode or maximize
 window. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.fullscreenWindowTitle">
<summary>
 Shows the title in the title bar in full screen mode on macOS for all
 titleBarStyle options. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.fullscreen">
<summary>
 Whether the window should show in fullscreen. When explicitly set to false
 the fullscreen button will be hidden or disabled on macOS. Default is
 false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.frame">
<summary>
 Specify false to create a frameless window. Default is true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.focusable">
<summary>
 Whether the window can be focused. Default is true. On Windows setting
 focusable: false also implies setting skipTaskbar: true. On Linux setting
 focusable: false makes the window stop interacting with wm, so the window
 will always stay on top in all workspaces.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.enableLargerThanScreen">
<summary>
 Enable the window to be resized larger than screen. Only relevant for
 macOS, as other OSes allow larger-than-screen windows by default. Default
 is `false`.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.disableAutoHideCursor">
<summary>
 Whether to hide cursor when typing. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.darkTheme">
<summary>
 Forces using dark theme for the window, only works on some GTK+3 desktop
 environments. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.closable">
<summary>
 Whether window is closable. This is not implemented on Linux. Default is
 true.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.center">
<summary>
 Show window in the center of the screen.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.backgroundColor">
<summary>
 Window&apos;s background color as a hexadecimal value, like #66CD00 or #FFF or
 #80FFFFFF (alpha in #AARRGGBB format is supported if transparent is set to
 true). Default is #FFF (white).
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.autoHideMenuBar">
<summary>
 Auto hide the menu bar unless the Alt key is pressed. Default is false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.alwaysOnTop">
<summary>
 Whether the window should always stay on top of other windows. Default is
 false.
</summary>
</member>
<member name="P:Electron.BrowserWindowOptions.acceptFirstMouse">
<summary>
 Whether the web view accepts a single mouse-down event that simultaneously
 activates the window. Default is false.
</summary>
</member>
<member name="T:Electron.BrowserWindowStyle.Textured">
<summary>
 [macOS] adds metal gradient appearance (NSTexturedBackgroundWindowMask)
</summary>
</member>
<member name="T:Electron.BrowserWindowStyle.Notification">
<summary>
 [Linux]
</summary>
</member>
<member name="T:Electron.BrowserWindowStyle.Splash">
<summary>
 [Linux]
</summary>
</member>
<member name="T:Electron.BrowserWindowStyle.Toolbar">
<summary>
 [Linux; Windows]
</summary>
</member>
<member name="T:Electron.BrowserWindowStyle.Dock">
<summary>
 [Linux]
</summary>
</member>
<member name="T:Electron.BrowserWindowStyle.Desktop">
<summary>
 [Linux, macOS] On macOS, places the window at the desktop background
 window level (kCGDesktopWindowLevel - 1). Note that desktop window will
 not receive focus, keyboard or mouse events, but you can use
 globalShortcut to receive input sparingly.
</summary>
</member>
<member name="T:Electron.TitleBarStyle.CustomButtonsOnHover">
<summary>
 Draw custom close, and minimize buttons on macOS frameless windows. These
 buttons will not display unless hovered over in the top left of the
 window. These custom buttons prevent issues with mouse events that occur
 with the standard window toolbar buttons. Note: This option is currently
 experimental.
</summary>
</member>
<member name="T:Electron.TitleBarStyle.HiddenInset">
<summary>
 Results in a hidden title bar with an alternative look where the traffic
 light buttons are slightly more inset from the window edge.
</summary>
</member>
<member name="T:Electron.TitleBarStyle.Hidden">
<summary>
 Results in a hidden title bar and a full size content window, yet the
 title bar still has the standard window controls (&quot;traffic lights&quot;) in the
 top left.
</summary>
</member>
<member name="T:Electron.TitleBarStyle.Default">
<summary>
 Results in the standard gray opaque Mac title bar.
</summary>
</member>
<member name="P:Electron.BrowserViewOptions.webPreferences(Electron.WebPreferences)">
<summary>
 Settings of web page&apos;s features.
</summary>
</member>
<member name="P:Electron.BrowserViewOptions.webPreferences">
<summary>
 Settings of web page&apos;s features.
</summary>
</member>
<member name="P:Electron.GetBitmapOptions.scaleFactor(System.Double)">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.GetBitmapOptions.scaleFactor">
<summary>
 Defaults to 1.0.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.width(System.Boolean)">
<summary>
 If `true`, the view&apos;s width will grow and shrink together with the window.
 `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.vertical(System.Boolean)">
<summary>
 If `true`, the view&apos;s x position and width will grow and shrink
 proportionly with the window. `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.horizontal(System.Boolean)">
<summary>
 If `true`, the view&apos;s y position and height will grow and shrink
 proportinaly with the window. `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.height(System.Boolean)">
<summary>
 If `true`, the view&apos;s height will grow and shrink together with the
 window. `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.width">
<summary>
 If `true`, the view&apos;s width will grow and shrink together with the window.
 `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.vertical">
<summary>
 If `true`, the view&apos;s x position and width will grow and shrink
 proportionly with the window. `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.horizontal">
<summary>
 If `true`, the view&apos;s y position and height will grow and shrink
 proportinaly with the window. `false` by default.
</summary>
</member>
<member name="P:Electron.AutoResizeOptions.height">
<summary>
 If `true`, the view&apos;s height will grow and shrink together with the
 window. `false` by default.
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.relaunchDisplayName(System.String)">
<summary>
 Window&apos;s Relaunch Display Name.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-relaunchdisplaynameresource
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.relaunchCommand(System.String)">
<summary>
 Window&apos;s Relaunch Command.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-relaunchcommand
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.appId(System.String)">
<summary>
 Window&apos;s App User Model ID. It has to be set, otherwise the other options
 will have no effect.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-id
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.appIconPath(System.String)">
<summary>
 Window&apos;s Relaunch Icon.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-relaunchiconresource
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.appIconIndex(System.Int32)">
<summary>
 Index of the icon in appIconPath. Ignored when appIconPath is not set.
 Default is 0.
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.relaunchDisplayName">
<summary>
 Window&apos;s Relaunch Display Name.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-relaunchdisplaynameresource
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.relaunchCommand">
<summary>
 Window&apos;s Relaunch Command.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-relaunchcommand
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.appId">
<summary>
 Window&apos;s App User Model ID. It has to be set, otherwise the other options
 will have no effect.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-id
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.appIconPath">
<summary>
 Window&apos;s Relaunch Icon.
 https://docs.microsoft.com/en-us/windows/desktop/properties/props-system-appusermodel-relaunchiconresource
</summary>
</member>
<member name="P:Electron.AppDetailsOptions.appIconIndex">
<summary>
 Index of the icon in appIconPath. Ignored when appIconPath is not set.
 Default is 0.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.width(System.Int32)">
<summary>
 Defaults to 0. Required if a bitmap buffer is specified as `buffer`.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.scaleFactor(System.Double)">
<summary>
 The scale factor to add the image representation for.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.height(System.Int32)">
<summary>
 Defaults to 0. Required if a bitmap buffer is specified as `buffer`.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.dataURL(System.String)">
<summary>
 The data URL containing either a base 64 encoded PNG or JPEG image.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.buffer(Node.Buffer.Buffer)">
<summary>
 The buffer containing the raw image data.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.width">
<summary>
 Defaults to 0. Required if a bitmap buffer is specified as `buffer`.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.scaleFactor">
<summary>
 The scale factor to add the image representation for.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.height">
<summary>
 Defaults to 0. Required if a bitmap buffer is specified as `buffer`.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.dataURL">
<summary>
 The data URL containing either a base 64 encoded PNG or JPEG image.
</summary>
</member>
<member name="P:Electron.AddRepresentationOptions.buffer">
<summary>
 The buffer containing the raw image data.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.website(System.String)">
<summary>
 [Linux] The app&apos;s website.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.version(System.String)">
<summary>
 [macOS] The app&apos;s build version number.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.iconPath(System.String)">
<summary>
 [Linux] Path to the app&apos;s icon.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.credits(System.String)">
<summary>
 [macOS] Credit information.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.copyright(System.String)">
<summary>
 Copyright information.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.authors(System.String)">
<summary>
 [Linux] List of app authors.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.applicationVersion(System.String)">
<summary>
 The app&apos;s version.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.applicationName(System.String)">
<summary>
 The app&apos;s name.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.website">
<summary>
 [Linux] The app&apos;s website.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.version">
<summary>
 [macOS] The app&apos;s build version number.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.iconPath">
<summary>
 [Linux] Path to the app&apos;s icon.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.credits">
<summary>
 [macOS] Credit information.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.copyright">
<summary>
 Copyright information.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.authors">
<summary>
 [Linux] List of app authors.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.applicationVersion">
<summary>
 The app&apos;s version.
</summary>
</member>
<member name="P:Electron.AboutPanelOptions.applicationName">
<summary>
 The app&apos;s name.
</summary>
</member>
<member name="P:Electron.WebSource.startLine(System.Int32)">
<summary>
 Default is 1.
</summary>
</member>
<member name="P:Electron.WebSource.startLine">
<summary>
 Default is 1.
</summary>
</member>
<member name="M:Electron.WebRequest.onSendHeaders(Electron.OnSendHeadersFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnSendHeadersDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) just before a request
 is going to be sent to the server, modifications of previous
 onBeforeSendHeaders response are visible by the time this listener is
 fired.
</summary>
</member>
<member name="M:Electron.WebRequest.onSendHeaders(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnSendHeadersDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) just before a request
 is going to be sent to the server, modifications of previous
 onBeforeSendHeaders response are visible by the time this listener is
 fired.
</summary>
</member>
<member name="M:Electron.WebRequest.onResponseStarted(Electron.OnResponseStartedFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnResponseStartedDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when first byte of the
 response body is received. For HTTP requests, this means that the status
 line and response headers are available.
</summary>
</member>
<member name="M:Electron.WebRequest.onResponseStarted(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnResponseStartedDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when first byte of the
 response body is received. For HTTP requests, this means that the status
 line and response headers are available.
</summary>
</member>
<member name="M:Electron.WebRequest.onHeadersReceived(Electron.OnHeadersReceivedFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnHeadersReceivedDetails,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.OnHeadersReceivedResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 The listener will be called with listener(details, callback) when HTTP
 response headers of a request have been received.

 The callback has to be called with an OnHeadersReceivedResponse object.
</summary>
</member>
<member name="M:Electron.WebRequest.onHeadersReceived(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnHeadersReceivedDetails,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.OnHeadersReceivedResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 The listener will be called with listener(details, callback) when HTTP
 response headers of a request have been received.

 The callback has to be called with an OnHeadersReceivedResponse object.
</summary>
</member>
<member name="M:Electron.WebRequest.onErrorOccurred(Electron.OnErrorOccurredFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnErrorOccurredDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when an error occurs.
</summary>
</member>
<member name="M:Electron.WebRequest.onErrorOccurred(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnErrorOccurredDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when an error occurs.
</summary>
</member>
<member name="M:Electron.WebRequest.onCompleted(Electron.OnCompletedFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnCompletedDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when a request is
 completed.
</summary>
</member>
<member name="M:Electron.WebRequest.onCompleted(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnCompletedDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when a request is
 completed.
</summary>
</member>
<member name="M:Electron.WebRequest.onBeforeSendHeaders(Electron.OnBeforeSendHeadersFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeSendHeadersDetails,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeSendHeadersResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 The listener will be called with listener(details, callback) before
 sending an HTTP request, once the request headers are available. This may
 occur after a TCP connection is made to the server, but before any http
 data is sent.

 The callback has to be called with an OnBeforeSendHeadersResponse object.
</summary>
</member>
<member name="M:Electron.WebRequest.onBeforeSendHeaders(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeSendHeadersDetails,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeSendHeadersResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 The listener will be called with listener(details, callback) before
 sending an HTTP request, once the request headers are available. This may
 occur after a TCP connection is made to the server, but before any http
 data is sent.

 The callback has to be called with an OnBeforeSendHeadersResponse object.
</summary>
</member>
<member name="M:Electron.WebRequest.onBeforeRequest(Electron.OnBeforeRequestFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeRequestDetails,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeRequestResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 The listener will be called with listener(details, callback) when a
 request is about to occur.

 The callback has to be called with an OnBeforeRequestResponse object.
</summary>
</member>
<member name="M:Electron.WebRequest.onBeforeRequest(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeRequestDetails,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeRequestResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 The listener will be called with listener(details, callback) when a
 request is about to occur.

 The callback has to be called with an OnBeforeRequestResponse object.
</summary>
</member>
<member name="M:Electron.WebRequest.onBeforeRedirect(Electron.OnBeforeRedirectFilter,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeRedirectDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when a server initiated
 redirect is about to occur.
</summary>
</member>
<member name="M:Electron.WebRequest.onBeforeRedirect(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.OnBeforeRedirectDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 The listener will be called with listener(details) when a server initiated
 redirect is about to occur.
</summary>
</member>
<member name="M:Electron.WebFrame.setZoomLevel(System.Double)">
<summary>
 Changes the zoom level to the specified level. The original size is 0 and
 each increment above or below represents zooming 20% larger or smaller to
 default limits of 300% and 50% of original size, respectively.
</summary>
</member>
<member name="M:Electron.WebFrame.setZoomFactor(System.Double)">
<summary>
 Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided
 by 100, so 300% = 3.0. The factor must be greater than 0.0. Default is 1.0.
</summary>
</member>
<member name="M:Electron.WebFrame.setVisualZoomLevelLimits(System.Double,System.Double)">
<summary>
 Sets the maximum and minimum pinch-to-zoom level.

 Note: Visual zoom is disabled by default in Electron. To re-enable it,
 call: webFrame.setVisualZoomLevelLimits(1, 3)
</summary>
</member>
<member name="M:Electron.WebFrame.setSpellCheckProvider(System.String,Electron.SpellCheckProvider)">
<summary>
 Sets a provider for spell checking in input fields and text areas. The
 provider must be an object that has a spellCheck method that accepts an
 array of individual words for spellchecking. The spellCheck function runs
 asynchronously and calls the callback function with an array of misspelt
 words when complete. An example of using node-spellchecker as provider:
</summary>
</member>
<member name="M:Electron.WebFrame.setIsolatedWorldInfo(System.Int32,Electron.IsolatedWorldInfo)">
 <summary>
   Set the security origin, content security policy and name of the
   isolated world.
 </summary>
 <param name="worldId">
   The ID of the world to run the javascript in, 0 is the default world,
   999 is the world used by Electrons contextIsolation feature. Chrome
   extensions reserve the range of IDs in `[1 << 20, 1 << 29)`. You can
   provide any integer here.
 </param>
 <param name="info"></param>
</member>
<member name="M:Electron.WebFrame.removeInsertedCSS(System.String)">
<summary>
 Removes the inserted CSS from the current web page. The stylesheet is identified by
 its key, which is returned from `webFrame.insertCSS(css)`.
</summary>
</member>
<member name="M:Electron.WebFrame.insertText(System.String)">
<summary>
 Inserts text to the focused element.
</summary>
</member>
<member name="M:Electron.WebFrame.insertCSS(System.String)">
<summary>
 Injects CSS into the current web page and returns a unique key for the inserted
 stylesheet that can later be used to remove the CSS via
 `webFrame.removeInsertedCSS(key)`.
</summary>
</member>
<member name="P:Electron.WebFrame.top">
<summary>
 A WebFrame representing top frame in frame hierarchy to which webFrame
 belongs, the property would be None if top frame is not in the current
 renderer process.
</summary>
</member>
<member name="P:Electron.WebFrame.routingId">
<summary>
 The unique frame id in the current renderer process. Distinct WebFrame
 instances that refer to the same underlying frame will have the same
 routingId.
</summary>
</member>
<member name="P:Electron.WebFrame.parent">
<summary>
 A WebFrame representing parent frame of webFrame, the property would be
 None if webFrame is top or parent is not in the current renderer process.
</summary>
</member>
<member name="P:Electron.WebFrame.opener">
<summary>
 A WebFrame representing the frame which opened webFrame, the property
 would be None if there&apos;s no opener or opener is not in the current
 renderer process.
</summary>
</member>
<member name="P:Electron.WebFrame.nextSibling">
<summary>
 A WebFrame representing next sibling frame, the property would be None if
 webFrame is the last frame in its parent or if the next sibling is not in
 the current renderer process.
</summary>
</member>
<member name="P:Electron.WebFrame.firstChild">
<summary>
 A WebFrame representing the first child frame of webFrame, the property
 would be None if webFrame has no children or if first child is not in the
 current renderer process.
</summary>
</member>
<member name="M:Electron.WebFrame.getZoomLevel">
<summary>
 Returns the current zoom level.
</summary>
</member>
<member name="M:Electron.WebFrame.getZoomFactor">
<summary>
 Returns the current zoom factor.
</summary>
</member>
<member name="M:Electron.WebFrame.getResourceUsage">
<summary>
 Returns an object describing usage information of Blink&apos;s internal memory
 caches.
</summary>
</member>
<member name="M:Electron.WebFrame.getFrameForSelector(System.String)">
 <summary>
   Returns the frame element in webFrame's document selected by selector,
   None would be returned if selector does not select a frame or if the
   frame is not in the current renderer process.
 </summary>
 <param name="selector">CSS selector for a frame element</param>
</member>
<member name="M:Electron.WebFrame.findFrameByRoutingId(System.Int32)">
 <summary>
   Returns the WebFrame that has the supplied routingId, None if not found.
 </summary>
 <param name="selector">
   The unique frame id in the current renderer process. Routing IDs can be
   retrieved from WebFrame instances (webFrame.routingId) and are also
   passed by frame specific WebContents navigation events (e.g.
   did-frame-navigate)
 </param>
</member>
<member name="M:Electron.WebFrame.findFrameByName(System.String)">
<summary>
 Returns a child of webFrame with the supplied name, None would be returned
 if there&apos;s no such frame or if the frame is not in the current renderer
 process.
</summary>
</member>
<member name="M:Electron.WebFrame.executeJavaScriptInIsolatedWorld(System.Int32,Electron.WebSource[],Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}}})">
 <summary>
   Work like executeJavaScript but evaluates scripts in an isolated context.

   Returns a promise that resolves with the result of the executed code or is
   rejected if execution throws or results in a rejected promise.

   In the browser window some HTML APIs like requestFullScreen can only be invoked by
   a gesture from the user. Setting userGesture to true will remove this limitation.
 </summary>
 <param name="worldId">
   The ID of the world to run the javascript in, 0 is the default world, 999 is the
   world used by Electrons contextIsolation feature. Chrome extensions reserve the
   range of IDs in `[1 << 20, 1 << 29)`. You can provide any integer here.
 </param>
 <param name="scripts"></param>
 <param name="userGesture">Default is false</param>
 <param name="callback">
   Called after script has been executed. Unless the frame is suspended (e.g. showing
   a modal alert), execution will be synchronous and the callback will be invoked
   before the method returns. Parameters: result, error
 </param>
</member>
<member name="M:Electron.WebFrame.executeJavaScript(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Evaluates `code` in page.

 Returns a promise that resolves with the result of the executed code or is rejected
 if execution throws or results in a rejected promise.

 In the browser window some HTML APIs like requestFullScreen can only be invoked by a
 gesture from the user. Setting userGesture to true will remove this limitation.

 The callback is called after script has been executed. Unless the frame is suspended
 (e.g. showing a modal alert), execution will be synchronous and the callback will be
 invoked before the method returns. Parameters: result, error
</summary>
</member>
<member name="M:Electron.WebFrame.clearCache">
<summary>
 Attempts to free memory that is no longer being used (like images from a
 previous navigation).

 Note that blindly calling this method probably makes Electron slower since
 it will have to refill these emptied caches, you should only call it if an
 event in your app has occurred that makes you think your page is actually
 using less memory (i.e. you have navigated from a super heavy page to a
 mostly empty one, and intend to stay there).
</summary>
</member>
<member name="M:Electron.WebContentsStatic.getFocusedWebContents">
<summary>
 Returns the web contents that is focused in this application, otherwise
 returns None.
</summary>
</member>
<member name="M:Electron.WebContentsStatic.getAllWebContents">
<summary>
 Returns all WebContents instances. This will contain web contents for all
 windows, webviews, opened devtools, and devtools extension background
 pages.
</summary>
</member>
<member name="M:Electron.WebContentsStatic.fromId(System.Int32)">
<summary>
 Returns a WebContents instance with the given ID.
</summary>
</member>
<member name="M:Electron.WebContents.unselect">
<summary>
 Executes the editing command unselect in web page.
</summary>
</member>
<member name="M:Electron.WebContents.undo">
<summary>
 Executes the editing command undo in web page.
</summary>
</member>
<member name="M:Electron.WebContents.toggleDevTools">
<summary>
 Toggles the developer tools.
</summary>
</member>
<member name="M:Electron.WebContents.takeHeapSnapshot(System.String)">
<summary>
 Takes a V8 heap snapshot and saves it to filePath.
</summary>
</member>
<member name="M:Electron.WebContents.stopPainting">
<summary>
 If offscreen rendering is enabled and painting, stop painting.
</summary>
</member>
<member name="M:Electron.WebContents.stopFindInPage(Electron.StopFindInPageAction)">
<summary>
 Stops any findInPage request for the webContents with the provided action.
</summary>
</member>
<member name="M:Electron.WebContents.stop">
<summary>
 Stops any pending navigation.
</summary>
</member>
<member name="M:Electron.WebContents.startPainting">
<summary>
 If offscreen rendering is enabled and not painting, start painting.
</summary>
</member>
<member name="M:Electron.WebContents.startDrag(Electron.DraggedItem)">
<summary>
 Sets the item as dragging item for current drag-drop operation.
</summary>
</member>
<member name="M:Electron.WebContents.showDefinitionForSelection">
<summary>
 [macOS] Shows pop-up dictionary that searches the selected word on the
 page.
</summary>
</member>
<member name="P:Electron.WebContents.zoomLevel(System.Double)">
<summary>
 Determines the zoom level for this web contents.

 The original size is 0 and each increment above or below represents zooming 20%
 larger or smaller to default limits of 300% and 50% of original size, respectively.
 The formula for this is `scale := 1.2 ^ level`.
</summary>
</member>
<member name="P:Electron.WebContents.zoomFactor(System.Double)">
<summary>
 Determines the zoom factor for this web contents.

 The zoom factor is the zoom percent divided by 100, so 300% = 3.0.
</summary>
</member>
<member name="P:Electron.WebContents.userAgent(System.String)">
<summary>
 Determines the user agent for this web page.
</summary>
</member>
<member name="P:Electron.WebContents.frameRate(System.Int32)">
<summary>
 Sets the frame rate of the web contents to the specified number. Only values between
 1 and 60 are accepted.
</summary>
</member>
<member name="P:Electron.WebContents.audioMuted(System.Boolean)">
<summary>
 Determines whether this page is muted.
</summary>
</member>
<member name="M:Electron.WebContents.setZoomLevel(System.Double)">
<summary>
 Changes the zoom level to the specified level. The original size is 0 and
 each increment above or below represents zooming 20% larger or smaller to
 default limits of 300% and 50% of original size, respectively. The formula
 for this is scale := 1.2 ^ level.
</summary>
</member>
<member name="M:Electron.WebContents.setZoomFactor(System.Double)">
<summary>
 Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided
 by 100, so 300% = 3.0. The factor must be greater than 0.0. Default is 1.0.
</summary>
</member>
<member name="M:Electron.WebContents.setWebRTCIPHandlingPolicy(Electron.WebRtcIpHandlingPolicy)">
<summary>
 Setting the WebRTC IP handling policy allows you to control which IPs are
 exposed via WebRTC. See BrowserLeaks for more details:
 https://browserleaks.com/webrtc
</summary>
</member>
<member name="M:Electron.WebContents.setVisualZoomLevelLimits(System.Double,System.Double)">
<summary>
 Sets the maximum and minimum pinch-to-zoom level.

 Note: Visual zoom is disabled by default in Electron. To re-enable it,
 call contents.setVisualZoomLevelLimits(1, 3)
</summary>
</member>
<member name="M:Electron.WebContents.setUserAgent(System.String)">
<summary>
 Overrides the user agent for this web page.
</summary>
</member>
<member name="M:Electron.WebContents.setIgnoreMenuShortcuts(System.Boolean)">
<summary>
 Ignore application menu shortcuts while this web contents is focused.
</summary>
</member>
<member name="M:Electron.WebContents.setFrameRate(System.Int32)">
<summary>
 If offscreen rendering is enabled sets the frame rate to the specified
 number. Only values between 1 and 60 are accepted.
</summary>
</member>
<member name="M:Electron.WebContents.setDevToolsWebContents(Electron.WebContents)">
<summary>
 Uses the devToolsWebContents as the target WebContents to show devtools.

 The devToolsWebContents must not have done any navigation, and it should
 not be used for other purposes after the call.

 By default Electron manages the devtools by creating an internal
 WebContents with native view, which developers have very limited control
 of. With the setDevToolsWebContents method, developers can use any
 WebContents to show the devtools in it, including BrowserWindow and
 BrowserView.

 Note that closing the devtools does not destroy the devToolsWebContents,
 it is caller&apos;s responsibility to destroy devToolsWebContents.
</summary>
</member>
<member name="M:Electron.WebContents.setBackgroundThrottling(System.Boolean)">
<summary>
 Controls whether or not this WebContents will throttle animations and
 timers when the page becomes backgrounded. This also affects the Page
 Visibility API.
</summary>
</member>
<member name="M:Electron.WebContents.setAudioMuted(System.Boolean)">
<summary>
 Mute the audio on the current web page.
</summary>
</member>
<member name="M:Electron.WebContents.sendToFrame(System.Int32,System.String,System.Object[])">
<summary>
 Send an asynchronous message to a specific frame in a renderer process via
 `channel`, along with arguments. Arguments will be serialized with the [Structured
 Clone
 Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm),
 just like
 [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage),
 so prototype chains will not be included. Sending Functions, Promises, Symbols,
 WeakMaps, or WeakSets will throw an exception.

 &gt; **NOTE**: Sending non-standard JavaScript types such as DOM objects or special
 Electron objects is deprecated, and will begin throwing an exception starting with
 Electron 9.

 The renderer process can handle the message by listening to `channel` with the
 [`ipcRenderer`](https://www.electronjs.org/docs/api/ipc-renderer) module.

 If you want to get the `frameId` of a given renderer context you should use the
 `webFrame.routingId` value.
</summary>
</member>
<member name="M:Electron.WebContents.sendInputEvent(Electron.SendInputEvent)">
<summary>
 Sends an input event to the page. `event` may be a instance of
 SendKeyboardEvent, SendMouseEvent, or SendMouseWheelEvent.

 Note: The BrowserWindow containing the contents needs to be focused for
 `sendInputEvent()` to work.
</summary>
</member>
<member name="M:Electron.WebContents.send(System.String,System.Object[])">
<summary>
 Send an asynchronous message to the main process via `channel`, along with
 arguments. Arguments will be serialized with the [Structured Clone
 Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm),
 just like
 [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage),
 so prototype chains will not be included. Sending Functions, Promises, Symbols,
 WeakMaps, or WeakSets will throw an exception.

 **NOTE**: Sending non-standard JavaScript types such as DOM objects or special
 Electron objects is deprecated, and will begin throwing an exception starting with
 Electron 9.

 The main process handles it by listening for `channel` with the
 [`ipcMain`](https://www.electronjs.org/docs/api/ipc-main) module.
</summary>
</member>
<member name="M:Electron.WebContents.selectAll">
<summary>
 Executes the editing command selectAll in web page.
</summary>
</member>
<member name="M:Electron.WebContents.savePage(System.String,Electron.WebContentSaveType)">
<summary>
 Returns a promise that resolves if the page is saved.
</summary>
</member>
<member name="M:Electron.WebContents.replaceMisspelling(System.String)">
<summary>
 Executes the editing command replaceMisspelling in web page.
</summary>
</member>
<member name="M:Electron.WebContents.replace(System.String)">
<summary>
 Executes the editing command replace in web page.
</summary>
</member>
<member name="M:Electron.WebContents.removeWorkSpace(System.String)">
<summary>
 Removes the specified path from DevTools workspace.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerZoomChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ZoomChangedDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onZoomChanged.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerWillRedirect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onWillRedirect.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerWillPreventUnload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillPreventUnload.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerWillNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerUpdateTargetUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onUpdateTargetUrl.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnresponsive.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onSelectClientCertificate.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerSelectBluetoothDevice(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BluetoothDevice[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onSelectBluetoothDevice.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerResponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponsive.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteRequire.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetGlobal.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRemoteGetCurrentWindow.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRemoteGetCurrentWebContents.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetBuiltin.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerPreloadError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPreloadError.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerPluginCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPluginCrashed.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerPaint(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.NativeImage,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPaint.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerPageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPageTitleUpdated.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerPageFaviconUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPageFaviconUpdated.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerNewWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.NewWindowEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.WindowDisposition,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindowOptions,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{Electron.Referrer,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onNewWindow.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerMediaStartedPlaying(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMediaStartedPlaying.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerMediaPaused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMediaPaused.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerIpcMessageSync(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onIpcMessageSync.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerIpcMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onIpcMessage.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerFoundInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.FoundInPageResult,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onFoundInPage.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDomReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDomReady.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidStopLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidStopLoading.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidStartNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onDidStartNavigation.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidStartLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidStartLoading.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidRedirectNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onDidRedirectNavigation.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidNavigateInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onDidNavigateInPage.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onDidNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidFrameNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFrameNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidFrameFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onDidFrameFinishLoad.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidFinishLoad.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidFailProvisionalLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFailProvisionalLoad.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidFailLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFailLoad.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDidChangeThemeColor(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDidChangeThemeColor.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDevtoolsReloadPage(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsReloadPage.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDevtoolsOpened(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsOpened.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDevtoolsFocused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsFocused.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDevtoolsClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsClosed.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDestroyed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDestroyed.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDesktopCapturerGetSources.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerCursorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.CursorType,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Size},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Point},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onCursorChanged.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onCrashed.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerContextMenu(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ContextMenuParams,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onContextMenu.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onConsoleMessage.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onCertificateError.
</summary>
</member>
<member name="M:Electron.WebContents.removeListenerBeforeInputEvent(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BeforeInputEventData,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBeforeInputEvent.
</summary>
</member>
<member name="M:Electron.WebContents.removeLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.WebContents.removeInsertedCSS(System.String)">
<summary>
 Removes the inserted CSS from the current web page. The stylesheet is
 identified by its key, which is returned from `contents.insertCSS(css)`.

 The promise resolves if the removal was successful.
</summary>
</member>
<member name="M:Electron.WebContents.removeEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.WebContents.reloadIgnoringCache">
<summary>
 Reloads current page and ignores cache.
</summary>
</member>
<member name="M:Electron.WebContents.reload">
<summary>
 Reloads the current web page.
</summary>
</member>
<member name="M:Electron.WebContents.redo">
<summary>
 Executes the editing command redo in web page.
</summary>
</member>
<member name="M:Electron.WebContents.printToPDF(Electron.PrintToPDFOptions)">
<summary>
 Prints window&apos;s web page as PDF with Chromium&apos;s preview printing custom
 settings.

 Returns a promise that resolves with the generated PDF data.

 The landscape will be ignored if `@page` CSS at-rule is used in the web
 page.

 Use `page-break-before: always;` CSS style to force to print to a new
 page.
</summary>
</member>
<member name="M:Electron.WebContents.print(Microsoft.FSharp.Core.FSharpOption{Electron.PrintOptions},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.PrintFailureReason},Microsoft.FSharp.Core.Unit}}})">
<summary>
 Prints window&apos;s web page. The callback indicates whether the print call
 was successful.

 When `silent` is set to true, Electron will pick the system&apos;s default
 printer if `deviceName` is empty and the default settings for printing.

 Use `page-break-before: always;` CSS style to force to print to a new
 page.
</summary>
</member>
<member name="M:Electron.WebContents.pasteAndMatchStyle">
<summary>
 Executes the editing command pasteAndMatchStyle in web page.
</summary>
</member>
<member name="M:Electron.WebContents.paste">
<summary>
 Executes the editing command paste in web page.
</summary>
</member>
<member name="M:Electron.WebContents.openDevTools(Microsoft.FSharp.Core.FSharpOption{Electron.OpenDevToolsOptions})">
<summary>
 Opens the devtools.
</summary>
</member>
<member name="M:Electron.WebContents.onceZoomChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ZoomChangedDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onZoomChanged.
</summary>
</member>
<member name="M:Electron.WebContents.onceWillRedirect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onWillRedirect.
</summary>
</member>
<member name="M:Electron.WebContents.onceWillPreventUnload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillPreventUnload.
</summary>
</member>
<member name="M:Electron.WebContents.onceWillNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.onceUpdateTargetUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onUpdateTargetUrl.
</summary>
</member>
<member name="M:Electron.WebContents.onceUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnresponsive.
</summary>
</member>
<member name="M:Electron.WebContents.onceSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onSelectClientCertificate.
</summary>
</member>
<member name="M:Electron.WebContents.onceSelectBluetoothDevice(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BluetoothDevice[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onSelectBluetoothDevice.
</summary>
</member>
<member name="M:Electron.WebContents.onceResponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponsive.
</summary>
</member>
<member name="M:Electron.WebContents.onceRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteRequire.
</summary>
</member>
<member name="M:Electron.WebContents.onceRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetGlobal.
</summary>
</member>
<member name="M:Electron.WebContents.onceRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRemoteGetCurrentWindow.
</summary>
</member>
<member name="M:Electron.WebContents.onceRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRemoteGetCurrentWebContents.
</summary>
</member>
<member name="M:Electron.WebContents.onceRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetBuiltin.
</summary>
</member>
<member name="M:Electron.WebContents.oncePreloadError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPreloadError.
</summary>
</member>
<member name="M:Electron.WebContents.oncePluginCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPluginCrashed.
</summary>
</member>
<member name="M:Electron.WebContents.oncePaint(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.NativeImage,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPaint.
</summary>
</member>
<member name="M:Electron.WebContents.oncePageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPageTitleUpdated.
</summary>
</member>
<member name="M:Electron.WebContents.oncePageFaviconUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPageFaviconUpdated.
</summary>
</member>
<member name="M:Electron.WebContents.onceNewWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.NewWindowEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.WindowDisposition,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindowOptions,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{Electron.Referrer,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onNewWindow.
</summary>
</member>
<member name="M:Electron.WebContents.onceMediaStartedPlaying(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMediaStartedPlaying.
</summary>
</member>
<member name="M:Electron.WebContents.onceMediaPaused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMediaPaused.
</summary>
</member>
<member name="M:Electron.WebContents.onceLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.WebContents.onceLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.WebContents.onceIpcMessageSync(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onIpcMessageSync.
</summary>
</member>
<member name="M:Electron.WebContents.onceIpcMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onIpcMessage.
</summary>
</member>
<member name="M:Electron.WebContents.onceFoundInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.FoundInPageResult,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onFoundInPage.
</summary>
</member>
<member name="M:Electron.WebContents.onceEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.WebContents.onceDomReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDomReady.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidStopLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidStopLoading.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidStartNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onDidStartNavigation.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidStartLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidStartLoading.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidRedirectNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onDidRedirectNavigation.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidNavigateInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onDidNavigateInPage.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onDidNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidFrameNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFrameNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidFrameFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onDidFrameFinishLoad.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidFinishLoad.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidFailProvisionalLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFailProvisionalLoad.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidFailLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFailLoad.
</summary>
</member>
<member name="M:Electron.WebContents.onceDidChangeThemeColor(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDidChangeThemeColor.
</summary>
</member>
<member name="M:Electron.WebContents.onceDevtoolsReloadPage(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsReloadPage.
</summary>
</member>
<member name="M:Electron.WebContents.onceDevtoolsOpened(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsOpened.
</summary>
</member>
<member name="M:Electron.WebContents.onceDevtoolsFocused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsFocused.
</summary>
</member>
<member name="M:Electron.WebContents.onceDevtoolsClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsClosed.
</summary>
</member>
<member name="M:Electron.WebContents.onceDestroyed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDestroyed.
</summary>
</member>
<member name="M:Electron.WebContents.onceDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDesktopCapturerGetSources.
</summary>
</member>
<member name="M:Electron.WebContents.onceCursorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.CursorType,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Size},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Point},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onCursorChanged.
</summary>
</member>
<member name="M:Electron.WebContents.onceCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onCrashed.
</summary>
</member>
<member name="M:Electron.WebContents.onceContextMenu(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ContextMenuParams,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onContextMenu.
</summary>
</member>
<member name="M:Electron.WebContents.onceConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onConsoleMessage.
</summary>
</member>
<member name="M:Electron.WebContents.onceCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onCertificateError.
</summary>
</member>
<member name="M:Electron.WebContents.onceBeforeInputEvent(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BeforeInputEventData,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBeforeInputEvent.
</summary>
</member>
<member name="M:Electron.WebContents.onZoomChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ZoomChangedDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the user is requesting to change the zoom level using the
 mouse wheel.
</summary>
</member>
<member name="M:Electron.WebContents.onWillRedirect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Emitted as a server side redirect occurs during navigation. For example a
 302 redirect.

 This event will be emitted after did-start-navigation and always before
 the did-redirect-navigation event for the same navigation.

 Calling event.preventDefault() will prevent the navigation (not just the
 redirect).

 Parameters:

   - event
   - url
   - isInPlace
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onWillPreventUnload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when a beforeunload event handler is attempting to cancel a page
 unload.

 Calling event.preventDefault() will ignore the beforeunload event handler
 and allow the page to be unloaded.
</summary>
</member>
<member name="M:Electron.WebContents.onWillNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a user or the page wants to start navigation. It can happen
 when the window.location object is changed or a user clicks a link in the
 page. The listener receives the URL.

 This event will not emit when the navigation is started programmatically
 with APIs like webContents.loadURL and webContents.back.

 It is also not emitted for in-page navigations, such as clicking anchor
 links or updating the window.location.hash. Use did-navigate-in-page event
 for this purpose.

 Calling event.preventDefault() will prevent the navigation.
</summary>
</member>
<member name="M:Electron.WebContents.onUpdateTargetUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when mouse moves over a link or the keyboard moves the focus to a
 link. The listener receives the url.
</summary>
</member>
<member name="M:Electron.WebContents.onUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the web page becomes unresponsive.
</summary>
</member>
<member name="M:Electron.WebContents.onSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Emitted when a client certificate is requested.

 The usage is the same with the `select-client-certificate` event of `app`.

 Parameters:

   - event
   - url
   - certificateList
   - callback: call with a certificate from the given list to select it
</summary>
</member>
<member name="M:Electron.WebContents.onSelectBluetoothDevice(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BluetoothDevice[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when bluetooth device needs to be selected on call to
 navigator.bluetooth.requestDevice. To use navigator.bluetooth api
 webBluetooth should be enabled. If event.preventDefault is not called,
 first available device will be selected. callback should be called with
 deviceId to be selected, passing empty string to callback will cancel the
 request.
</summary>
</member>
<member name="M:Electron.WebContents.onResponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the unresponsive web page becomes responsive again.
</summary>
</member>
<member name="M:Electron.WebContents.onRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when remote.require() is called in the renderer process. The
 listener is passed the module name. Calling event.preventDefault() will
 prevent the module from being returned. Custom value can be returned by
 setting event.returnValue.
</summary>
</member>
<member name="M:Electron.WebContents.onRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when remote.getGlobal() is called in the renderer process. The
 listener is passed the global name. Calling event.preventDefault() will
 prevent the global from being returned. Custom value can be returned by
 setting event.returnValue.
</summary>
</member>
<member name="M:Electron.WebContents.onRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when remote.getCurrentWindow() is called in the renderer process.
 Calling event.preventDefault() will prevent the object from being
 returned. Custom value can be returned by setting event.returnValue.
</summary>
</member>
<member name="M:Electron.WebContents.onRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when remote.getCurrentWebContents() is called in the renderer
 process. Calling event.preventDefault() will prevent the object from being
 returned. Custom value can be returned by setting event.returnValue.
</summary>
</member>
<member name="M:Electron.WebContents.onRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when remote.getBuiltin() is called in the renderer process. The
 listener is passed the module name. Calling event.preventDefault() will
 prevent the module from being returned. Custom value can be returned by
 setting event.returnValue.
</summary>
</member>
<member name="M:Electron.WebContents.onPreloadError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when the preload script preloadPath throws an unhandled exception
 error.

 Parameters:

   - event
   - preloadPath
   - error
</summary>
</member>
<member name="M:Electron.WebContents.onPluginCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when a plugin process has crashed. Called with the name and version.
</summary>
</member>
<member name="M:Electron.WebContents.onPaint(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.NativeImage,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when a new frame is generated. Only the dirty area is passed in
 the buffer.

 Parameters:

   - event

   - dirtyRect
   - image
</summary>
</member>
<member name="M:Electron.WebContents.onPageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Fired when page title is set during navigation. explicitSet is false when
 title is synthesized from file url.

 Parameters:

   - event
   - title
   - explicitSet
</summary>
</member>
<member name="M:Electron.WebContents.onPageFaviconUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when page receives favicon urls. Called with the URLs.
</summary>
</member>
<member name="M:Electron.WebContents.onNewWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.NewWindowEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.WindowDisposition,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindowOptions,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{Electron.Referrer,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 Emitted when the page requests to open a new window for a url. It could be
 requested by window.open or an external link like &lt;a target=&apos;_blank&apos;&gt;.

 By default a new BrowserWindow will be created for the url.

 Calling event.preventDefault() will prevent Electron from automatically
 creating a new BrowserWindow. If you call event.preventDefault() and
 manually create a new BrowserWindow then you must set event.newGuest to
 reference the new BrowserWindow instance, failing to do so may result in
 unexpected behavior.

 Parameters:

   - event
   - url
   - frameName
   - disposition
   - options: The options which will be used for creating the new BrowserWindow
   - additionalFeatures: The non-standard features (features not handled by Chromium or Electron) given to window.open()
   - referrer: The referrer that will be passed to the new window. May or may not result in the Referer header being sent, depending on the referrer policy.
</summary>
</member>
<member name="M:Electron.WebContents.onMediaStartedPlaying(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when media starts playing.
</summary>
</member>
<member name="M:Electron.WebContents.onMediaPaused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when media is paused or done playing.
</summary>
</member>
<member name="M:Electron.WebContents.onLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Emitted when webContents wants to do basic auth.

 The usage is the same with the `login` event of `app`.

 Parameters:

   - event

   - request
   - authInfo
   - callback(username, password)
</summary>
</member>
<member name="M:Electron.WebContents.onLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window leaves a full-screen state triggered by HTML API.
</summary>
</member>
<member name="M:Electron.WebContents.onIpcMessageSync(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when the renderer process sends a synchronous message via
 ipcRenderer.sendSync().

 Parameters:

   - event
   - channel
   - args
</summary>
</member>
<member name="M:Electron.WebContents.onIpcMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when the renderer process sends an asynchronous message via
 ipcRenderer.send().

 Parameters:

   - event
   - channel
   - args
</summary>
</member>
<member name="M:Electron.WebContents.onFoundInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.FoundInPageResult,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a result is available for [webContents.findInPage] request.
</summary>
</member>
<member name="M:Electron.WebContents.onEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window enters a full-screen state triggered by HTML API.
</summary>
</member>
<member name="M:Electron.WebContents.onDomReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the document in the given frame is loaded.
</summary>
</member>
<member name="M:Electron.WebContents.onDidStopLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Corresponds to the points in time when the spinner of the tab stopped
 spinning.
</summary>
</member>
<member name="M:Electron.WebContents.onDidStartNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Emitted when any frame (including main) starts navigating. isInplace will
 be true for in-page navigations.

 Parameters:

   - event
   - url
   - isInPlace
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidStartLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Corresponds to the points in time when the spinner of the tab started
 spinning.
</summary>
</member>
<member name="M:Electron.WebContents.onDidRedirectNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Emitted after a server side redirect occurs during navigation. For example
 a 302 redirect.

 This event can not be prevented, if you want to prevent redirects you
 should checkout out the `will-redirect` event.

 Parameters:

   - event
   - url
   - isInPlace
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidNavigateInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Emitted when an in-page navigation happened in any frame.

 When in-page navigation happens, the page URL changes but does not cause
 navigation outside of the page. Examples of this occurring are when anchor
 links are clicked or when the DOM `hashchange` event is triggered.

 Parameters:

   - event
   - url
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Emitted when a main frame navigation is done.

 This event is not emitted for in-page navigations, such as clicking anchor
 links or updating the window.location.hash. Use `did-navigate-in-page`
 event for this purpose.

 Parameters:

   - event
   - url
   - httpResponseCode: -1 for non HTTP navigations
   - httpStatusText: empty for non HTTP navigations
</summary>
</member>
<member name="M:Electron.WebContents.onDidFrameNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 Emitted when any frame navigation is done.

 This event is not emitted for in-page navigations, such as clicking anchor
 links or updating the window.location.hash. Use `did-navigate-in-page`
 event for this purpose.

 Parameters:

   - event
   - url
   - httpResponseCode: -1 for non HTTP navigations
   - httpStatusText: empty for non HTTP navigations
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidFrameFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Emitted when a frame has done navigation.

 Parameters:

   - event
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the navigation is done, i.e. the spinner of the tab has
 stopped spinning, and the `onload` event was dispatched.
</summary>
</member>
<member name="M:Electron.WebContents.onDidFailProvisionalLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 This event is like `did-fail-load` but emitted when the load was cancelled
 (e.g. `window.stop()` was invoked).

 Parameters:

   - event
   - errorCode
   - errorDescription
   - validatedURL
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidFailLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 This event is like did-finish-load but emitted when the load failed. The
 full list of error codes and their meaning is available
 [here](https://cs.chromium.org/chromium/src/net/base/net_error_list.h).

 Parameters:

   - event
   - errorCode
   - errorDescription
   - validatedURL
   - isMainFrame
   - frameProcessId
   - frameRoutingId
</summary>
</member>
<member name="M:Electron.WebContents.onDidChangeThemeColor(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a page&apos;s theme color changes. This is usually due to
 encountering a meta tag.

 The listener gets the theme color in format &quot;#rrggbb&quot;. It is None when no
 theme color is set.
</summary>
</member>
<member name="M:Electron.WebContents.onDevtoolsReloadPage(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the devtools window instructs the webContents to reload
</summary>
</member>
<member name="M:Electron.WebContents.onDevtoolsOpened(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when DevTools is opened.
</summary>
</member>
<member name="M:Electron.WebContents.onDevtoolsFocused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when DevTools is focused / opened.
</summary>
</member>
<member name="M:Electron.WebContents.onDevtoolsClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when DevTools is closed.
</summary>
</member>
<member name="M:Electron.WebContents.onDestroyed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when webContents is destroyed.
</summary>
</member>
<member name="M:Electron.WebContents.onDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when desktopCapturer.getSources() is called in the renderer
 process. Calling event.preventDefault() will make it return empty sources.
</summary>
</member>
<member name="M:Electron.WebContents.onCursorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.CursorType,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Size},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Point},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Emitted when the cursor&apos;s type changes. If the type is CursorType.Custom,
 the `image` parameter will hold the custom cursor image, and `scale`,
 `size` and `hotspot` will hold additional information about the custom
 cursor.

 Parameters:

   - event

   - type
   - image
   - scale: scaling factor for the custom cursor
   - size: the size of the image
   - hotspot: coordinates of the custom cursor&apos;s hotspot
</summary>
</member>
<member name="M:Electron.WebContents.onCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the renderer process crashes or is killed. Called with true
 if killed, false if crashed.
</summary>
</member>
<member name="M:Electron.WebContents.onContextMenu(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ContextMenuParams,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when there is a new context menu that needs to be handled.
</summary>
</member>
<member name="M:Electron.WebContents.onConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Emitted when the associated window logs a console message.

 Parameters:

   - event
   - level
   - message
   - line
   - sourceId
</summary>
</member>
<member name="M:Electron.WebContents.onCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Emitted when failed to verify the certificate for `url`.

 The usage is the same with the `certificate-error` event of `app`.

 Parameters:

   - event
   - url
   - error
   - certificate
   - callback: call with true if the certificate can be trusted.
</summary>
</member>
<member name="M:Electron.WebContents.onBeforeInputEvent(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BeforeInputEventData,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted before dispatching the keydown and keyup events in the page.
 Calling event.preventDefault will prevent the page keydown/keyup events
 and the menu shortcuts.

 To only prevent the menu shortcuts, use setIgnoreMenuShortcuts.
</summary>
</member>
<member name="M:Electron.WebContents.loadURL(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.LoadURLOptions})">
<summary>
 Loads the url in the window. The url must contain the protocol prefix,
 e.g. the http:// or file://. If the load should bypass http cache then use
 the pragma header to achieve it.

 The promise will resolve when the page has finished loading (see
 `did-finish-load`), and rejects if the page fails to load (see
 `did-fail-load`). A noop rejection handler is already attached, which
 avoids unhandled rejection errors.
</summary>
</member>
<member name="M:Electron.WebContents.loadFile(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.LoadFileOptions})">
<summary>
 Loads the given file in the window, filePath should be a path to an HTML
 file relative to the root of your application.
</summary>
</member>
<member name="M:Electron.WebContents.isWaitingForResponse">
<summary>
 Indicates whether the web page is waiting for a first-response from the
 main resource of the page.
</summary>
</member>
<member name="M:Electron.WebContents.isPainting">
<summary>
 If offscreen rendering is enabled returns whether it is currently
 painting.
</summary>
</member>
<member name="M:Electron.WebContents.isOffscreen">
<summary>
 Indicates whether offscreen rendering is enabled.
</summary>
</member>
<member name="M:Electron.WebContents.isLoadingMainFrame">
<summary>
 Indicates whether the main frame (and not just iframes or frames within
 it) is still loading.
</summary>
</member>
<member name="M:Electron.WebContents.isLoading">
<summary>
 Indicates whether web page is still loading resources.
</summary>
</member>
<member name="M:Electron.WebContents.isFocused">
<summary>
 Indicates whether the web page is focused.
</summary>
</member>
<member name="M:Electron.WebContents.isDevToolsOpened">
<summary>
 Indicates whether the devtools is opened.
</summary>
</member>
<member name="M:Electron.WebContents.isDevToolsFocused">
<summary>
 Indicates whether the devtools view is focused.
</summary>
</member>
<member name="M:Electron.WebContents.isDestroyed">
<summary>
 Indicates whether the web page is destroyed.
</summary>
</member>
<member name="M:Electron.WebContents.isCurrentlyAudible">
<summary>
 Indicates whether audio is currently playing.
</summary>
</member>
<member name="M:Electron.WebContents.isCrashed">
<summary>
 Indicates whether the renderer process has crashed.
</summary>
</member>
<member name="M:Electron.WebContents.isBeingCaptured">
<summary>
 Returns a value indicating whether this page is being captured. It returns `true`
 when the capturer count is large then 0.
</summary>
</member>
<member name="M:Electron.WebContents.isAudioMuted">
<summary>
 Indicates whether this page has been muted.
</summary>
</member>
<member name="M:Electron.WebContents.invalidate">
<summary>
 Schedules a full repaint of the window this web contents is in.

 If offscreen rendering is enabled invalidates the frame and generates a
 new one through the &apos;paint&apos; event.
</summary>
</member>
<member name="M:Electron.WebContents.inspectSharedWorkerById(System.String)">
<summary>
 Inspects the shared worker based on its ID.
</summary>
</member>
<member name="M:Electron.WebContents.inspectSharedWorker">
<summary>
 Opens the developer tools for the shared worker context.
</summary>
</member>
<member name="M:Electron.WebContents.inspectServiceWorker">
<summary>
 Opens the developer tools for the service worker context.
</summary>
</member>
<member name="M:Electron.WebContents.inspectElement(System.Int32,System.Int32)">
<summary>
 Starts inspecting element at position (x, y).
</summary>
</member>
<member name="M:Electron.WebContents.insertText(System.String)">
<summary>
 Inserts text to the focused element.
</summary>
</member>
<member name="M:Electron.WebContents.insertCSS(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.InsertCssOptions})">
<summary>
 Injects CSS into the current web page and returns a unique key for the
 inserted stylesheet that can later be used to remove the CSS via
 `contents.removeInsertedCSS(key)`.
</summary>
</member>
<member name="M:Electron.WebContents.incrementCapturerCount(Microsoft.FSharp.Core.FSharpOption{Electron.Size},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
   Increase the capturer count by one. The page is considered visible when its
   browser window is hidden and the capturer count is non-zero. If you would like the
   page to stay hidden, you should ensure that `stayHidden` is set to true.

   This also affects the Page Visibility API.
 </summary>
 <param name="size">The perferred size for the capturer.</param>
 <param name="stayHidden">Keep the page hidden instead of visible.</param>
</member>
<member name="M:Electron.WebContents.goToOffset(System.Int32)">
<summary>
 Navigates to the specified offset from the &quot;current entry&quot;.
</summary>
</member>
<member name="M:Electron.WebContents.goToIndex(System.Int32)">
<summary>
 Navigates browser to the specified absolute web page index.
</summary>
</member>
<member name="M:Electron.WebContents.goForward">
<summary>
 Makes the browser go forward a web page.
</summary>
</member>
<member name="M:Electron.WebContents.goBack">
<summary>
 Makes the browser go back a web page.
</summary>
</member>
<member name="P:Electron.WebContents.zoomLevel">
<summary>
 Determines the zoom level for this web contents.

 The original size is 0 and each increment above or below represents zooming 20%
 larger or smaller to default limits of 300% and 50% of original size, respectively.
 The formula for this is `scale := 1.2 ^ level`.
</summary>
</member>
<member name="P:Electron.WebContents.zoomFactor">
<summary>
 Determines the zoom factor for this web contents.

 The zoom factor is the zoom percent divided by 100, so 300% = 3.0.
</summary>
</member>
<member name="P:Electron.WebContents.userAgent">
<summary>
 Determines the user agent for this web page.
</summary>
</member>
<member name="P:Electron.WebContents.session">
<summary>
 A Session used by this webContents.
</summary>
</member>
<member name="P:Electron.WebContents.id">
<summary>
 The unique ID of this WebContents. Each ID is unique among all WebContents instances
 of the entire Electron application.
</summary>
</member>
<member name="P:Electron.WebContents.hostWebContents">
<summary>
 A WebContents instance that might own this WebContents.
</summary>
</member>
<member name="P:Electron.WebContents.frameRate">
<summary>
 Sets the frame rate of the web contents to the specified number. Only values between
 1 and 60 are accepted.
</summary>
</member>
<member name="P:Electron.WebContents.devToolsWebContents">
<summary>
 A WebContents of DevTools for this WebContents.

 Note: Users should never store this object because it may become null when
 the DevTools has been closed.
</summary>
</member>
<member name="P:Electron.WebContents.debugger">
<summary>
 A Debugger instance for this webContents.
</summary>
</member>
<member name="P:Electron.WebContents.audioMuted">
<summary>
 Determines whether this page is muted.
</summary>
</member>
<member name="M:Electron.WebContents.getZoomLevel">
<summary>
 Returns the current zoom level.
</summary>
</member>
<member name="M:Electron.WebContents.getZoomFactor">
<summary>
 Returns the current zoom factor.
</summary>
</member>
<member name="M:Electron.WebContents.getWebRTCIPHandlingPolicy">
<summary>
 Returns the WebRTC IP Handling Policy.
</summary>
</member>
<member name="M:Electron.WebContents.getUserAgent">
<summary>
 Returns the user agent for this web page.
</summary>
</member>
<member name="M:Electron.WebContents.getURL">
<summary>
 Returns the URL of the current web page.
</summary>
</member>
<member name="M:Electron.WebContents.getType">
<summary>
 The type of the webContent
</summary>
</member>
<member name="M:Electron.WebContents.getTitle">
<summary>
 Returns the title of the current web page.
</summary>
</member>
<member name="M:Electron.WebContents.getProcessId">
<summary>
 Returns the Chromium internal pid of the associated renderer. Can be
 compared to the frameProcessId passed by frame specific navigation events
 (e.g. did-frame-navigate)
</summary>
</member>
<member name="M:Electron.WebContents.getPrinters">
<summary>
 Get the system printer list.
</summary>
</member>
<member name="M:Electron.WebContents.getOSProcessId">
<summary>
 Returns the operating system pid of the associated renderer process.
</summary>
</member>
<member name="M:Electron.WebContents.getFrameRate">
<summary>
 If offscreen rendering is enabled returns the current frame rate.
</summary>
</member>
<member name="M:Electron.WebContents.getAllSharedWorkers">
<summary>
 Returns information about all Shared Workers.
</summary>
</member>
<member name="M:Electron.WebContents.focus">
<summary>
 Focuses the web page.
</summary>
</member>
<member name="M:Electron.WebContents.findInPage(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.FindInPageOptions})">
<summary>
 Starts a request to find all matches for the text in the web page. The
 result of the request can be obtained by subscribing to `found-in-page`
 event. Returns the request id used for the request.
</summary>
</member>
<member name="M:Electron.WebContents.executeJavaScriptInIsolatedWorld(System.Int32,Electron.WebSource[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
   Works like executeJavaScript but evaluates scripts in an isolated context.

   The returned promise resolves with the result of the executed code or is rejected
   if the result of the code is a rejected promise.
 </summary>
 <param name="worldId">
   The ID of the world to run the javascript in, 0 is the default world,
   999 is the world used by Electrons contextIsolation feature. Chrome
   extensions reserve the range of IDs in `[1 << 20, 1 << 29)`. You can
   provide any integer here.
 </param>
 <param name="scripts"></param>
 <param name="userGesture">Default is false</param>
</member>
<member name="M:Electron.WebContents.executeJavaScript(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Evaluates `code` in page.

 The returned promise resolves with the result of the executed code or is
 rejected if the result of the code is a rejected promise.

 In the browser window some HTML APIs like `requestFullScreen` can only be
 invoked by a gesture from the user. Setting `userGesture` to `true` will
 remove this limitation.

 Code execution will be suspended until web page stop loading.
</summary>
</member>
<member name="M:Electron.WebContents.endFrameSubscription">
<summary>
 End subscribing for frame presentation events.
</summary>
</member>
<member name="M:Electron.WebContents.enableDeviceEmulation(Electron.DeviceEmulationParameters)">
<summary>
 Enable device emulation with the given parameters.
</summary>
</member>
<member name="M:Electron.WebContents.downloadURL(System.String)">
<summary>
 Initiates a download of the resource at url without navigating. The
 will-download event of `session` will be triggered.
</summary>
</member>
<member name="M:Electron.WebContents.disableDeviceEmulation">
<summary>
 Disable device emulation enabled by webContents.enableDeviceEmulation.
</summary>
</member>
<member name="M:Electron.WebContents.delete">
<summary>
 Executes the editing command delete in web page.
</summary>
</member>
<member name="M:Electron.WebContents.decrementCapturerCount(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
   Decrease the capturer count by one. The page will be set to hidden or occluded
   state when its browser window is hidden or occluded and the capturer count reaches
   zero. If you want to decrease the hidden capturer count instead you should set
   `stayHidden` to true.
 </summary>
 <param name="stayHidden">Keep the page hidden instead of visible.</param>
</member>
<member name="M:Electron.WebContents.cut">
<summary>
 Executes the editing command cut in web page.
</summary>
</member>
<member name="M:Electron.WebContents.copyImageAt(System.Int32,System.Int32)">
<summary>
 Copy the image at the given position to the clipboard.
</summary>
</member>
<member name="M:Electron.WebContents.copy">
<summary>
 Executes the editing command copy in web page.
</summary>
</member>
<member name="M:Electron.WebContents.closeDevTools">
<summary>
 Closes the devtools.
</summary>
</member>
<member name="M:Electron.WebContents.clearHistory">
<summary>
 Clears the navigation history.
</summary>
</member>
<member name="M:Electron.WebContents.capturePage(Microsoft.FSharp.Core.FSharpOption{Electron.Rectangle})">
<summary>
 Captures a snapshot of the page within rect. Omitting rect will capture
 the whole visible page.
</summary>
</member>
<member name="M:Electron.WebContents.canGoToOffset(System.Int32)">
<summary>
 Indicates whether the web page can go to `offset`.
</summary>
</member>
<member name="M:Electron.WebContents.canGoForward">
<summary>
 Indicates hether the browser can go forward to next web page.
</summary>
</member>
<member name="M:Electron.WebContents.canGoBack">
<summary>
 Indicates whether the browser can go back to previous web page.
</summary>
</member>
<member name="M:Electron.WebContents.beginFrameSubscription(System.Boolean,Microsoft.FSharp.Core.FSharpFunc{Electron.NativeImage,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 Begin subscribing for presentation events and captured frames, the
 callback will be called with callback(image, dirtyRect) when there is a
 presentation event.

 The `image` is an instance of NativeImage that stores the captured frame.

 The `dirtyRect` describes which part of the page was repainted. If
 onlyDirty is set to true, image will only contain the repainted area.
</summary>
</member>
<member name="M:Electron.WebContents.beginFrameSubscription(Microsoft.FSharp.Core.FSharpFunc{Electron.NativeImage,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 Begin subscribing for presentation events and captured frames, the
 callback will be called with callback(image, dirtyRect) when there is a
 presentation event.

 The `image` is an instance of NativeImage that stores the captured frame.

 The `dirtyRect` describes which part of the page was repainted.
</summary>
</member>
<member name="M:Electron.WebContents.addWorkSpace(System.String)">
<summary>
 Adds the specified path to DevTools workspace. Must be used after DevTools
 creation.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerZoomChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ZoomChangedDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onZoomChanged.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerWillRedirect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onWillRedirect.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerWillPreventUnload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillPreventUnload.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerWillNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerUpdateTargetUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onUpdateTargetUrl.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnresponsive.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onSelectClientCertificate.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerSelectBluetoothDevice(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BluetoothDevice[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onSelectBluetoothDevice.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerResponsive(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponsive.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteRequire.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetGlobal.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRemoteGetCurrentWindow.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRemoteGetCurrentWebContents.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetBuiltin.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerPreloadError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPreloadError.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerPluginCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPluginCrashed.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerPaint(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.NativeImage,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPaint.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerPageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPageTitleUpdated.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerPageFaviconUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPageFaviconUpdated.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerNewWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.NewWindowEvent,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.WindowDisposition,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindowOptions,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{Electron.Referrer,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onNewWindow.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerMediaStartedPlaying(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMediaStartedPlaying.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerMediaPaused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMediaPaused.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerIpcMessageSync(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onIpcMessageSync.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerIpcMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onIpcMessage.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerFoundInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.FoundInPageResult,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onFoundInPage.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDomReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDomReady.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidStopLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidStopLoading.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidStartNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onDidStartNavigation.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidStartLoading(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidStartLoading.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidRedirectNavigation(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onDidRedirectNavigation.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidNavigateInPage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onDidNavigateInPage.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onDidNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidFrameNavigate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFrameNavigate.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidFrameFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onDidFrameFinishLoad.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidFinishLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDidFinishLoad.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidFailProvisionalLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFailProvisionalLoad.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidFailLoad(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}}}}})">
<summary>
 See onDidFailLoad.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDidChangeThemeColor(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDidChangeThemeColor.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDevtoolsReloadPage(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsReloadPage.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDevtoolsOpened(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsOpened.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDevtoolsFocused(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsFocused.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDevtoolsClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDevtoolsClosed.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDestroyed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDestroyed.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDesktopCapturerGetSources.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerCursorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.CursorType,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Electron.Size},Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onCursorChanged.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onCrashed.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerContextMenu(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ContextMenuParams,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onContextMenu.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onConsoleMessage.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onCertificateError.
</summary>
</member>
<member name="M:Electron.WebContents.addListenerBeforeInputEvent(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BeforeInputEventData,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBeforeInputEvent.
</summary>
</member>
<member name="M:Electron.WebContents.addLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.WebContents.addEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterHtmlFullScreen.
</summary>
</member>
<member name="P:Electron.SharedWorkerInfo.url">
<summary>
 The url of the shared worker.
</summary>
</member>
<member name="P:Electron.SharedWorkerInfo.id">
<summary>
 The unique id of the shared worker.
</summary>
</member>
<member name="P:Electron.InsertCssOptions.cssOrigin(Electron.CssOriginString)">
<summary>
 Specifying `CssOriginString.User` enables you to prevent websites from
 overriding the CSS you insert. Default is `CssOriginString.Author`.
</summary>
</member>
<member name="P:Electron.InsertCssOptions.cssOrigin">
<summary>
 Specifying `CssOriginString.User` enables you to prevent websites from
 overriding the CSS you insert. Default is `CssOriginString.Author`.
</summary>
</member>
<member name="P:Electron.SendKeyboardEvent.keyCode(System.String)">
<summary>
 The character that will be sent as the keyboard event. Must be a valid
 accelerator key. (You can use `!!Helpers.Key.A` etc. if you want.)
</summary>
</member>
<member name="P:Electron.SendKeyboardEvent.keyCode">
<summary>
 The character that will be sent as the keyboard event. Must be a valid
 accelerator key. (You can use `!!Helpers.Key.A` etc. if you want.)
</summary>
</member>
<member name="P:Electron.SendInputEvent.type(Electron.InputEventType)">
<summary>
 The type of the event.
</summary>
</member>
<member name="P:Electron.SendInputEvent.modifiers(Electron.InputEventModifier[])">
<summary>
 An array of modifiers of the event.
</summary>
</member>
<member name="P:Electron.SendInputEvent.type">
<summary>
 The type of the event.
</summary>
</member>
<member name="P:Electron.SendInputEvent.modifiers">
<summary>
 An array of modifiers of the event.
</summary>
</member>
<member name="T:Electron.StopFindInPageAction.ActivateSelection">
<summary>
 Focus and click the selection node.
</summary>
</member>
<member name="T:Electron.StopFindInPageAction.KeepSelection">
<summary>
 Translate the selection into a normal selection.
</summary>
</member>
<member name="T:Electron.StopFindInPageAction.ClearSelection">
<summary>
 Clear the selection.
</summary>
</member>
<member name="T:Electron.WebRtcIpHandlingPolicy.DisableNonProxiedUdp">
<summary>
 Does not expose public or local IPs. When this policy is used, WebRTC
 should only use TCP to contact peers or servers unless the proxy server
 supports UDP.
</summary>
</member>
<member name="T:Electron.WebRtcIpHandlingPolicy.DefaultPublicAndPrivateInterfaces">
<summary>
 Exposes user&apos;s public and local IPs. When this policy is used, WebRTC
 should only use the default route used by http. This also exposes the
 associated default private address. Default route is the route chosen by
 the OS on a multi-homed endpoint.
</summary>
</member>
<member name="T:Electron.WebRtcIpHandlingPolicy.DefaultPublicInterfaceOnly">
<summary>
 Exposes user&apos;s public IP, but does not expose user&apos;s local IP. When this
 policy is used, WebRTC should only use the default route used by http.
 This doesn&apos;t expose any local addresses.
</summary>
</member>
<member name="T:Electron.WebRtcIpHandlingPolicy.Default">
<summary>
 Exposes user&apos;s public and local IPs. This is the default behavior. When
 this policy is used, WebRTC has the right to enumerate all interfaces and
 bind them to discover public interfaces.
</summary>
</member>
<member name="T:Electron.WebContentSaveType.Mhtml">
<summary>
 Save complete-html page as MHTML.
</summary>
</member>
<member name="T:Electron.WebContentSaveType.HtmlComplete">
<summary>
 Save complete-html page.
</summary>
</member>
<member name="T:Electron.WebContentSaveType.HtmlOnly">
<summary>
 Save only the HTML of the page.
</summary>
</member>
<member name="P:Electron.UploadRawData.type(System.String)">
<summary>
 rawData.
</summary>
</member>
<member name="P:Electron.UploadRawData.bytes(Node.Buffer.Buffer)">
<summary>
 Data to be uploaded.
</summary>
</member>
<member name="P:Electron.UploadRawData.type">
<summary>
 rawData.
</summary>
</member>
<member name="P:Electron.UploadRawData.bytes">
<summary>
 Data to be uploaded.
</summary>
</member>
<member name="P:Electron.UploadFile.type(System.String)">
<summary>
 file.
</summary>
</member>
<member name="P:Electron.UploadFile.offset(System.Int32)">
<summary>
 Defaults to 0.
</summary>
</member>
<member name="P:Electron.UploadFile.modificationTime(System.Double)">
<summary>
 Last Modification time in number of seconds since the UNIX epoch.
</summary>
</member>
<member name="P:Electron.UploadFile.length(System.Int32)">
<summary>
 Number of bytes to read from offset. Defaults to 0.
</summary>
</member>
<member name="P:Electron.UploadFile.filePath(System.String)">
<summary>
 Path of file to be uploaded.
</summary>
</member>
<member name="P:Electron.UploadFile.type">
<summary>
 file.
</summary>
</member>
<member name="P:Electron.UploadFile.offset">
<summary>
 Defaults to 0.
</summary>
</member>
<member name="P:Electron.UploadFile.modificationTime">
<summary>
 Last Modification time in number of seconds since the UNIX epoch.
</summary>
</member>
<member name="P:Electron.UploadFile.length">
<summary>
 Number of bytes to read from offset. Defaults to 0.
</summary>
</member>
<member name="P:Electron.UploadFile.filePath">
<summary>
 Path of file to be uploaded.
</summary>
</member>
<member name="P:Electron.UploadData.file(System.String)">
<summary>
 Path of file being uploaded.
</summary>
</member>
<member name="P:Electron.UploadData.bytes(Node.Buffer.Buffer)">
<summary>
 Content being sent.
</summary>
</member>
<member name="P:Electron.UploadData.blobUUID(System.String)">
<summary>
 UUID of blob data. Use session.getBlobData method to retrieve the data.
</summary>
</member>
<member name="P:Electron.UploadData.file">
<summary>
 Path of file being uploaded.
</summary>
</member>
<member name="P:Electron.UploadData.bytes">
<summary>
 Content being sent.
</summary>
</member>
<member name="P:Electron.UploadData.blobUUID">
<summary>
 UUID of blob data. Use session.getBlobData method to retrieve the data.
</summary>
</member>
<member name="P:Electron.UploadBlob.type(System.String)">
<summary>
 blob.
</summary>
</member>
<member name="P:Electron.UploadBlob.blobUUID(System.String)">
<summary>
 UUID of blob data to upload.
</summary>
</member>
<member name="P:Electron.UploadBlob.type">
<summary>
 blob.
</summary>
</member>
<member name="P:Electron.UploadBlob.blobUUID">
<summary>
 UUID of blob data to upload.
</summary>
</member>
<member name="M:Electron.TrayStatic.Create(System.String,Microsoft.FSharp.Core.FSharpOption{System.Guid})">
<summary>
 Creates a new tray icon associated with the image.

 Specifying `guid` assigns a GUID to the tray icon. If the executable is signed and
 the signature contains an organization in the subject line then the GUID is
 permanently associated with that signature. OS level settings like the position of
 the tray icon in the system tray will persist even if the path to the executable
 changes. If the executable is not code-signed then the GUID is permanently
 associated with the path to the executable. Changing the path to the executable will
 break the creation of the tray icon and a new GUID must be used. However, it is
 highly recommended to use the GUID parameter only in conjunction with code-signed
 executable. If an App defines multiple tray icons then each icon must use a separate
 GUID.
</summary>
</member>
<member name="M:Electron.TrayStatic.Create(Electron.NativeImage,Microsoft.FSharp.Core.FSharpOption{System.Guid})">
<summary>
 Creates a new tray icon associated with the image.

 Specifying `guid` assigns a GUID to the tray icon. If the executable is signed and
 the signature contains an organization in the subject line then the GUID is
 permanently associated with that signature. OS level settings like the position of
 the tray icon in the system tray will persist even if the path to the executable
 changes. If the executable is not code-signed then the GUID is permanently
 associated with the path to the executable. Changing the path to the executable will
 break the creation of the tray icon and a new GUID must be used. However, it is
 highly recommended to use the GUID parameter only in conjunction with code-signed
 executable. If an App defines multiple tray icons then each icon must use a separate
 GUID.
</summary>
</member>
<member name="M:Electron.Tray.setToolTip(System.String)">
<summary>
 Sets the hover text for this tray icon.
</summary>
</member>
<member name="M:Electron.Tray.setTitle(System.String)">
<summary>
 [macOS] Sets the title displayed next to the tray icon in the status bar
 (Support ANSI colors).
</summary>
</member>
<member name="M:Electron.Tray.setPressedImage(System.String)">
<summary>
 [macOS] Sets the image associated with this tray icon when pressed on
 macOS.
</summary>
</member>
<member name="M:Electron.Tray.setPressedImage(Electron.NativeImage)">
<summary>
 [macOS] Sets the image associated with this tray icon when pressed on
 macOS.
</summary>
</member>
<member name="M:Electron.Tray.setImage(System.String)">
<summary>
 Sets the image associated with this tray icon.
</summary>
</member>
<member name="M:Electron.Tray.setImage(Electron.NativeImage)">
<summary>
 Sets the image associated with this tray icon.
</summary>
</member>
<member name="M:Electron.Tray.setIgnoreDoubleClickEvents(System.Boolean)">
<summary>
 [macOS] Sets the option to ignore double click events. Ignoring these
 events allows you to detect every individual click of the tray icon. This
 value is set to false by default.
</summary>
</member>
<member name="M:Electron.Tray.setContextMenu(Microsoft.FSharp.Core.FSharpOption{Electron.Menu})">
<summary>
 Sets the context menu for this icon.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerRightClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRightClick.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerMouseUp(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseUp.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerMouseMove(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseMove.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerMouseLeave(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseLeave.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerMouseEnter(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseEnter.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerMouseDown(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseDown.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDropText(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDropText.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDropFiles(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDropFiles.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDrop(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDrop.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDragLeave(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragLeave.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDragEnter(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragEnter.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDragEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragEnd.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerDoubleClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDoubleClick.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onClick.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerBalloonShow(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonShow.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerBalloonClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonClosed.
</summary>
</member>
<member name="M:Electron.Tray.removeListenerBalloonClick(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonClick.
</summary>
</member>
<member name="M:Electron.Tray.removeBalloon">
<summary>
 Removes a tray balloon.
</summary>
</member>
<member name="M:Electron.Tray.popUpContextMenu(Microsoft.FSharp.Core.FSharpOption{Electron.Menu},Microsoft.FSharp.Core.FSharpOption{Electron.Point})">
<summary>
 [macOS, Windows] Pops up the context menu of the tray icon. When `menu` is
 passed, the menu will be shown instead of the tray icon&apos;s context menu.

 The `position` is only available on Windows, and it is (0, 0) by default.
</summary>
</member>
<member name="M:Electron.Tray.onceRightClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRightClick.
</summary>
</member>
<member name="M:Electron.Tray.onceMouseUp(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseUp.
</summary>
</member>
<member name="M:Electron.Tray.onceMouseMove(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseMove.
</summary>
</member>
<member name="M:Electron.Tray.onceMouseLeave(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseLeave.
</summary>
</member>
<member name="M:Electron.Tray.onceMouseEnter(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseEnter.
</summary>
</member>
<member name="M:Electron.Tray.onceMouseDown(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseDown.
</summary>
</member>
<member name="M:Electron.Tray.onceDropText(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDropText.
</summary>
</member>
<member name="M:Electron.Tray.onceDropFiles(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDropFiles.
</summary>
</member>
<member name="M:Electron.Tray.onceDrop(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDrop.
</summary>
</member>
<member name="M:Electron.Tray.onceDragLeave(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragLeave.
</summary>
</member>
<member name="M:Electron.Tray.onceDragEnter(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragEnter.
</summary>
</member>
<member name="M:Electron.Tray.onceDragEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragEnd.
</summary>
</member>
<member name="M:Electron.Tray.onceDoubleClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDoubleClick.
</summary>
</member>
<member name="M:Electron.Tray.onceClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onClick.
</summary>
</member>
<member name="M:Electron.Tray.onceBalloonShow(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonShow.
</summary>
</member>
<member name="M:Electron.Tray.onceBalloonClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonClosed.
</summary>
</member>
<member name="M:Electron.Tray.onceBalloonClick(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonClick.
</summary>
</member>
<member name="M:Electron.Tray.onRightClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS, Windows] Emitted when the tray icon is right clicked. The listener
 gets the bounds of the tray icon.
</summary>
</member>
<member name="M:Electron.Tray.onMouseUp(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the mouse is released from clicking the tray icon.

 *Note:* This will not be emitted if you have set a context menu for your Tray using
 `tray.setContextMenu`, as a result of macOS-level constraints.
</summary>
</member>
<member name="M:Electron.Tray.onMouseMove(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the mouse moves in the tray icon. The listener
 receives the position of the event.
</summary>
</member>
<member name="M:Electron.Tray.onMouseLeave(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the mouse exits the tray icon. The listener receives
 the position of the event.
</summary>
</member>
<member name="M:Electron.Tray.onMouseEnter(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the mouse enters the tray icon. The listener receives
 the position of the event.
</summary>
</member>
<member name="M:Electron.Tray.onMouseDown(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the mouse clicks the tray icon.
</summary>
</member>
<member name="M:Electron.Tray.onDropText(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when dragged text is dropped in the tray icon. The
 listener receives the dropped text string.
</summary>
</member>
<member name="M:Electron.Tray.onDropFiles(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when dragged files are dropped in the tray icon. The
 listener receives the paths of the dropped files.
</summary>
</member>
<member name="M:Electron.Tray.onDrop(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when any dragged items are dropped on the tray icon.
</summary>
</member>
<member name="M:Electron.Tray.onDragLeave(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when a drag operation exits the tray icon.
</summary>
</member>
<member name="M:Electron.Tray.onDragEnter(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when a drag operation enters the tray icon.
</summary>
</member>
<member name="M:Electron.Tray.onDragEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when a drag operation ends on the tray or ends at another
 location.
</summary>
</member>
<member name="M:Electron.Tray.onDoubleClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS, Windows] Emitted when the tray icon is double clicked. The
 listener gets the bounds of the tray icon.
</summary>
</member>
<member name="M:Electron.Tray.onClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when the tray icon is clicked. The listener gets the bounds of the
 tray icon and the position of the event.
</summary>
</member>
<member name="M:Electron.Tray.onBalloonShow(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Emitted when the tray balloon shows.
</summary>
</member>
<member name="M:Electron.Tray.onBalloonClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Emitted when the tray balloon is closed because of timeout or
 user manually closes it.
</summary>
</member>
<member name="M:Electron.Tray.onBalloonClick(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Emitted when the tray balloon is clicked.
</summary>
</member>
<member name="M:Electron.Tray.isDestroyed">
<summary>
 Returns a value indicating whether the tray icon is destroyed.
</summary>
</member>
<member name="M:Electron.Tray.getTitle">
<summary>
 [macOS] Returns the title displayed next to the tray icon in the status
 bar.
</summary>
</member>
<member name="M:Electron.Tray.getIgnoreDoubleClickEvents">
<summary>
 [macOS] Returns a value indicating whether double click events will be
 ignored.
</summary>
</member>
<member name="M:Electron.Tray.getBounds">
<summary>
 [macOS, Windows] Returns the bounds of this tray icon.
</summary>
</member>
<member name="M:Electron.Tray.focus">
<summary>
 Returns focus to the taskbar notification area. Notification area icons should use
 this message when they have completed their UI operation. For example, if the icon
 displays a shortcut menu, but the user presses ESC to cancel it, use `tray.focus()`
 to return focus to the notification area.
</summary>
</member>
<member name="M:Electron.Tray.displayBalloon(Electron.DisplayBalloonOptions)">
<summary>
 [Windows] Displays a tray balloon.
</summary>
</member>
<member name="M:Electron.Tray.destroy">
<summary>
 Destroys the tray icon immediately.
</summary>
</member>
<member name="M:Electron.Tray.closeContextMenu">
<summary>
 [macOS, Windows] Closes an open context menu, as set by `tray.setContextMenu()`.
</summary>
</member>
<member name="M:Electron.Tray.addListenerRightClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRightClick.
</summary>
</member>
<member name="M:Electron.Tray.addListenerMouseUp(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseUp.
</summary>
</member>
<member name="M:Electron.Tray.addListenerMouseMove(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseMove.
</summary>
</member>
<member name="M:Electron.Tray.addListenerMouseLeave(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseLeave.
</summary>
</member>
<member name="M:Electron.Tray.addListenerMouseEnter(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseEnter.
</summary>
</member>
<member name="M:Electron.Tray.addListenerMouseDown(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onMouseDown.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDropText(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDropText.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDropFiles(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDropFiles.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDrop(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDrop.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDragLeave(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragLeave.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDragEnter(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragEnter.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDragEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onDragEnd.
</summary>
</member>
<member name="M:Electron.Tray.addListenerDoubleClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDoubleClick.
</summary>
</member>
<member name="M:Electron.Tray.addListenerClick(Microsoft.FSharp.Core.FSharpFunc{Electron.KeyboardEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.FSharpFunc{Electron.Point,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onClick.
</summary>
</member>
<member name="M:Electron.Tray.addListenerBalloonShow(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonShow.
</summary>
</member>
<member name="M:Electron.Tray.addListenerBalloonClosed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonClosed.
</summary>
</member>
<member name="M:Electron.Tray.addListenerBalloonClick(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBalloonClick.
</summary>
</member>
<member name="P:Electron.Transaction.transactionState">
<summary>
 The transaction state.
</summary>
</member>
<member name="P:Electron.Transaction.transactionIdentifier">
<summary>
 A string that uniquely identifies a successful payment transaction.
</summary>
</member>
<member name="P:Electron.Transaction.transactionDate">
<summary>
 The date the transaction was added to the App Store’s payment queue.
</summary>
</member>
<member name="P:Electron.Transaction.originalTransactionIdentifier">
<summary>
 The identifier of the restored transaction by the App Store.
</summary>
</member>
<member name="P:Electron.Transaction.errorMessage">
<summary>
 The error message if an error occurred while processing the transaction.
</summary>
</member>
<member name="P:Electron.Transaction.errorCode">
<summary>
 The error code if an error occurred while processing the transaction.
</summary>
</member>
<member name="P:Electron.TraceConfig.trace_buffer_size_in_kb">
<summary>
 Maximum size of the trace recording buffer in kilobytes. Defaults to
 100MB.
</summary>
</member>
<member name="P:Electron.TraceConfig.trace_buffer_size_in_events">
<summary>
 Maximum size of the trace recording buffer in events.
</summary>
</member>
<member name="P:Electron.TraceConfig.recording_mode">
<summary>
 Defaults to record-until-full.
</summary>
</member>
<member name="P:Electron.TraceConfig.memory_dump_config">
<summary>
 If the `disabled-by-default-memory-infra` category is enabled, this
 contains optional additional configuration for data collection. See the
 [Chromium memory-infra
 docs](https://chromium.googlesource.com/chromium/src/+/master/docs/memory-infra/memory_infra_startup_tracing.md#the-advanced-way)
 for more information.
</summary>
</member>
<member name="P:Electron.TraceConfig.included_process_ids">
<summary>
 A list of process IDs to include in the trace. If not specified, trace all
 processes.
</summary>
</member>
<member name="P:Electron.TraceConfig.included_categories">
<summary>
 A list of tracing categories to include. Can include glob-like patterns
 using * at the end of the category name. See [tracing
 categories](https://chromium.googlesource.com/chromium/src/+/master/base/trace_event/builtin_categories.h)
 for the list of categories.
</summary>
</member>
<member name="P:Electron.TraceConfig.histogram_names">
<summary>
 A list of
 [histogram](https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md)
 names to report with the trace.
</summary>
</member>
<member name="P:Electron.TraceConfig.excluded_categories">
<summary>
 A list of tracing categories to exclude. Can include glob-like patterns
 using * at the end of the category name. See [tracing
 categories](https://chromium.googlesource.com/chromium/src/+/master/base/trace_event/builtin_categories.h)
 for the list of categories.
</summary>
</member>
<member name="P:Electron.TraceConfig.enable_argument_filter">
<summary>
 If `true`, filter event data according to a whitelist of events that have
 been manually vetted to not include any PII. See the [implementation in
 Chromium](https://chromium.googlesource.com/chromium/src/+/master/services/tracing/public/cpp/trace_event_args_whitelist.cc)
 for specifics.
</summary>
</member>
<member name="P:Electron.TraceCategoriesAndOptions.traceOptions(System.String)">
<summary>
 Controls what kind of tracing is enabled, it is a comma-delimited sequence
 of the following strings: `record-until-full`, `record-continuously`,
 `trace-to-console`, `enable-sampling`, `enable-systrace`. Example:
 &quot;record-until-full,enable-sampling&quot;. The first 3 options are trace
 recording modes and hence mutually exclusive. If more than one trace
 recording modes appear in the traceOptions string, the last one takes
 precedence. If none of the trace recording modes are specified, recording
 mode is `record-until-full`. The trace option will first be reset to the
 default option (record_mode set to record-until-full, enable_sampling and
 enable_systrace set to false) before options parsed from traceOptions are
 applied on it.
</summary>
</member>
<member name="P:Electron.TraceCategoriesAndOptions.categoryFilter(System.String)">
<summary>
 A filter to control what category groups should be traced. A filter can
 have an optional `-` prefix to exclude category groups that contain a
 matching category. Having both included and excluded category patterns in
 the same list is not supported. Examples: `test_MyTest*`,
 `test_MyTest*,test_OtherStuff`, `-excluded_category1,-excluded_category2`.
</summary>
</member>
<member name="P:Electron.TraceCategoriesAndOptions.traceOptions">
<summary>
 Controls what kind of tracing is enabled, it is a comma-delimited sequence
 of the following strings: `record-until-full`, `record-continuously`,
 `trace-to-console`, `enable-sampling`, `enable-systrace`. Example:
 &quot;record-until-full,enable-sampling&quot;. The first 3 options are trace
 recording modes and hence mutually exclusive. If more than one trace
 recording modes appear in the traceOptions string, the last one takes
 precedence. If none of the trace recording modes are specified, recording
 mode is `record-until-full`. The trace option will first be reset to the
 default option (record_mode set to record-until-full, enable_sampling and
 enable_systrace set to false) before options parsed from traceOptions are
 applied on it.
</summary>
</member>
<member name="P:Electron.TraceCategoriesAndOptions.categoryFilter">
<summary>
 A filter to control what category groups should be traced. A filter can
 have an optional `-` prefix to exclude category groups that contain a
 matching category. Having both included and excluded category patterns in
 the same list is not supported. Examples: `test_MyTest*`,
 `test_MyTest*,test_OtherStuff`, `-excluded_category1,-excluded_category2`.
</summary>
</member>
<member name="M:Electron.TouchBarStatic.Create(Electron.TouchBarOptions)">
<summary>
 Creates a new touch bar with the specified items. Use
 BrowserWindow.setTouchBar to add the TouchBar to a window.

 Note: The TouchBar API is currently experimental and may change or be
 removed in future Electron releases.

 Tip: If you don&apos;t have a MacBook with Touch Bar, you can use Touch Bar
 Simulator to test Touch Bar usage in your app.
</summary>
</member>
<member name="P:Electron.TouchBar.escapeItem(Microsoft.FSharp.Core.FSharpOption{Electron.ITouchBarItem})">
<summary>
 A TouchBarItem that will replace the &quot;esc&quot; button on the touch bar when
 set. Setting to None restores the default &quot;esc&quot; button. Changing this
 value immediately updates the escape item in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBar.escapeItem">
<summary>
 A TouchBarItem that will replace the &quot;esc&quot; button on the touch bar when
 set. Setting to None restores the default &quot;esc&quot; button. Changing this
 value immediately updates the escape item in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.value(System.Int32)">
<summary>
 The slider&apos;s current value. Changing this value immediately updates the
 slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.minValue(System.Int32)">
<summary>
 The slider&apos;s current minimum value. Changing this value immediately
 updates the slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.maxValue(System.Int32)">
<summary>
 The slider&apos;s current maximum value. Changing this value immediately
 updates the slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.label(System.String)">
<summary>
 The slider&apos;s current text. Changing this value immediately updates the
 slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.value">
<summary>
 The slider&apos;s current value. Changing this value immediately updates the
 slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.minValue">
<summary>
 The slider&apos;s current minimum value. Changing this value immediately
 updates the slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.maxValue">
<summary>
 The slider&apos;s current maximum value. Changing this value immediately
 updates the slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSlider.label">
<summary>
 The slider&apos;s current text. Changing this value immediately updates the
 slider in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControl.selectedIndex(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 The currently selected segment. Changing this value immediately updates
 the control in the touch bar. User interaction with the touch bar will
 update this value automatically.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControl.segments(Electron.SegmentedControlSegment[])">
<summary>
 The segments in this control. Updating this value immediately updates the
 control in the touch bar. Updating deep properties inside this array does
 not update the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControl.segmentStyle(System.String)">
<summary>
 The controls current segment style. Updating this value immediately
 updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControl.selectedIndex">
<summary>
 The currently selected segment. Changing this value immediately updates
 the control in the touch bar. User interaction with the touch bar will
 update this value automatically.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControl.segments">
<summary>
 The segments in this control. Updating this value immediately updates the
 control in the touch bar. Updating deep properties inside this array does
 not update the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarSegmentedControl.segmentStyle">
<summary>
 The controls current segment style. Updating this value immediately
 updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.showArrowButtons(System.Boolean)">
<summary>
 Whether to show the left / right selection arrows in this scrubber.
 Updating this value immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.selectedStyle(Electron.TouchBarScrubberStyle)">
<summary>
 The style that selected items in the scrubber should have. Updating this
 value immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.overlayStyle(Electron.TouchBarScrubberStyle)">
<summary>
 The style that selected items in the scrubber should have. This style is
 overlayed on top of the scrubber item instead of being placed behind it.
 Updating this value immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.mode(Electron.TouchBarScrubberMode)">
<summary>
 The mode of this scrubber. Updating this value immediately updates the
 control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.items(Electron.ScrubberItem[])">
<summary>
 The items in this scrubber. Updating this value immediately updates the
 control in the touch bar. Updating deep properties inside this array does
 not update the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.continuous(System.Boolean)">
<summary>
 Whether this scrubber is continuous or not. Updating this value
 immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.showArrowButtons">
<summary>
 Whether to show the left / right selection arrows in this scrubber.
 Updating this value immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.selectedStyle">
<summary>
 The style that selected items in the scrubber should have. Updating this
 value immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.overlayStyle">
<summary>
 The style that selected items in the scrubber should have. This style is
 overlayed on top of the scrubber item instead of being placed behind it.
 Updating this value immediately updates the control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.mode">
<summary>
 The mode of this scrubber. Updating this value immediately updates the
 control in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.items">
<summary>
 The items in this scrubber. Updating this value immediately updates the
 control in the touch bar. Updating deep properties inside this array does
 not update the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarScrubber.continuous">
<summary>
 Whether this scrubber is continuous or not. Updating this value
 immediately updates the control in the touch bar.
</summary>
</member>
<member name="T:Electron.TouchBarScrubberMode.Free">
<summary>
 Maps to NSScrubberModeFree.
</summary>
</member>
<member name="T:Electron.TouchBarScrubberMode.Fixed">
<summary>
 Maps to NSScrubberModeFixed.
</summary>
</member>
<member name="T:Electron.TouchBarScrubberStyle.None">
<summary>
 Removes all styles.
</summary>
</member>
<member name="T:Electron.TouchBarScrubberStyle.Outline">
<summary>
 Maps to [NSScrubberSelectionStyle outlineOverlayStyle].
</summary>
</member>
<member name="T:Electron.TouchBarScrubberStyle.Background">
<summary>
 Maps to [NSScrubberSelectionStyle roundedBackgroundStyle].
</summary>
</member>
<member name="P:Electron.TouchBarPopover.label(System.String)">
<summary>
 The popover&apos;s current button text. Changing this value immediately updates
 the popover in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarPopover.icon(Electron.NativeImage)">
<summary>
 The popover&apos;s current button icon. Changing this value immediately updates
 the popover in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarPopover.label">
<summary>
 The popover&apos;s current button text. Changing this value immediately updates
 the popover in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarPopover.icon">
<summary>
 The popover&apos;s current button icon. Changing this value immediately updates
 the popover in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarLabel.textColor(System.String)">
<summary>
 A hex code representing the label&apos;s current text color. Changing this
 value immediately updates the label in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarLabel.label(System.String)">
<summary>
 The label&apos;s current text. Changing this value immediately updates the
 label in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarLabel.accessibilityLabel(System.String)">
<summary>
 The description of the label to be read by a screen reader.
</summary>
</member>
<member name="P:Electron.TouchBarLabel.textColor">
<summary>
 A hex code representing the label&apos;s current text color. Changing this
 value immediately updates the label in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarLabel.label">
<summary>
 The label&apos;s current text. Changing this value immediately updates the
 label in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarLabel.accessibilityLabel">
<summary>
 The description of the label to be read by a screen reader.
</summary>
</member>
<member name="P:Electron.TouchBarColorPicker.selectedColor(System.String)">
<summary>
 The color picker&apos;s currently selected color. Changing this value
 immediately updates the color picker in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarColorPicker.availableColors(System.String[])">
<summary>
 the color picker&apos;s available colors to select. Changing this value
 immediately updates the color picker in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarColorPicker.selectedColor">
<summary>
 The color picker&apos;s currently selected color. Changing this value
 immediately updates the color picker in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarColorPicker.availableColors">
<summary>
 the color picker&apos;s available colors to select. Changing this value
 immediately updates the color picker in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.label(System.String)">
<summary>
 The button&apos;s current text. Changing this value immediately updates the
 button in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.icon(Electron.NativeImage)">
<summary>
 The button&apos;s current icon. Changing this value immediately updates the
 button in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.enabled(System.Boolean)">
<summary>
 Whether the button is in an enabled state.
</summary>
</member>
<member name="P:Electron.TouchBarButton.backgroundColor(System.String)">
<summary>
 A hex code representing the button&apos;s current background color. Changing
 this value immediately updates the button in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.accessibilityLabel(System.String)">
<summary>
 The description of the button to be read by a screen reader. Will only be read by
 screen readers if no label is set.
</summary>
</member>
<member name="P:Electron.TouchBarButton.label">
<summary>
 The button&apos;s current text. Changing this value immediately updates the
 button in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.icon">
<summary>
 The button&apos;s current icon. Changing this value immediately updates the
 button in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.enabled">
<summary>
 Whether the button is in an enabled state.
</summary>
</member>
<member name="P:Electron.TouchBarButton.backgroundColor">
<summary>
 A hex code representing the button&apos;s current background color. Changing
 this value immediately updates the button in the touch bar.
</summary>
</member>
<member name="P:Electron.TouchBarButton.accessibilityLabel">
<summary>
 The description of the button to be read by a screen reader. Will only be read by
 screen readers if no label is set.
</summary>
</member>
<member name="P:Electron.ThumbarButton.tooltip(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The text of the button&apos;s tooltip.
</summary>
</member>
<member name="P:Electron.ThumbarButton.icon(Electron.NativeImage)">
<summary>
 The icon showing in thumbnail toolbar.
</summary>
</member>
<member name="P:Electron.ThumbarButton.flags(Electron.ThumbarButtonFlag[])">
<summary>
 Control specific states and behaviors of the button. By default, it is
 [ThumbarButtonFlag.Enabled].
</summary>
</member>
<member name="P:Electron.ThumbarButton.tooltip">
<summary>
 The text of the button&apos;s tooltip.
</summary>
</member>
<member name="P:Electron.ThumbarButton.icon">
<summary>
 The icon showing in thumbnail toolbar.
</summary>
</member>
<member name="P:Electron.ThumbarButton.flags">
<summary>
 Control specific states and behaviors of the button. By default, it is
 [ThumbarButtonFlag.Enabled].
</summary>
</member>
<member name="T:Electron.ThumbarButtonFlag.NonInteractive">
<summary>
 The button is enabled but not interactive; no pressed button state is
 drawn. This value is intended for instances where the button is used in a
 notification.
</summary>
</member>
<member name="T:Electron.ThumbarButtonFlag.Hidden">
<summary>
 The button is not shown to the user.
</summary>
</member>
<member name="T:Electron.ThumbarButtonFlag.NoBackground">
<summary>
 Do not draw a button border, use only the image.
</summary>
</member>
<member name="T:Electron.ThumbarButtonFlag.DismissOnClick">
<summary>
 When the button is clicked, the thumbnail window closes immediately.
</summary>
</member>
<member name="T:Electron.ThumbarButtonFlag.Disabled">
<summary>
 The button is disabled. It is present, but has a visual state indicating
 it will not respond to user action.
</summary>
</member>
<member name="T:Electron.ThumbarButtonFlag.Enabled">
<summary>
 The button is active and available to the user.
</summary>
</member>
<member name="P:Electron.Task.workingDirectory(System.String)">
<summary>
 The working directory. Default is empty.
</summary>
</member>
<member name="P:Electron.Task.title(System.String)">
<summary>
 The string to be displayed in a JumpList.
</summary>
</member>
<member name="P:Electron.Task.program(System.String)">
<summary>
 Path of the program to execute, usually you should specify
 process.execPath which opens the current program.
</summary>
</member>
<member name="P:Electron.Task.iconPath(System.String)">
<summary>
 The absolute path to an icon to be displayed in a JumpList, which can be
 an arbitrary resource file that contains an icon. You can usually specify
 process.execPath to show the icon of the program.
</summary>
</member>
<member name="P:Electron.Task.iconIndex(System.Int32)">
<summary>
 The icon index in the icon file. If an icon file consists of two or more
 icons, set this value to identify the icon. If an icon file consists of
 one icon, this value is 0.
</summary>
</member>
<member name="P:Electron.Task.description(System.String)">
<summary>
 Description of this task.
</summary>
</member>
<member name="P:Electron.Task.arguments(System.String)">
<summary>
 The command line arguments when program is executed.
</summary>
</member>
<member name="P:Electron.Task.workingDirectory">
<summary>
 The working directory. Default is empty.
</summary>
</member>
<member name="P:Electron.Task.title">
<summary>
 The string to be displayed in a JumpList.
</summary>
</member>
<member name="P:Electron.Task.program">
<summary>
 Path of the program to execute, usually you should specify
 process.execPath which opens the current program.
</summary>
</member>
<member name="P:Electron.Task.iconPath">
<summary>
 The absolute path to an icon to be displayed in a JumpList, which can be
 an arbitrary resource file that contains an icon. You can usually specify
 process.execPath to show the icon of the program.
</summary>
</member>
<member name="P:Electron.Task.iconIndex">
<summary>
 The icon index in the icon file. If an icon file consists of two or more
 icons, set this value to identify the icon. If an icon file consists of
 one icon, this value is 0.
</summary>
</member>
<member name="P:Electron.Task.description">
<summary>
 Description of this task.
</summary>
</member>
<member name="P:Electron.Task.arguments">
<summary>
 The command line arguments when program is executed.
</summary>
</member>
<member name="M:Electron.SystemPreferences.unsubscribeWorkspaceNotification(System.Int32)">
<summary>
 [macOS] Same as unsubscribeNotification, but removes the subscriber from
 NSWorkspace.sharedWorkspace.notificationCenter.
</summary>
</member>
<member name="M:Electron.SystemPreferences.unsubscribeNotification(System.Int32)">
<summary>
 [macOS] Removes the subscriber with `id`.
</summary>
</member>
<member name="M:Electron.SystemPreferences.unsubscribeLocalNotification(System.Int32)">
<summary>
 [macOS] Same as unsubscribeNotification, but removes the subscriber from
 NSNotificationCenter.
</summary>
</member>
<member name="M:Electron.SystemPreferences.subscribeWorkspaceNotification(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Same as subscribeNotification, but uses
 NSWorkspace.sharedWorkspace.notificationCenter. This is necessary for
 events such as NSWorkspaceDidActivateApplicationNotification.
</summary>
</member>
<member name="M:Electron.SystemPreferences.subscribeNotification(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Subscribes to native notifications of macOS, callback will be
 called with callback(event, userInfo) when the corresponding event
 happens. The `userInfo` is an object that contains the user information
 dictionary sent along with the notification. The `object` is the sender of
 the notification, and only supports `NSString` values for now.

 The id of the subscriber is returned, which can be used to unsubscribe the
 event. Under the hood this API subscribes to
 NSDistributedNotificationCenter.
</summary>
</member>
<member name="M:Electron.SystemPreferences.subscribeLocalNotification(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Same as subscribeNotification, but uses NSNotificationCenter for
 local defaults. This is necessary for events such as
 NSUserDefaultsDidChangeNotification.
</summary>
</member>
<member name="P:Electron.SystemPreferences.effectiveAppearance(Electron.Appearance)">
<summary>
 [macOS] Returns the macOS appearance setting that is currently applied to
 your application, maps to NSApplication.effectiveAppearance

 Please note that until Electron is built targeting the 10.14 SDK, your
 application&apos;s `effectiveAppearance` will default to `Appearance.Light` and
 won&apos;t inherit the OS preference. In the interim in order for your
 application to inherit the OS preference you must set the
 `NSRequiresAquaSystemAppearance` key in your apps `Info.plist` to `false`.
 If you are using `electron-packager` or `electron-forge` just set the
 `enableDarwinDarkMode` packager option to `true`. See the Electron
 Packager API for more details.
</summary>
</member>
<member name="P:Electron.SystemPreferences.appLevelAppearance(Electron.Appearance)">
<summary>
 [macOS] Determines the macOS appearance setting for your application. This
 maps to values in NSApplication.appearance. Setting this will override the
 system default as well as the value of `getEffectiveAppearance`.

 Possible values that can be set are Appearance.Dark and Appearance.Light,
 and possible return values are Appearance.Dark, AppLevelAppearance.Light,
 and Appearance.Unknown.

 This property is only available on macOS 10.14 Mojave or newer.
</summary>
</member>
<member name="M:Electron.SystemPreferences.setUserDefault(System.String,Electron.UserDefaultValueType,System.String)">
<summary>
 [macOS] Set the value of key in NSUserDefaults. Note that `type` should
 match actual type of value. An exception is thrown if they don&apos;t.
</summary>
</member>
<member name="M:Electron.SystemPreferences.setAppLevelAppearance(Microsoft.FSharp.Core.FSharpOption{Electron.SetAppearance})">
<summary>
 [macOS] Sets the appearance setting for your application, this should
 override the system default and override the value of
 getEffectiveAppearance.
</summary>
</member>
<member name="M:Electron.SystemPreferences.removeUserDefault(System.String)">
<summary>
 [macOS] Removes the key in NSUserDefaults. This can be used to restore the
 default or global value of a key previously set with setUserDefault.
</summary>
</member>
<member name="M:Electron.SystemPreferences.removeListenerInvertedColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onInvertedColorSchemeChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.removeListenerHighContrastColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onHighContrastColorSchemeChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.removeListenerColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onColorChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.removeListenerAccentColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAccentColorChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.registerDefaults(Microsoft.FSharp.Core.FSharpOption{System.Object})">
<summary>
 [macOS] Add the specified defaults to your application&apos;s NSUserDefaults.
 The object values must be string, bool, or number.
</summary>
</member>
<member name="M:Electron.SystemPreferences.promptTouchID(System.String)">
 <summary>
   Returns a promise that resolves if the user has successfully
   authenticated with Touch ID.

   This API itself will not protect your user data; rather, it is a
   mechanism to allow you to do so. Native apps will need to set Access
   Control Constants like `kSecAccessControlUserPresence` on the their
   keychain entry so that reading it would auto-prompt for Touch ID
   biometric consent. This could be done with
   [`node-keytar`](https://github.com/atom/node-keytar), such that one
   would store an encryption key with `node-keytar` and only fetch it if
   `promptTouchID()` resolves.

   Note: This API will return a rejected Promise on macOS systems older
   than Sierra 10.12.2.
 </summary>
 <param name="reason">
   The reason you are asking for Touch ID authentication
 </param>
</member>
<member name="M:Electron.SystemPreferences.postWorkspaceNotification(System.String,Microsoft.FSharp.Core.FSharpOption{System.Object})">
<summary>
 [macOS] Posts `event` as native notifications of macOS. The userInfo is an
 object that contains the user information dictionary sent along with the
 notification.
</summary>
</member>
<member name="M:Electron.SystemPreferences.postNotification(System.String,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 [macOS] Posts `event` as native notifications of macOS. The userInfo is an
 object that contains the user information dictionary sent along with the
 notification. Set deliverImmediately=true to post notifications
 immediately even when the subscribing app is inactive.
</summary>
</member>
<member name="M:Electron.SystemPreferences.postLocalNotification(System.String,Microsoft.FSharp.Core.FSharpOption{System.Object})">
<summary>
 [macOS] Posts `event` as native notifications of macOS. The userInfo is an
 object that contains the user information dictionary sent along with the
 notification.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onceInvertedColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onInvertedColorSchemeChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onceHighContrastColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onHighContrastColorSchemeChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onceColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onColorChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onceAccentColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAccentColorChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onInvertedColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 [Windows] Called with true if an inverted color scheme (a high contrast
 color scheme with light text and dark backgrounds) is being used, false
 otherwise.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onHighContrastColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 [Windows] Called with true if a high contrast theme is being used, false
 otherwise.
</summary>
</member>
<member name="M:Electron.SystemPreferences.onColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows]
</summary>
</member>
<member name="M:Electron.SystemPreferences.onAccentColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [Windows] Called with the new RGBA color the user assigned to be their
 system accent color.
</summary>
</member>
<member name="M:Electron.SystemPreferences.isTrustedAccessibilityClient(System.Boolean)">
 <summary>
   [macOS] Returns true if the current process is a trusted accessibility
   client and false if it is not.
 </summary>
 <param name="prompt">
   whether or not the user will be informed via prompt if the current
   process is untrusted.
 </param>
</member>
<member name="M:Electron.SystemPreferences.isSwipeTrackingFromScrollEventsEnabled">
<summary>
 [macOS] Whether the Swipe between pages setting is on.
</summary>
</member>
<member name="M:Electron.SystemPreferences.isInvertedColorScheme">
<summary>
 [Windows] Returns true if an inverted color scheme (a high contrast color
 scheme with light text and dark backgrounds) is active, false otherwise.
</summary>
</member>
<member name="M:Electron.SystemPreferences.isHighContrastColorScheme">
<summary>
 [Windows] Returns true if a high contrast theme is active, false
 otherwise.
</summary>
</member>
<member name="M:Electron.SystemPreferences.isDarkMode">
<summary>
 [macOS] Whether the system is in Dark Mode.

 Note: On macOS 10.15 Catalina in order for this API to return the correct
 value when in the &quot;automatic&quot; dark mode setting you must either have
 `NSRequiresAquaSystemAppearance=false` in your Info.plist or be on
 Electron &gt;=7.0.0. See the [dark mode guide](https://electronjs.org/docs/tutorial/mojave-dark-mode-guide)
 for more information.
</summary>
</member>
<member name="M:Electron.SystemPreferences.isAeroGlassEnabled">
<summary>
 [Windows] Returns true if DWM composition (Aero Glass) is enabled, and
 false otherwise.
</summary>
</member>
<member name="P:Electron.SystemPreferences.effectiveAppearance">
<summary>
 [macOS] Returns the macOS appearance setting that is currently applied to
 your application, maps to NSApplication.effectiveAppearance

 Please note that until Electron is built targeting the 10.14 SDK, your
 application&apos;s `effectiveAppearance` will default to `Appearance.Light` and
 won&apos;t inherit the OS preference. In the interim in order for your
 application to inherit the OS preference you must set the
 `NSRequiresAquaSystemAppearance` key in your apps `Info.plist` to `false`.
 If you are using `electron-packager` or `electron-forge` just set the
 `enableDarwinDarkMode` packager option to `true`. See the Electron
 Packager API for more details.
</summary>
</member>
<member name="P:Electron.SystemPreferences.appLevelAppearance">
<summary>
 [macOS] Determines the macOS appearance setting for your application. This
 maps to values in NSApplication.appearance. Setting this will override the
 system default as well as the value of `getEffectiveAppearance`.

 Possible values that can be set are Appearance.Dark and Appearance.Light,
 and possible return values are Appearance.Dark, AppLevelAppearance.Light,
 and Appearance.Unknown.

 This property is only available on macOS 10.14 Mojave or newer.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getUserDefault(System.String,Electron.UserDefaultValueType)">
<summary>
 [macOS] Returns the value of `key` in NSUserDefaults.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getSystemColor(Electron.SystemPrefsSystemColor)">
<summary>
 [macOS] Returns the standard system color formatted as #RRGGBBAA.

 Returns one of several standard system colors that automatically adapt to
 vibrancy and changes in accessibility settings like &apos;Increase contrast&apos;
 and &apos;Reduce transparency&apos;. See Apple Documentation for more details.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getMediaAccessStatus(Electron.MediaAccessTypeForStatus)">
<summary>
 [macOS] This user consent was not required on macOS 10.13 High Sierra or lower so
 this method will always return `granted`. macOS 10.14 Mojave or higher requires
 consent for `microphone` and `camera` access. macOS 10.15 Catalina or higher
 requires consent for `screen` access.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getEffectiveAppearance">
<summary>
 [macOS] Gets the macOS appearance setting that is currently applied to
 your application, maps to NSApplication.effectiveAppearance.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getColor(Electron.SystemPrefsColorMac)">
<summary>
 [macOS] Returns the system color setting in RGB hexadecimal form
 (#ABCDEF). See the MacOS docs for more details.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getColor(Electron.SystemPrefsColorWin)">
<summary>
 [Windows] Returns the system color setting in RGB hexadecimal form
 (#ABCDEF). See the Windows docs for more details.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getAppLevelAppearance">
<summary>
 [macOS] Gets the macOS appearance setting that you have declared you want
 for your application, maps to NSApplication.appearance. You can use the
 setAppLevelAppearance API to set this value.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getAnimationSettings">
<summary>
 Returns an object with system animation settings.
</summary>
</member>
<member name="M:Electron.SystemPreferences.getAccentColor">
<summary>
 [Windows, macOS] Returns the user&apos;s current system wide accent color
 preference in RGBA hexadecimal form.

 This API is only available on macOS 10.14 Mojave or newer.
</summary>
</member>
<member name="M:Electron.SystemPreferences.canPromptTouchID">
<summary>
 [macOS] Returns a value indicating whether or not this device has the
 ability to use Touch ID.

 Note: This API will return `false` on macOS systems older than Sierra
 10.12.2.
</summary>
</member>
<member name="M:Electron.SystemPreferences.askForMediaAccess(Electron.MediaAccessType)">
<summary>
 Returns a promise that resolves with true if consent was granted and false
 if it was denied. If an invalid mediaType is passed, the promise will be
 rejected. If an access request was denied and later is changed through the
 System Preferences pane, a restart of the app will be required for the new
 permissions to take effect. If access has already been requested and
 denied, it must be changed through the preference pane; an alert will not
 pop up and the promise will resolve with the existing access status.

 Important: In order to properly leverage this API, you must set the
 NSMicrophoneUsageDescription and NSCameraUsageDescription strings in your
 app&apos;s Info.plist file. The values for these keys will be used to populate
 the permission dialogs so that the user will be properly informed as to
 the purpose of the permission request. See Electron Application
 Distribution for more information about how to set these in the context of
 Electron.

 This user consent was not required until macOS 10.14 Mojave, so this
 method will always return true if your system is running 10.13 High Sierra
 or lower.
</summary>
</member>
<member name="M:Electron.SystemPreferences.addListenerInvertedColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onInvertedColorSchemeChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.addListenerHighContrastColorSchemeChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onHighContrastColorSchemeChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.addListenerColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onColorChanged.
</summary>
</member>
<member name="M:Electron.SystemPreferences.addListenerAccentColorChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAccentColorChanged.
</summary>
</member>
<member name="P:Electron.SystemAnimationSettings.shouldRenderRichAnimation">
<summary>
 True if rich animations should be rendered. Looks at session type (e.g.
 remote desktop) and accessibility settings to give guidance for heavy
 animations.
</summary>
</member>
<member name="P:Electron.SystemAnimationSettings.scrollAnimationsEnabledBySystem">
<summary>
 Determines on a per-platform basis whether scroll animations (e.g.
 produced by home/end key) should be enabled.
</summary>
</member>
<member name="P:Electron.SystemAnimationSettings.prefersReducedMotion">
<summary>
 Determines whether the user desires reduced motion based on platform APIs.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.WindowFrameText">
<summary>
 The text in the window&apos;s titlebar area. 
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.WindowBackground">
<summary>
 The background of a window.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.UnemphasizedSelectedText">
<summary>
 [macOS 10.14] Selected text in a non-key window or view.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.UnemphasizedSelectedTextBackground">
<summary>
 [macOS 10.14] A background for selected text in a non-key window or view.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.UnemphasizedSelectedContentBackground">
<summary>
 [macOS 10.14] The selected content in a non-key window or view.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.UnderPageBackground">
<summary>
 The background behind a document&apos;s content.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Text">
<summary>
  The text in a document.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.TextBackground">
<summary>
 Text background.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.TertiaryLabel">
<summary>
 The text of a label of lesser importance than a secondary label such as a
 label used to represent disabled text.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Shadow">
<summary>
 The virtual shadow cast by a raised object onscreen.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Separator">
<summary>
 [macOS 10.14] A separator between different sections of content.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SelectedText">
<summary>
 Selected text.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SelectedTextBackground">
<summary>
 The background of selected text.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SelectedMenuItemText">
<summary>
 The text of a selected menu.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SelectedControlText">
<summary>
 The text of a selected control.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SelectedControl">
<summary>
 The surface of a selected control.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SelectedContentBackground">
<summary>
 [macOS 10.14] The background for selected content in a key window or view.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.SecondaryLabel">
<summary>
 The text of a label of lesser importance than a normal label such as a
 label used to represent a subheading or additional information.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.ScrubberTexturedBackground">
<summary>
 The background of a scrubber in the Touch Bar.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.QuaternaryLabel">
<summary>
 The text of a label of lesser importance than a tertiary label such as
 watermark text.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.PlaceholderText">
<summary>
 A placeholder string in a control or text view.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Link">
<summary>
 A link to other content.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Label">
<summary>
 The text of a label containing primary content.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.KeyboardFocusIndicator">
<summary>
 The ring that appears around the currently focused control when using the
 keyboard for interface navigation.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Highlight">
<summary>
 The virtual light source onscreen.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.HeaderText">
<summary>
 The text of a header cell in a table.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Grid">
<summary>
 The gridlines of an interface element such as a table.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.FindHighlight">
<summary>
 [macOS 10.14] The color of a find indicator.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.DisabledControlText">
<summary>
 The text of a control that’s disabled.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.ControlText">
<summary>
 The text of a control that isn’t disabled.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.Control">
<summary>
 The surface of a control.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.ControlBackground">
<summary>
 The background of a large interface element, such as a browser or table.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorMac.AlternateSelectedControlText">
<summary>
 The text on a selected surface in a list or table.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.WindowText">
<summary>
 Text in windows.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.WindowFrame">
<summary>
 Window frame.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Window">
<summary>
 Window background.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Scrollbar">
<summary>
 Scroll bar gray area.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.MenuText">
<summary>
 Text in menus.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.MenuBar">
<summary>
 The background color for the menu bar when menus appear as flat menus.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.MenuHighlight">
<summary>
 The color used to highlight menu items when the menu appears as a flat
 menu.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Menu">
<summary>
 Menu background.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.InfoText">
<summary>
 Text color for tooltip controls.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.InfoBackground">
<summary>
 Background color for tooltip controls.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.InactiveCaptionText">
<summary>
 Color of text in an inactive caption.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.InactiveCaptionGradient">
<summary>
 Right side color in the color gradient of an inactive window&apos;s title bar.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.InactiveCaption">
<summary>
 Inactive window caption. Specifies the left side color in the color
 gradient of an inactive window&apos;s title bar if the gradient effect is
 enabled.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.InactiveBorder">
<summary>
 Inactive window border.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Hotlight">
<summary>
 Color for a hyperlink or hot-tracked item.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.HighlightText">
<summary>
 Text of item(s) selected in a control.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Highlight">
<summary>
 Item(s) selected in a control.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.DisabledText">
<summary>
 Grayed (disabled) text.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Desktop">
<summary>
 Desktop background color.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.CaptionText">
<summary>
 Text in caption, size box, and scroll bar arrow box.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.ButtonText">
<summary>
 Text on push buttons.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.AppWorkspace">
<summary>
 Background color of multiple document interface (MDI) applications.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.ActiveCaptionGradient">
<summary>
 Right side color in the color gradient of an active window&apos;s title bar.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.ActiveCaption">
<summary>
 Active window title bar. Specifies the left side color in the color
 gradient of an active window&apos;s title bar if the gradient effect is
 enabled.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.ActiveBorder">
<summary>
 Active window border.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Shadow3D">
<summary>
 (&quot;3d-shadow&quot;) Shadow color for three-dimensional display elements.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Light3D">
<summary>
 (&quot;3d-light&quot;) Light color for three-dimensional display elements.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Highlight3D">
<summary>
 (&quot;3d-highlight&quot;) Highlight color for three-dimensional display elements.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.Face3D">
<summary>
 (&quot;3d-face&quot;) Face color for three-dimensional display elements and for
 dialog box backgrounds.
</summary>
</member>
<member name="T:Electron.SystemPrefsColorWin.DarkShadow3D">
<summary>
 (&quot;3d-dark-shadow&quot;) Dark shadow for three-dimensional display elements.
</summary>
</member>
<member name="P:Electron.StreamProtocolResponse`1.statusCode(System.Int32)">
<summary>
 The HTTP response code.
</summary>
</member>
<member name="P:Electron.StreamProtocolResponse`1.headers(System.Object)">
<summary>
 An object containing the response headers. The members are `string` or
 `string[]`.
</summary>
</member>
<member name="P:Electron.StreamProtocolResponse`1.data(Microsoft.FSharp.Core.FSharpOption{Node.Stream.Readable{`0}})">
<summary>
 A Node.js readable stream representing the response body.
</summary>
</member>
<member name="P:Electron.StreamProtocolResponse`1.statusCode">
<summary>
 The HTTP response code.
</summary>
</member>
<member name="P:Electron.StreamProtocolResponse`1.headers">
<summary>
 An object containing the response headers. The members are `string` or
 `string[]`.
</summary>
</member>
<member name="P:Electron.StreamProtocolResponse`1.data">
<summary>
 A Node.js readable stream representing the response body.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.target(System.String)">
<summary>
 The target to launch from this shortcut.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.iconIndex(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 The resource ID of icon when `icon` is a DLL or EXE. Default is 0.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.icon(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The path to the icon, can be a DLL or EXE. `icon` and `iconIndex` have to
 be set together. Default is empty, which uses the target&apos;s icon.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.description(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The description of the shortcut. Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.cwd(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The working directory. Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.args(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The arguments to be applied to target when launching from this shortcut.
 Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.appUserModelId(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The Application User Model ID. Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.target">
<summary>
 The target to launch from this shortcut.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.iconIndex">
<summary>
 The resource ID of icon when `icon` is a DLL or EXE. Default is 0.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.icon">
<summary>
 The path to the icon, can be a DLL or EXE. `icon` and `iconIndex` have to
 be set together. Default is empty, which uses the target&apos;s icon.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.description">
<summary>
 The description of the shortcut. Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.cwd">
<summary>
 The working directory. Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.args">
<summary>
 The arguments to be applied to target when launching from this shortcut.
 Default is empty.
</summary>
</member>
<member name="P:Electron.ShortcutDetails.appUserModelId">
<summary>
 The Application User Model ID. Default is empty.
</summary>
</member>
<member name="M:Electron.Shell.writeShortcutLink(System.String,Electron.ShortcutDetails)">
<summary>
 [Windows] Creates or updates a shortcut link at shortcutPath. Returns a
 value indicating whether the shortcut was created successfully.
</summary>
</member>
<member name="M:Electron.Shell.writeShortcutLink(System.String,Electron.WriteShortcutLinkOperation,Electron.ShortcutDetails)">
<summary>
 [Windows] Creates or updates a shortcut link at shortcutPath. Returns a
 value indicating whether the shortcut was created successfully.
</summary>
</member>
<member name="M:Electron.Shell.showItemInFolder(System.String)">
<summary>
 Show the given file in a file manager. If possible, select the file.
</summary>
</member>
<member name="M:Electron.Shell.readShortcutLink(System.String)">
<summary>
 [Windows] Resolves the shortcut link at shortcutPath. An exception will be
 thrown when any error happens.
</summary>
</member>
<member name="M:Electron.Shell.openPath(System.String)">
<summary>
 Open the given file in the desktop&apos;s default manner. The returned promise resolves
 with an string containing the error message corresponding to the failure if a
 failure occurred, otherwise &quot;&quot;.
</summary>
</member>
<member name="M:Electron.Shell.openExternal(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.OpenExternalOptions})">
<summary>
 Open the given external protocol URL in the desktop&apos;s default manner. (For
 example, mailto: URLs in the user&apos;s default mail agent).
</summary>
</member>
<member name="M:Electron.Shell.moveItemToTrash(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
   Move the given file to trash and returns a value indicating whether the item was
   successfully moved to the trash or otherwise deleted.
 </summary>
 <param name="deleteOnFail">
   [macOS] Whether or not to unilaterally remove the item if the Trash is disabled or
   unsupported on the volume.
 </param>
</member>
<member name="M:Electron.Shell.beep">
<summary>
 Play the beep sound.
</summary>
</member>
<member name="T:Electron.WriteShortcutLinkOperation.Replace">
<summary>
 Overwrites an existing shortcut, fails if the shortcut doesn&apos;t exist.
</summary>
</member>
<member name="T:Electron.WriteShortcutLinkOperation.Update">
<summary>
 Updates specified properties only on an existing shortcut.
</summary>
</member>
<member name="T:Electron.WriteShortcutLinkOperation.Create">
<summary>
 Creates a new shortcut, overwriting if necessary.
</summary>
</member>
<member name="P:Electron.SessionStatic.defaultSession">
<summary>
 The default session object of the app.
</summary>
</member>
<member name="M:Electron.SessionStatic.fromPartition(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.FromPartitionOptions})">
<summary>
 Returns a session instance from `partition` string. When there is an
 existing Session with the same `partition`, it will be returned; otherwise
 a new Session instance will be created with `options`.

 If partition starts with `persist:`, the page will use a persistent
 session available to all pages in the app with the same partition. if
 there is no `persist:` prefix, the page will use an in-memory session. If
 the partition is empty then default session of the app will be returned.

 To create a Session with `options`, you have to ensure the Session with
 the partition has never been used before. There is no way to change the
 options of an existing Session object.
</summary>
</member>
<member name="M:Electron.Session.setUserAgent(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
   Overrides the `userAgent` and `acceptLanguages` for this session.

   This doesn't affect existing WebContents, and each WebContents can use
   webContents.setUserAgent to override the session-wide user agent.
 </summary>
 <param name="userAgent"></param>
 <param name="acceptLanguages">
   A comma separated ordered list of language codes, for example
   "en-US,fr,de,ko,zh-CN,ja".
 </param>
</member>
<member name="M:Electron.Session.setSpellCheckerLanguages(System.String[])">
<summary>
 The built in spellchecker does not automatically detect what language a user is
 typing in. In order for the spell checker to correctly check their words you must
 call this API with an array of language codes. You can get the list of supported
 language codes with the `availableSpellCheckerLanguages` property.

 **Note:** On macOS the OS spellchecker is used and will detect your language
 automatically. This API is a no-op on macOS.
</summary>
</member>
<member name="M:Electron.Session.setSpellCheckerDictionaryDownloadURL(System.String)">
<summary>
 By default Electron will download hunspell dictionaries from the Chromium CDN. If
 you want to override this behavior you can use this API to point the dictionary
 downloader at your own hosted version of the hunspell dictionaries. We publish a
 `hunspell_dictionaries.zip` file with each release which contains the files you need
 to host here.

 **Note:** On macOS the OS spellchecker is used and therefore we do not download any
 dictionary files. This API is a no-op on macOS.
</summary>
</member>
<member name="M:Electron.Session.setProxy(Electron.ProxyConfig)">
<summary>
 Sets the proxy settings.

 Returns a promise that resolves when the proxy setting process is
 complete.

 See the Electron documentation for details:
 https://electronjs.org/docs/api/session#sessetproxyconfig
</summary>
</member>
<member name="M:Electron.Session.setPreloads(System.String[])">
<summary>
 Adds scripts that will be executed on ALL web contents that are associated
 with this session just before normal `preload` scripts run.
</summary>
</member>
<member name="M:Electron.Session.setPermissionRequestHandler(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{Electron.PermissionRequestHandlerPermission,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Electron.PermissionRequestHandlerDetails,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Sets the handler which can be used to respond to permission requests for
 the session. Calling callback(true) will allow the permission and
 callback(false) will reject it. To clear the handler, call
 setPermissionRequestHandler(None).

 The WebContents parameter is the WebContents requesting the permission.
 Please note that if the request comes from a subframe you should use
 PermissionRequestHandlerDetails.requestingUrl to check the request origin.
</summary>
</member>
<member name="M:Electron.Session.setPermissionCheckHandler(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{Electron.PermissionCheckHandlerPermission,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.PermissionCheckHandlerDetails,System.Boolean}}}}})">
<summary>
 Sets the handler which can be used to respond to permission checks for the
 session. Returning true will allow the permission and false will reject
 it. To clear the handler, call setPermissionCheckHandler(None). The third
 handler argument is `requestingOrigin`, the origin URL of the permission
 check.

 The WebContents parameter is the WebContents requesting the permission.
 Please note that if the request comes from a subframe you should use
 PermissionRequestHandlerDetails.requestingUrl to check the request origin.
</summary>
</member>
<member name="M:Electron.Session.setDownloadPath(System.String)">
<summary>
 Sets download saving directory. By default, the download directory will be
 the Downloads under the respective app folder.
</summary>
</member>
<member name="M:Electron.Session.setCertificateVerifyProc(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Electron.CertificateVerifyProcRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 Sets the certificate verify proc for `session`, the `proc` will be called
 with proc(request, callback) whenever a server certificate verification is
 requested. Calling callback(0) accepts the certificate, calling
 callback(-2) rejects it, calling callback(-3) uses the verification result
 from chromium. See more codes here:
 https://cs.chromium.org/chromium/src/net/base/net_error_list.h

 Calling setCertificateVerifyProc(None) will revert back to default
 certificate verify proc.
</summary>
</member>
<member name="M:Electron.Session.resolveProxy(System.String)">
<summary>
 Returns a promise that resolves with the proxy information for `url`.
</summary>
</member>
<member name="M:Electron.Session.removeWordFromSpellCheckerDictionary(System.String)">
<summary>
 Removes a word from the custom dictionary and returns a value indicating whether the
 word was successfully removed. This API will not work on non-persistent (in-memory)
 sessions.

 **Note:** On macOS and Windows 10 this word will be written to the OS custom
 dictionary as well.
</summary>
</member>
<member name="M:Electron.Session.removeListenerWillDownload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItem,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onWillDownload.
</summary>
</member>
<member name="M:Electron.Session.removeListenerSpellcheckDictionaryInitialized(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.removeListenerSpellcheckDictionaryDownloadSuccess(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.removeListenerSpellcheckDictionaryDownloadFailure(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.removeListenerSpellcheckDictionaryDownloadBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.removeListenerPreconnect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.removeExtension(System.String)">
<summary>
 Unloads an extension.

 **Note:** This API cannot be called before the `ready` event of the `app` module is
 emitted.
</summary>
</member>
<member name="M:Electron.Session.preconnect(Electron.PreconnectOptions)">
<summary>
 Preconnects the given number of sockets to an origin.
</summary>
</member>
<member name="M:Electron.Session.onceWillDownload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItem,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onWillDownload.
</summary>
</member>
<member name="M:Electron.Session.onceSpellcheckDictionaryInitialized(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.onceSpellcheckDictionaryDownloadSuccess(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.onceSpellcheckDictionaryDownloadFailure(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.onceSpellcheckDictionaryDownloadBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.oncePreconnect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.onWillDownload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItem,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when Electron is about to download item in webContents.

 Calling event.preventDefault() will cancel the download and the
 DownloadItem will not be available from next tick of the process.
</summary>
</member>
<member name="M:Electron.Session.onSpellcheckDictionaryInitialized(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a hunspell dictionary file has been successfully initialized. This
 occurs after the file has been downloaded.

 Parameters:
  - event
  - languageCode: The language code of the dictionary file
</summary>
</member>
<member name="M:Electron.Session.onSpellcheckDictionaryDownloadSuccess(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a hunspell dictionary file has been successfully downloaded.

 Parameters:
  - event
  - languageCode: The language code of the dictionary file
</summary>
</member>
<member name="M:Electron.Session.onSpellcheckDictionaryDownloadFailure(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a hunspell dictionary file has been successfully downloaded.

 Parameters:
  - event
  - languageCode: The language code of the dictionary file
</summary>
</member>
<member name="M:Electron.Session.onSpellcheckDictionaryDownloadBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a hunspell dictionary file starts downloading.

 Parameters:
  - event
  - languageCode: The language code of the dictionary file
</summary>
</member>
<member name="M:Electron.Session.onPreconnect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when a render process requests preconnection to a URL, generally
 due to a [resource hint](https://w3c.github.io/resource-hints/).

 Parameters:
  - event
  - preconnectUrl: The URL being requested for preconnection by the renderer.
  - allowCredentials: True if the renderer is requesting that the connection include credentials (see the [spec](https://w3c.github.io/resource-hints/#preconnect) for more details.)
</summary>
</member>
<member name="M:Electron.Session.loadExtension(System.String)">
<summary>
 Returns a promise that resolves when the extension is loaded.

 This method will raise an exception if the extension could not be loaded. If there
 are warnings when installing the extension (e.g. if the extension requests an API
 that Electron does not support) then they will be logged to the console.

 Note that Electron does not support the full range of Chrome extensions APIs.

 Note that in previous versions of Electron, extensions that were loaded would be
 remembered for future runs of the application. This is no longer the case:
 loadExtension must be called on every boot of your app if you want the extension to
 be loaded.
</summary>
</member>
<member name="M:Electron.Session.listWordsInSpellCheckerDictionary">
<summary>
 Returns an array of all words in app&apos;s custom dictionary. Resolves when the full
 dictionary is loaded from disk.
</summary>
</member>
<member name="P:Electron.Session.webRequest">
<summary>
 A WebRequest object for this session.
</summary>
</member>
<member name="P:Electron.Session.serviceWorkers">
<summary>
 A ServiceWorkers object for this session.
</summary>
</member>
<member name="P:Electron.Session.protocol">
<summary>
 A Protocol object for this session.
</summary>
</member>
<member name="P:Electron.Session.netLog">
<summary>
 A NetLog object for this session.
</summary>
</member>
<member name="P:Electron.Session.cookies">
<summary>
 A Cookies object for this session.
</summary>
</member>
<member name="P:Electron.Session.availableSpellCheckerLanguages">
<summary>
 Gets all the known available spell checker languages. Providing a language code to
 the `setSpellCheckerLanaguages` API that isn&apos;t in this array will result in an
 error.
</summary>
</member>
<member name="M:Electron.Session.getUserAgent">
<summary>
 Returns the user agent for this session.
</summary>
</member>
<member name="M:Electron.Session.getSpellCheckerLanguages">
<summary>
 Returns an array of language codes the spellchecker is enabled for. If this list is
 empty the spellchecker will fallback to using `en-US`. By default on launch if this
 setting is an empty list Electron will try to populate this setting with the current
 OS locale. This setting is persisted across restarts.

 **Note:** On macOS the OS spellchecker is used and has it&apos;s own list of languages.
 This API is a no-op on macOS.
</summary>
</member>
<member name="M:Electron.Session.getPreloads">
<summary>
 Returns an array of paths to preload scripts that have been registered.
</summary>
</member>
<member name="M:Electron.Session.getExtension(System.String)">
<summary>
 Returns the loaded extension with the given ID.

 **Note:** This API cannot be called before the `ready` event of the `app` module is
 emitted.
</summary>
</member>
<member name="M:Electron.Session.getCacheSize">
<summary>
 Returns the session&apos;s current cache size, in bytes.
</summary>
</member>
<member name="M:Electron.Session.getBlobData(System.String)">
 <param name="identifier">Valid UUID</param>
</member>
<member name="M:Electron.Session.getAllExtensions">
<summary>
 Returns a list of all loaded extensions.

 **Note:** This API cannot be called before the `ready` event of the `app` module is
 emitted.
</summary>
</member>
<member name="M:Electron.Session.flushStorageData">
<summary>
 Writes any unwritten DOMStorage data to disk.
</summary>
</member>
<member name="M:Electron.Session.enableNetworkEmulation(Electron.EnableNetworkEmulationOptions)">
<summary>
 Emulates network with the given configuration for the session.
</summary>
</member>
<member name="M:Electron.Session.downloadURL(System.String)">
<summary>
 Initiates a download of the resource at `url`. The API will generate a
 `DownloadItem` that can be accessed with the `will-download` event.

 **Note:** This does not perform any security checks that relate to a page&apos;s origin,
 unlike `webContents.downloadURL`.
</summary>
</member>
<member name="M:Electron.Session.disableNetworkEmulation">
<summary>
 Disables any network emulation already active for the session. Resets to
 the original network configuration.
</summary>
</member>
<member name="M:Electron.Session.createInterruptedDownload(Electron.CreateInterruptedDownloadOptions)">
<summary>
 Allows resuming cancelled or interrupted downloads from previous Session.
 The API will generate a DownloadItem that can be accessed with the
 `will-download` event. The DownloadItem will not have any WebContents
 associated with it and the initial state will be interrupted. The download
 will start only when the resume API is called on the DownloadItem.
</summary>
</member>
<member name="M:Electron.Session.clearStorageData(Microsoft.FSharp.Core.FSharpOption{Electron.ClearStorageDataOptions})">
<summary>
 Clears the data of web storages.

 Returns a promise that resolves when the storage data has been cleared.
</summary>
</member>
<member name="M:Electron.Session.clearHostResolverCache">
<summary>
 Clears the host resolver cache.

 Returns a promise that resolves when the operation is complete.
</summary>
</member>
<member name="M:Electron.Session.clearCache">
<summary>
 Clears the session’s HTTP cache.

 Returns a promise that resolves when the cache clear operation is
 complete.
</summary>
</member>
<member name="M:Electron.Session.clearAuthCache(Electron.RemoveClientCertificate)">
<summary>
 Clears the session’s HTTP authentication cache.

 Returns a promise that resolves when the session’s HTTP authentication
 cache has been cleared.
</summary>
</member>
<member name="M:Electron.Session.clearAuthCache(Electron.RemovePassword)">
<summary>
 Clears the session’s HTTP authentication cache.

 Returns a promise that resolves when the session’s HTTP authentication
 cache has been cleared.
</summary>
</member>
<member name="M:Electron.Session.allowNTLMCredentialsForDomains(System.String)">
<summary>
 Dynamically sets whether to always send credentials for HTTP NTLM or
 Negotiate authentication. `domains` is a comma-separated list of servers
 for which integrated authentication is enabled.
</summary>
</member>
<member name="M:Electron.Session.addWordToSpellCheckerDictionary(System.String)">
<summary>
 Adds a word to the custom dictionary and returns a value indicating whether the word
 was successfully written. This API will not work on non-persistent (in-memory)
 sessions.

 **Note:** On macOS and Windows 10 this word will be written to the OS custom
 dictionary as well.
</summary>
</member>
<member name="M:Electron.Session.addListenerWillDownload(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItem,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onWillDownload.
</summary>
</member>
<member name="M:Electron.Session.addListenerSpellcheckDictionaryInitialized(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.addListenerSpellcheckDictionaryDownloadSuccess(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.addListenerSpellcheckDictionaryDownloadFailure(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.addListenerSpellcheckDictionaryDownloadBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="M:Electron.Session.addListenerPreconnect(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPreconnect.
</summary>
</member>
<member name="P:Electron.Extension.url">
<summary>
 The extension&apos;s `chrome-extension://` URL.
</summary>
</member>
<member name="P:Electron.Extension.path">
<summary>
 The extension&apos;s file path.
</summary>
</member>
<member name="P:Electron.Extension.manifest">
<summary>
 Copy of the extension&apos;s manifest data.
</summary>
</member>
<member name="M:Electron.ServiceWorkers.removeListenerConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ServiceWorkerConsoleMessageDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onConsoleMessage.
</summary>
</member>
<member name="M:Electron.ServiceWorkers.onceConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ServiceWorkerConsoleMessageDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onConsoleMessage.
</summary>
</member>
<member name="M:Electron.ServiceWorkers.onConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ServiceWorkerConsoleMessageDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when Electron is about to download item in webContents.

 Calling event.preventDefault() will cancel the download and the
 DownloadItem will not be available from next tick of the process.
</summary>
</member>
<member name="M:Electron.ServiceWorkers.getFromVersionID(System.Int32)">
<summary>
 Returns information about a service worker.

 If the service worker does not exist or is not running this method will throw an
 exception.
</summary>
</member>
<member name="M:Electron.ServiceWorkers.getAllRunning">
<summary>
 Returns an object where the keys are the service worker version ID (int) and the
 values are `ServiceWorkerInfo` objects.
</summary>
</member>
<member name="M:Electron.ServiceWorkers.addListenerConsoleMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.ServiceWorkerConsoleMessageDetails,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onConsoleMessage.
</summary>
</member>
<member name="P:Electron.ServiceWorkerInfo.scriptUrl">
<summary>
 The full URL to the script that this service worker runs
</summary>
</member>
<member name="P:Electron.ServiceWorkerInfo.scope">
<summary>
 The base URL that this service worker is active for.
</summary>
</member>
<member name="P:Electron.ServiceWorkerInfo.renderProcessId">
<summary>
 The virtual ID of the process that this service worker is running in. This is not an
 OS level PID. This aligns with the ID set used for `webContents.getProcessId()`.
</summary>
</member>
<member name="P:Electron.ServiceWorkerConsoleMessageDetails.versionId">
<summary>
 The version ID of the service worker that sent the log message
</summary>
</member>
<member name="P:Electron.ServiceWorkerConsoleMessageDetails.sourceUrl">
<summary>
 The URL the message came from
</summary>
</member>
<member name="P:Electron.ServiceWorkerConsoleMessageDetails.source">
<summary>
 The type of source for this message.
</summary>
</member>
<member name="P:Electron.ServiceWorkerConsoleMessageDetails.message">
<summary>
 The actual console message
</summary>
</member>
<member name="P:Electron.ServiceWorkerConsoleMessageDetails.lineNumber">
<summary>
 The line number of the source that triggered this console message
</summary>
</member>
<member name="P:Electron.ServiceWorkerConsoleMessageDetails.level">
<summary>
 The log level, from 0 to 3. In order it matches verbose, info, warning and error.
</summary>
</member>
<member name="P:Electron.RemoveClientCertificate.origin(System.String)">
<summary>
 Origin of the server whose associated client certificate must be removed
 from the cache.
</summary>
</member>
<member name="P:Electron.RemoveClientCertificate.origin">
<summary>
 Origin of the server whose associated client certificate must be removed
 from the cache.
</summary>
</member>
<member name="P:Electron.RemovePassword.username(System.String)">
<summary>
 Credentials of the authentication. Must be provided if removing by
 `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.scheme(Electron.RemovePasswordScheme)">
<summary>
 Scheme of the authentication. Must be provided if removing by `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.realm(System.String)">
<summary>
 Realm of the authentication. Must be provided if removing by `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.password(System.String)">
<summary>
 Credentials of the authentication. Must be provided if removing by
 `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.origin(System.String)">
<summary>
 When provided, the authentication info related to the origin will only be
 removed otherwise the entire cache will be cleared.
</summary>
</member>
<member name="P:Electron.RemovePassword.username">
<summary>
 Credentials of the authentication. Must be provided if removing by
 `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.scheme">
<summary>
 Scheme of the authentication. Must be provided if removing by `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.realm">
<summary>
 Realm of the authentication. Must be provided if removing by `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.password">
<summary>
 Credentials of the authentication. Must be provided if removing by
 `origin`.
</summary>
</member>
<member name="P:Electron.RemovePassword.origin">
<summary>
 When provided, the authentication info related to the origin will only be
 removed otherwise the entire cache will be cleared.
</summary>
</member>
<member name="P:Electron.SegmentedControlSegment.label(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The text to appear in this segment.
</summary>
</member>
<member name="P:Electron.SegmentedControlSegment.icon(Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage})">
<summary>
 The image to appear in this segment.
</summary>
</member>
<member name="P:Electron.SegmentedControlSegment.enabled(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Whether this segment is selectable. Default: true.
</summary>
</member>
<member name="P:Electron.SegmentedControlSegment.label">
<summary>
 The text to appear in this segment.
</summary>
</member>
<member name="P:Electron.SegmentedControlSegment.icon">
<summary>
 The image to appear in this segment.
</summary>
</member>
<member name="P:Electron.SegmentedControlSegment.enabled">
<summary>
 Whether this segment is selectable. Default: true.
</summary>
</member>
<member name="P:Electron.ScrubberItem.label(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The text to appear in this item.
</summary>
</member>
<member name="P:Electron.ScrubberItem.icon(Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage})">
<summary>
 The image to appear in this item.
</summary>
</member>
<member name="P:Electron.ScrubberItem.label">
<summary>
 The text to appear in this item.
</summary>
</member>
<member name="P:Electron.ScrubberItem.icon">
<summary>
 The image to appear in this item.
</summary>
</member>
<member name="M:Electron.Screen.screenToDipRect(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserWindow},Electron.Rectangle)">
<summary>
 [Windows] Converts a screen physical rect to a screen DIP rect. The DPI
 scale is performed relative to the display nearest to `window`. If
 `window` is None, scaling will be performed to the display nearest to
 `rect`.
</summary>
</member>
<member name="M:Electron.Screen.screenToDipPoint(Electron.Point)">
<summary>
 [Windows] Converts a screen physical point to a screen DIP point. The DPI
 scale is performed relative to the display containing the physical point.
</summary>
</member>
<member name="M:Electron.Screen.removeListenerDisplayRemoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDisplayRemoved.
</summary>
</member>
<member name="M:Electron.Screen.removeListenerDisplayMetricsChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.FSharpFunc{Electron.DisplayMetricChangeType[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onDisplayMetricsChanged.
</summary>
</member>
<member name="M:Electron.Screen.removeListenerDisplayAdded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDisplayAdded.
</summary>
</member>
<member name="M:Electron.Screen.onceDisplayRemoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDisplayRemoved.
</summary>
</member>
<member name="M:Electron.Screen.onceDisplayMetricsChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.FSharpFunc{Electron.DisplayMetricChangeType[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onDisplayMetricsChanged.
</summary>
</member>
<member name="M:Electron.Screen.onceDisplayAdded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDisplayAdded.
</summary>
</member>
<member name="M:Electron.Screen.onDisplayRemoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a display has been removed.
</summary>
</member>
<member name="M:Electron.Screen.onDisplayMetricsChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.FSharpFunc{Electron.DisplayMetricChangeType[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when one or more metrics change in a display.
</summary>
</member>
<member name="M:Electron.Screen.onDisplayAdded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a display has been added.
</summary>
</member>
<member name="M:Electron.Screen.getPrimaryDisplay">
<summary>
 Returns the primary display.
</summary>
</member>
<member name="M:Electron.Screen.getDisplayNearestPoint(Electron.Point)">
<summary>
 Returns the display nearest the specified point.
</summary>
</member>
<member name="M:Electron.Screen.getDisplayMatching(Electron.Rectangle)">
<summary>
 Returns the display that most closely intersects the provided bounds.
</summary>
</member>
<member name="M:Electron.Screen.getCursorScreenPoint">
<summary>
 The current absolute position of the mouse pointer.
</summary>
</member>
<member name="M:Electron.Screen.getAllDisplays">
<summary>
 Returns the displays that are currently available.
</summary>
</member>
<member name="M:Electron.Screen.dipToScreenRect(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserWindow},Electron.Rectangle)">
<summary>
 [Windows] Converts a screen DIP rect to a screen physical rect. The DPI
 scale is performed relative to the display nearest to `window`. If
 `window` is None, scaling will be performed to the display nearest to
 `rect`.
</summary>
</member>
<member name="M:Electron.Screen.dipToScreenPoint(Electron.Point)">
<summary>
 [Windows] Converts a screen DIP point to a screen physical point. The DPI
 scale is performed relative to the display containing the DIP point.
</summary>
</member>
<member name="M:Electron.Screen.addListenerDisplayRemoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDisplayRemoved.
</summary>
</member>
<member name="M:Electron.Screen.addListenerDisplayMetricsChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.FSharpFunc{Electron.DisplayMetricChangeType[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onDisplayMetricsChanged.
</summary>
</member>
<member name="M:Electron.Screen.addListenerDisplayAdded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Display,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDisplayAdded.
</summary>
</member>
<member name="M:Electron.Remote.require(System.String)">
<summary>
 Returns the object returned by require(module) in the main process.
 Modules specified by their relative path will resolve relative to the
 entrypoint of the main process.
</summary>
</member>
<member name="P:Electron.Remote.process">
<summary>
 The `process` object in the main process. This is the same as
 remote.getGlobal(&apos;process&apos;) but is cached.
</summary>
</member>
<member name="M:Electron.Remote.getGlobal(System.String)">
<summary>
 Returns the global variable of name (e.g. global[name]) in the main
 process.
</summary>
</member>
<member name="M:Electron.Remote.getCurrentWindow">
<summary>
 Returns the window to which this web page belongs.

 Note: Do not use removeAllListeners on BrowserWindow. Use of this can
 remove all blur listeners, disable click events on touch bar buttons, and
 other unintended consequences.
</summary>
</member>
<member name="M:Electron.Remote.getCurrentWebContents">
<summary>
 Returns the web contents of this web page.
</summary>
</member>
<member name="P:Electron.Referrer.url(System.String)">
<summary>
 HTTP Referrer URL.
</summary>
</member>
<member name="P:Electron.Referrer.policy(Electron.ReferrerPolicy)">
<summary>
 See the Referrer-Policy spec for more details on the meaning of these
 values:
 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
</summary>
</member>
<member name="P:Electron.Referrer.url">
<summary>
 HTTP Referrer URL.
</summary>
</member>
<member name="P:Electron.Referrer.policy">
<summary>
 See the Referrer-Policy spec for more details on the meaning of these
 values:
 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
</summary>
</member>
<member name="P:Electron.Rectangle.y(System.Int32)">
<summary>
 The y coordinate of the origin of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.x(System.Int32)">
<summary>
 The x coordinate of the origin of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.width(System.Int32)">
<summary>
 The width of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.height(System.Int32)">
<summary>
 The height of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.y">
<summary>
 The y coordinate of the origin of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.x">
<summary>
 The x coordinate of the origin of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.width">
<summary>
 The width of the rectangle.
</summary>
</member>
<member name="P:Electron.Rectangle.height">
<summary>
 The height of the rectangle.
</summary>
</member>
<member name="M:Electron.Protocol.unregisterProtocol(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Unregisters the custom protocol of `scheme`.
</summary>
</member>
<member name="M:Electron.Protocol.uninterceptProtocol(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Remove the interceptor installed for `scheme` and restore its original
 handler.
</summary>
</member>
<member name="M:Electron.Protocol.registerStringProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterStringProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.StringProtocolResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send a string as a response.

 The usage is the same with registerFileProtocol, except for the handler&apos;s
 callback signature.
</summary>
</member>
<member name="M:Electron.Protocol.registerStringProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterStringProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send a string as a response.

 The usage is the same with registerFileProtocol, except for the handler&apos;s
 callback signature.
</summary>
</member>
<member name="M:Electron.Protocol.registerStreamProtocol``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterStreamProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.StreamProtocolResponse{``0},Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send a `Readable` as a
 response.

 The usage is similar to the other register{Any}Protocol, except for the
 handler&apos;s callback signature.
</summary>
</member>
<member name="M:Electron.Protocol.registerStreamProtocol``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterStreamProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Node.Stream.Readable{``0},Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send a `Readable` as a
 response.

 The usage is similar to the other register{Any}Protocol, except for the
 handler&apos;s callback signature.
</summary>
</member>
<member name="M:Electron.Protocol.registerSchemesAsPrivileged(Electron.CustomScheme[])">
<summary>
 Registers the scheme as standard, secure, bypasses content security policy
 for resources, allows registering ServiceWorker and supports fetch API.

 Note: This method can only be used before the ready event of the app
 module gets emitted and can be called only once.

 Specify a privilege with the value of true to enable the capability.

 A standard scheme adheres to what RFC 3986 calls generic URI syntax. For
 example `http` and `https` are standard schemes, while `file` is not.

 Registering a scheme as standard, will allow relative and absolute
 resources to be resolved correctly when served. Otherwise the scheme will
 behave like the file protocol, but without the ability to resolve relative
 URLs.

 Registering a scheme as standard will allow access to files through the
 FileSystem API. Otherwise the renderer will throw a security error for the
 scheme.

 By default web storage apis (localStorage, sessionStorage, webSQL,
 indexedDB, cookies) are disabled for non standard schemes. So in general
 if you want to register a custom protocol to replace the http protocol,
 you have to register it as a standard scheme.
</summary>
</member>
<member name="M:Electron.Protocol.registerHttpProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterHttpProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.RedirectRequest,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send an HTTP request as a
 response.

 The usage is the same with registerFileProtocol, except for the handler&apos;s
 callback signature.

 By default the HTTP request will reuse the current session. If you want
 the request to have a different session you should set `session` to
 `None`.

 For POST requests the uploadData object must be provided.
</summary>
</member>
<member name="M:Electron.Protocol.registerFileProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterFileProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.FilePathWithHeaders,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of scheme that will send the file as a response. The
 handler will be called with handler(request, callback) when a request is
 going to be created with scheme. completion will be called with
 completion(None) when scheme is successfully registered or
 completion(error) when failed.

 To handle the request, the handler&apos;s callback should be called with either
 the file&apos;s path or an object that has a `path` property, e.g.
 callback(filePath) or callback({ path: filePath }). The object may also
 have a `headers` property which gives a map of headers to values for the
 response headers, e.g. callback({ path: filePath, headers:
 {&quot;Content-Security-Policy&quot;: &quot;default-src &apos;none&apos;&quot;]}).

 When callback is called with nothing, a number, or an object that has an
 `error` property, the request will fail with the error number you
 specified. For the available error numbers you can use, please see the net
 error list.

 By default the scheme is treated like http:, which is parsed differently
 than protocols that follow the &quot;generic URI syntax&quot; like file:, so you
 probably want to call protocol.registerSchemesAsPrivileged to have your scheme
 treated as a standard scheme.
</summary>
</member>
<member name="M:Electron.Protocol.registerFileProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterFileProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of scheme that will send the file as a response. The
 handler will be called with handler(request, callback) when a request is
 going to be created with scheme. completion will be called with
 completion(None) when scheme is successfully registered or
 completion(error) when failed.

 To handle the request, the handler&apos;s callback should be called with either
 the file&apos;s path or an object that has a `path` property, e.g.
 callback(filePath) or callback({ path: filePath }). The object may also
 have a `headers` property which gives a map of headers to values for the
 response headers, e.g. callback({ path: filePath, headers:
 {&quot;Content-Security-Policy&quot;: &quot;default-src &apos;none&apos;&quot;]}).

 When callback is called with nothing, a number, or an object that has an
 `error` property, the request will fail with the error number you
 specified. For the available error numbers you can use, please see the net
 error list.

 By default the scheme is treated like http:, which is parsed differently
 than protocols that follow the &quot;generic URI syntax&quot; like file:, so you
 probably want to call protocol.registerSchemesAsPrivileged to have your scheme
 treated as a standard scheme.
</summary>
</member>
<member name="M:Electron.Protocol.registerBufferProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterBufferProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.MimeTypedBuffer,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send a Buffer as a response.

 The usage is the same with registerFileProtocol, except for the handler&apos;s
 callback signature.
</summary>
</member>
<member name="M:Electron.Protocol.registerBufferProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.RegisterBufferProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Node.Buffer.Buffer,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Registers a protocol of `scheme` that will send a Buffer as a response.

 The usage is the same with registerFileProtocol, except for the handler&apos;s
 callback signature.
</summary>
</member>
<member name="M:Electron.Protocol.isProtocolHandled(System.String)">
<summary>
 Indicates whether there is already a handler for `scheme`.
</summary>
</member>
<member name="M:Electron.Protocol.interceptStringProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.InterceptStringProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.StringProtocolResponse,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Intercepts `scheme` protocol and uses `handler` as the protocol&apos;s new
 handler which sends a string as a response.
</summary>
</member>
<member name="M:Electron.Protocol.interceptStringProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.InterceptStringProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Intercepts `scheme` protocol and uses `handler` as the protocol&apos;s new
 handler which sends a string as a response.
</summary>
</member>
<member name="M:Electron.Protocol.interceptStreamProtocol``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.InterceptStreamProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Fable.Core.U2{Node.Stream.Readable{``0},Electron.StreamProtocolResponse{``0}},Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit}})">
<summary>
 Same as protocol.registerStreamProtocol, except that it replaces an
 existing protocol handler.
</summary>
</member>
<member name="M:Electron.Protocol.interceptHttpProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.InterceptHttpProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.RedirectRequest,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Intercepts `scheme` protocol and uses `handler` as the protocol&apos;s new
 handler which sends a new HTTP request as a response.
</summary>
</member>
<member name="M:Electron.Protocol.interceptFileProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.InterceptFileProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Intercepts `scheme` protocol and uses `handler` as the protocol&apos;s new
 handler which sends a file as a response.
</summary>
</member>
<member name="M:Electron.Protocol.interceptBufferProtocol(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.InterceptBufferProtocolRequest,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Node.Buffer.Buffer,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{Node.Base.Error},Microsoft.FSharp.Core.Unit}})">
<summary>
 Intercepts `scheme` protocol and uses `handler` as the protocol&apos;s new
 handler which sends a Buffer as a response.
</summary>
</member>
<member name="P:Electron.StringProtocolResponse.mimeType(System.String)">
<summary>
 MIME type of the response.
</summary>
</member>
<member name="P:Electron.StringProtocolResponse.data(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 A string representing the response body.
</summary>
</member>
<member name="P:Electron.StringProtocolResponse.charset(System.String)">
<summary>
 Charset of the response.
</summary>
</member>
<member name="P:Electron.StringProtocolResponse.mimeType">
<summary>
 MIME type of the response.
</summary>
</member>
<member name="P:Electron.StringProtocolResponse.data">
<summary>
 A string representing the response body.
</summary>
</member>
<member name="P:Electron.StringProtocolResponse.charset">
<summary>
 Charset of the response.
</summary>
</member>
<member name="P:Electron.FilePathWithHeaders.path">
<summary>
 The path to the file to send.
</summary>
</member>
<member name="P:Electron.FilePathWithHeaders.headers">
<summary>
 Additional headers to be sent. All members must be string.
</summary>
</member>
<member name="P:Electron.Product.productIdentifier">
<summary>
 The string that identifies the product to the Apple App Store.
</summary>
</member>
<member name="P:Electron.Product.price">
<summary>
 The cost of the product in the local currency.
</summary>
</member>
<member name="P:Electron.Product.localizedTitle">
<summary>
 The name of the product.
</summary>
</member>
<member name="P:Electron.Product.localizedDescription">
<summary>
 A description of the product.
</summary>
</member>
<member name="P:Electron.Product.isDownloadable">
<summary>
 Indicates whether the App Store has downloadable content for this product.
 true if at least one file has been associated with the product.
</summary>
</member>
<member name="P:Electron.Product.formattedPrice">
<summary>
 The locale formatted price of the product.
</summary>
</member>
<member name="P:Electron.Product.contentVersion">
<summary>
 A string that identifies the version of the content.
</summary>
</member>
<member name="P:Electron.Product.contentLengths">
<summary>
 The total size of the content, in bytes.
</summary>
</member>
<member name="P:Electron.ProcessMetric.type">
<summary>
 Process type.
</summary>
</member>
<member name="P:Electron.ProcessMetric.sandboxed">
<summary>
 [macOS, Windows] Whether the process is sandboxed on OS level.
</summary>
</member>
<member name="P:Electron.ProcessMetric.pid">
<summary>
 Process id of the process.
</summary>
</member>
<member name="P:Electron.ProcessMetric.memory">
<summary>
 Memory information for the process.
</summary>
</member>
<member name="P:Electron.ProcessMetric.integrityLevel">
<summary>
 [Windows]
</summary>
</member>
<member name="P:Electron.ProcessMetric.creationTime">
<summary>
 Creation time for this process. The time is represented as number of
 milliseconds since epoch. Since the `pid` can be reused after a process
 dies, it is useful to use both the `pid` and the `creationTime` to
 uniquely identify a process.
</summary>
</member>
<member name="P:Electron.ProcessMetric.cpu">
<summary>
 CPU usage of the process.
</summary>
</member>
<member name="P:Electron.MemoryInfo.workingSetSize">
<summary>
 The amount of memory currently pinned to actual physical RAM.
</summary>
</member>
<member name="P:Electron.MemoryInfo.privateBytes">
<summary>
 [Windows] The amount of memory not shared by other processes, such as JS
 heap or HTML content.
</summary>
</member>
<member name="P:Electron.MemoryInfo.peakWorkingSetSize">
<summary>
 The maximum amount of memory that has ever been pinned to actual physical
 RAM.
</summary>
</member>
<member name="M:Electron.Process.takeHeapSnapshot(System.String)">
<summary>
 Takes a V8 heap snapshot and saves it to `filePath`.
</summary>
</member>
<member name="P:Electron.Process.traceProcessWarnings(System.Boolean)">
<summary>
 Controls whether or not process warnings printed to stderr include their
 stack trace. Setting this to true will print stack traces for process
 warnings (including deprecations). This property is instead of the
 --trace-warnings command line flag.
</summary>
</member>
<member name="P:Electron.Process.traceDeprecation(System.Boolean)">
<summary>
 Controls whether or not deprecations printed to stderr include their stack
 trace. Setting this to true will print stack traces for deprecations. This
 property is instead of the --trace-deprecation command line flag.
</summary>
</member>
<member name="P:Electron.Process.throwDeprecation(System.Boolean)">
<summary>
 Controls whether or not deprecation warnings will be thrown as exceptions.
 Setting this to true will throw errors for deprecations. This property is
 used instead of the --throw-deprecation command line flag.
</summary>
</member>
<member name="P:Electron.Process.noDeprecation(System.Boolean)">
<summary>
 Controls whether or not deprecation warnings are printed to stderr.
 Setting this to true will silence deprecation warnings. This property is
 used instead of the --no-deprecation command line flag.
</summary>
</member>
<member name="P:Electron.Process.noAsar(System.Boolean)">
<summary>
 Controls ASAR support inside your application. Setting this to true will
 disable the support for asar archives in Node&apos;s built-in modules.
</summary>
</member>
<member name="M:Electron.Process.setFdLimit(System.Int32)">
<summary>
 [macOS, Linux] Sets the file descriptor soft limit to maxDescriptors or
 the OS hard limit, whichever is lower for the current process.
</summary>
</member>
<member name="M:Electron.Process.removeListenerLoaded(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLoaded.
</summary>
</member>
<member name="M:Electron.Process.onceLoaded(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLoaded.
</summary>
</member>
<member name="M:Electron.Process.onLoaded(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when Electron has loaded its internal initialization script and is
 beginning to load the web page or the main script.

 It can be used by the preload script to add removed Node global symbols
 back to the global scope when node integration is turned off:
</summary>
</member>
<member name="M:Electron.Process.hang">
<summary>
 Causes the main thread of the current process hang.
</summary>
</member>
<member name="P:Electron.Process.windowsStore">
<summary>
 If the app is running as a Windows Store app (appx), this property is
 true, otherwise it is None.
</summary>
</member>
<member name="P:Electron.Process.type">
<summary>
 The current process&apos;s type.
</summary>
</member>
<member name="P:Electron.Process.traceProcessWarnings">
<summary>
 Controls whether or not process warnings printed to stderr include their
 stack trace. Setting this to true will print stack traces for process
 warnings (including deprecations). This property is instead of the
 --trace-warnings command line flag.
</summary>
</member>
<member name="P:Electron.Process.traceDeprecation">
<summary>
 Controls whether or not deprecations printed to stderr include their stack
 trace. Setting this to true will print stack traces for deprecations. This
 property is instead of the --trace-deprecation command line flag.
</summary>
</member>
<member name="P:Electron.Process.throwDeprecation">
<summary>
 Controls whether or not deprecation warnings will be thrown as exceptions.
 Setting this to true will throw errors for deprecations. This property is
 used instead of the --throw-deprecation command line flag.
</summary>
</member>
<member name="P:Electron.Process.sandboxed">
<summary>
 When the renderer process is sandboxed, this property is true, otherwise
 it is None.
</summary>
</member>
<member name="P:Electron.Process.resourcesPath">
<summary>
 The path to the resources directory.
</summary>
</member>
<member name="P:Electron.Process.noDeprecation">
<summary>
 Controls whether or not deprecation warnings are printed to stderr.
 Setting this to true will silence deprecation warnings. This property is
 used instead of the --no-deprecation command line flag.
</summary>
</member>
<member name="P:Electron.Process.noAsar">
<summary>
 Controls ASAR support inside your application. Setting this to true will
 disable the support for asar archives in Node&apos;s built-in modules.
</summary>
</member>
<member name="P:Electron.Process.mas">
<summary>
 For Mac App Store build, this property is true, for other builds it is
 None.
</summary>
</member>
<member name="P:Electron.Process.isMainFrame">
<summary>
 true when the current renderer context is the &quot;main&quot; renderer frame. If
 you want the ID of the current frame you should use webFrame.routingId.
</summary>
</member>
<member name="P:Electron.Process.defaultApp">
<summary>
 When app is started by being passed as parameter to the default app, this
 property is Some true in the main process, otherwise it is None.
</summary>
</member>
<member name="M:Electron.Process.getSystemVersion">
<summary>
 Returns the version of the host operating system.

 Note: It returns the actual operating system version instead of kernel
 version on macOS unlike `os.release()`.
</summary>
</member>
<member name="M:Electron.Process.getSystemMemoryInfo">
<summary>
 Returns an object giving memory usage statistics about the entire  Note
 that all statistics are reported in Kilobytes.
</summary>
</member>
<member name="M:Electron.Process.getProcessMemoryInfo">
<summary>
 Returns an object giving memory usage statistics about the current
 process. Note that all statistics are reported in Kilobytes. This api
 should be called after app ready.
</summary>
</member>
<member name="M:Electron.Process.getIOCounters">
<summary>
 [Windows, Linux]
</summary>
</member>
<member name="M:Electron.Process.getHeapStatistics">
<summary>
 Returns an object with V8 heap statistics. Note that all statistics are
 reported in Kilobytes.
</summary>
</member>
<member name="M:Electron.Process.getCreationTime">
<summary>
 Indicates the creation time of the application. The time is represented as
 number of milliseconds since epoch. It returns None if it is unable to get
 the process creation time.
</summary>
</member>
<member name="M:Electron.Process.getBlinkMemoryInfo">
<summary>
 Returns an object with Blink memory information. It can be useful for
 debugging rendering / DOM related memory issues. Note that all values are
 reported in Kilobytes.
</summary>
</member>
<member name="M:Electron.Process.crash">
<summary>
 Causes the main thread of the current process crash.
</summary>
</member>
<member name="M:Electron.Process.addListenerLoaded(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLoaded.
</summary>
</member>
<member name="P:Electron.ProcessVersions.electron">
<summary>
 Electron&apos;s version string.
</summary>
</member>
<member name="P:Electron.ProcessVersions.chrome">
<summary>
 Chrome&apos;s version string.
</summary>
</member>
<member name="T:Electron.ProcessType.Worker">
<summary>
 A web worker.
</summary>
</member>
<member name="T:Electron.ProcessType.Renderer">
<summary>
 A renderer process.
</summary>
</member>
<member name="T:Electron.ProcessType.Browser">
<summary>
 The main process.
</summary>
</member>
<member name="P:Electron.PrinterInfo.status">
<summary>
 The current status of the printer. The number means different things on different
 platforms: on Windows it&apos;s potential values can be found
 [here](https://docs.microsoft.com/en-us/windows/win32/printdocs/printer-info-2), and
 on Linux and macOS they can be found [here](https://www.cups.org/doc/cupspm.html).
</summary>
</member>
<member name="P:Electron.PrinterInfo.options">
<summary>
 An object containing a variable number of platform-specific printer information.
</summary>
</member>
<member name="P:Electron.PrinterInfo.name">
<summary>
 The name of the printer as understood by the OS.
</summary>
</member>
<member name="P:Electron.PrinterInfo.isDefault">
<summary>
 Whether or not a given printer is set as the default printer on the OS.
</summary>
</member>
<member name="P:Electron.PrinterInfo.displayName">
<summary>
 The name of the printer as shown in Print Preview.
</summary>
</member>
<member name="P:Electron.PrinterInfo.description">
<summary>
 A longer description of the printer&apos;s type.
</summary>
</member>
<member name="M:Electron.PowerSaveBlocker.stop(System.Int32)">
<summary>
 Stops the specified power save blocker.
</summary>
</member>
<member name="M:Electron.PowerSaveBlocker.start(Electron.PowerSaveBlockerType)">
<summary>
 Starts preventing the system from entering lower-power mode. Returns an
 integer identifying the power save blocker.

 Note: PowerSaveBlockerType.PreventDisplaySleep has higher precedence over
 PowerSaveBlockerType.PreventAppSuspension. Only the highest precedence
 type takes effect. In other words, PreventDisplaySleep always takes
 precedence over PreventAppSuspension.

 For example, an API calling A requests for PreventAppSuspension, and
 another calling B requests for PreventDisplaySleep. PreventDisplaySleep
 will be used until B stops its request. After that, PreventAppSuspension
 is used.
</summary>
</member>
<member name="M:Electron.PowerSaveBlocker.isStarted(System.Int32)">
<summary>
 Indicates whether the corresponding powerSaveBlocker has started.
</summary>
</member>
<member name="T:Electron.PowerSaveBlockerType.PreventDisplaySleep">
<summary>
 Prevent the display from going to sleep. Keeps system and screen active.
 Example use case: playing video.
</summary>
</member>
<member name="T:Electron.PowerSaveBlockerType.PreventAppSuspension">
<summary>
 Prevent the application from being suspended. Keeps system active but
 allows screen to be turned off. Example use cases: downloading a file or
 playing audio.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerUnlockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnlockScreen.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerSuspend(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSuspend.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerShutdown(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShutdown.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerResume(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResume.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerOnBattery(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onOnBattery.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerOnAc(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onOnAc.
</summary>
</member>
<member name="M:Electron.PowerMonitor.removeListenerLockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLockScreen.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceUnlockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnlockScreen.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceSuspend(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSuspend.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceShutdown(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShutdown.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceResume(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResume.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceOnBattery(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onOnBattery.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceOnAc(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onOnAc.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onceLockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLockScreen.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onUnlockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS, Windows] Emitted as soon as the systems screen is unlocked.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onSuspend(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the system is suspending.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onShutdown(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Linux, macOS] Emitted when the system is about to reboot or shut down. If
 the event handler invokes e.preventDefault(), Electron will attempt to
 delay system shutdown in order for the app to exit cleanly. If
 e.preventDefault() is called, the app should exit as soon as possible by
 calling something like app.quit().
</summary>
</member>
<member name="M:Electron.PowerMonitor.onResume(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when system is resuming.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onOnBattery(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Emitted when system changes to battery power.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onOnAc(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Emitted when the system changes to AC power.
</summary>
</member>
<member name="M:Electron.PowerMonitor.onLockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS, Windows] Emitted when the system is about to lock the screen.
</summary>
</member>
<member name="M:Electron.PowerMonitor.getSystemIdleTime">
<summary>
 Calculate system idle time in seconds.
</summary>
</member>
<member name="M:Electron.PowerMonitor.getSystemIdleState(System.Int32)">
<summary>
 Calculate the system idle state. idleThreshold is the amount of time (in
 seconds) before considered idle.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerUnlockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnlockScreen.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerSuspend(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSuspend.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerShutdown(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShutdown.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerResume(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResume.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerOnBattery(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onOnBattery.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerOnAc(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onOnAc.
</summary>
</member>
<member name="M:Electron.PowerMonitor.addListenerLockScreen(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLockScreen.
</summary>
</member>
<member name="T:Electron.PowerIdleState.Locked">
<summary>
 Available on supported systems only.
</summary>
</member>
<member name="P:Electron.NotificationAction.type(Electron.NotificationActionType)">
<summary>
 The type of action, can be `button`.
</summary>
</member>
<member name="P:Electron.NotificationAction.text(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The label for the given action.
</summary>
</member>
<member name="P:Electron.NotificationAction.type">
<summary>
 The type of action, can be `button`.
</summary>
</member>
<member name="P:Electron.NotificationAction.text">
<summary>
 The label for the given action.
</summary>
</member>
<member name="M:Electron.NotificationStatic.isSupported">
<summary>
 Indicates whether or not desktop notifications are supported on the
 current system
</summary>
</member>
<member name="M:Electron.Notification.show">
<summary>
 Immediately shows the notification to the user, please note this means
 unlike the HTML5 Notification implementation, instantiating a new
 Notification does not immediately show it to the user, you need to call
 this method before the OS will display it.

 If the notification has been shown before, this method will dismiss the
 previously shown notification and create a new one with identical
 properties.
</summary>
</member>
<member name="P:Electron.Notification.urgency(Electron.NotificationUrgency)">
<summary>
 [Linux] The urgency level of the notification. Default is NotificationUrgency.Low.
 See [NotifyUrgency](https://developer.gnome.org/notification-spec/#urgency-levels)
 for more information.
</summary>
</member>
<member name="P:Electron.Notification.title(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The title of the notification.
</summary>
</member>
<member name="P:Electron.Notification.timeoutType(Electron.NotificationTimeoutType)">
<summary>
 [Linux, Windows] The type of timeout duration for the notification. If set to
 NotificationTimeoutType.Never, the notification never expires. It stays open until
 closed by the calling API or the user.
</summary>
</member>
<member name="P:Electron.Notification.subtitle(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The subtitle of the notification.
</summary>
</member>
<member name="P:Electron.Notification.sound(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The sound of the notification.
</summary>
</member>
<member name="P:Electron.Notification.silent(System.Boolean)">
<summary>
 Indicates whether the notification is silent.
</summary>
</member>
<member name="P:Electron.Notification.replyPlaceholder(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The reply placeholder of the notification.
</summary>
</member>
<member name="P:Electron.Notification.hasReply(System.Boolean)">
<summary>
 Indicates whether the notification has a reply action.
</summary>
</member>
<member name="P:Electron.Notification.closeButtonText(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The close button text of the notification.
</summary>
</member>
<member name="P:Electron.Notification.body(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The body of the notification.
</summary>
</member>
<member name="P:Electron.Notification.actions(Electron.NotificationAction[])">
<summary>
 The actions of the notification.
</summary>
</member>
<member name="M:Electron.Notification.removeListenerShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShow.
</summary>
</member>
<member name="M:Electron.Notification.removeListenerReply(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onReply.
</summary>
</member>
<member name="M:Electron.Notification.removeListenerClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.Notification.removeListenerClick(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClick.
</summary>
</member>
<member name="M:Electron.Notification.removeListenerAction(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAction.
</summary>
</member>
<member name="M:Electron.Notification.onceShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShow.
</summary>
</member>
<member name="M:Electron.Notification.onceReply(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onReply.
</summary>
</member>
<member name="M:Electron.Notification.onceClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.Notification.onceClick(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClick.
</summary>
</member>
<member name="M:Electron.Notification.onceAction(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAction.
</summary>
</member>
<member name="M:Electron.Notification.onShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the notification is shown to the user, note this could be
 fired multiple times as a notification can be shown multiple times through
 the show() method.
</summary>
</member>
<member name="M:Electron.Notification.onReply(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the user clicks the &quot;Reply&quot; button on a notification
 with hasReply: true. The string contains the user input.
</summary>
</member>
<member name="M:Electron.Notification.onClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the notification is closed by manual intervention from the
 user.

 This event is not guaranteed to be emitted in all cases where the
 notification is closed.
</summary>
</member>
<member name="M:Electron.Notification.onClick(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the notification is clicked by the user.
</summary>
</member>
<member name="M:Electron.Notification.onAction(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Called with the index of the action that was activated.
</summary>
</member>
<member name="P:Electron.Notification.urgency">
<summary>
 [Linux] The urgency level of the notification. Default is NotificationUrgency.Low.
 See [NotifyUrgency](https://developer.gnome.org/notification-spec/#urgency-levels)
 for more information.
</summary>
</member>
<member name="P:Electron.Notification.title">
<summary>
 The title of the notification.
</summary>
</member>
<member name="P:Electron.Notification.timeoutType">
<summary>
 [Linux, Windows] The type of timeout duration for the notification. If set to
 NotificationTimeoutType.Never, the notification never expires. It stays open until
 closed by the calling API or the user.
</summary>
</member>
<member name="P:Electron.Notification.subtitle">
<summary>
 The subtitle of the notification.
</summary>
</member>
<member name="P:Electron.Notification.sound">
<summary>
 The sound of the notification.
</summary>
</member>
<member name="P:Electron.Notification.silent">
<summary>
 Indicates whether the notification is silent.
</summary>
</member>
<member name="P:Electron.Notification.replyPlaceholder">
<summary>
 The reply placeholder of the notification.
</summary>
</member>
<member name="P:Electron.Notification.hasReply">
<summary>
 Indicates whether the notification has a reply action.
</summary>
</member>
<member name="P:Electron.Notification.closeButtonText">
<summary>
 The close button text of the notification.
</summary>
</member>
<member name="P:Electron.Notification.body">
<summary>
 The body of the notification.
</summary>
</member>
<member name="P:Electron.Notification.actions">
<summary>
 The actions of the notification.
</summary>
</member>
<member name="M:Electron.Notification.close">
<summary>
 Dismisses the notification.
</summary>
</member>
<member name="M:Electron.Notification.addListenerShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShow.
</summary>
</member>
<member name="M:Electron.Notification.addListenerReply(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onReply.
</summary>
</member>
<member name="M:Electron.Notification.addListenerClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.Notification.addListenerClick(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClick.
</summary>
</member>
<member name="M:Electron.Notification.addListenerAction(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAction.
</summary>
</member>
<member name="M:Electron.NetLog.stopLogging">
<summary>
 Stops recording network events. If not called, net logging will
 automatically end when app quits.

 Returns a promise that resolves with a file path to which network logs
 were recorded.
</summary>
</member>
<member name="M:Electron.NetLog.startLogging(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.NetLogStartLoggingOptions})">
<summary>
 Starts recording network events to `path`.

 The returned promise resolves when the net log has begun recording.
</summary>
</member>
<member name="P:Electron.NetLog.currentlyLoggingPath">
<summary>
 The path to the current log file.
</summary>
</member>
<member name="P:Electron.NetLog.currentlyLogging">
<summary>
 Indicates whether network logs are recorded.
</summary>
</member>
<member name="P:Electron.NetLogStartLoggingOptions.maxFileSize(System.Double)">
<summary>
 When the log grows beyond this size, logging will automatically stop.
 Defaults to unlimited.
</summary>
</member>
<member name="P:Electron.NetLogStartLoggingOptions.captureMode(Electron.NetLogCaptureMode)">
<summary>
 What kinds of data should be captured. By default, only metadata about
 requests will be captured. Setting this to
 `NetLogCaptureMode.IncludeSensitive` will include cookies and
 authentication data. Setting it to `NetLogCaptureMode.Everything` will
 include all bytes transferred on sockets.
</summary>
</member>
<member name="P:Electron.NetLogStartLoggingOptions.maxFileSize">
<summary>
 When the log grows beyond this size, logging will automatically stop.
 Defaults to unlimited.
</summary>
</member>
<member name="P:Electron.NetLogStartLoggingOptions.captureMode">
<summary>
 What kinds of data should be captured. By default, only metadata about
 requests will be captured. Setting this to
 `NetLogCaptureMode.IncludeSensitive` will include cookies and
 authentication data. Setting it to `NetLogCaptureMode.Everything` will
 include all bytes transferred on sockets.
</summary>
</member>
<member name="M:Electron.Net.request(System.String)">
<summary>
 Creates a ClientRequest instance using the provided options which are
 directly forwarded to the ClientRequest constructor. The net.request
 method would be used to issue both secure and insecure HTTP requests
 according to the specified protocol scheme in the options object.
</summary>
</member>
<member name="M:Electron.Net.request(Electron.ClientRequestOptions)">
<summary>
 Creates a ClientRequest instance using the provided options which are
 directly forwarded to the ClientRequest constructor. The net.request
 method would be used to issue both secure and insecure HTTP requests
 according to the specified protocol scheme in the options object.
</summary>
</member>
<member name="P:Electron.NativeTheme.themeSource(Electron.ThemeSource)">
<summary>
 Override the value that Chromium has chosen to use internally.

 Setting this property to system will remove the override and everything
 will be reset to the OS default. By default `themeSource` is `system`.

 Setting this to ThemeSource.Dark has the following effects:

  - `nativeTheme.shouldUseDarkColors` will be `false` when accessed
  - Any UI Electron renderers on Linux and Windows including context menus, devtools, etc. will use the light UI.
  - Any UI the OS renders on macOS including menus, window frames, etc. will use the light UI.
  - The `prefers-color-scheme` CSS query will match `light` mode.
  - The `updated` event will be emitted

 Setting this to ThemeSource.Light has the following effects:

  - `nativeTheme.shouldUseDarkColors` will be `true` when accessed
  - Any UI Electron renderers on Linux and Windows including context menus, devtools, etc. will use the dark UI.
  - Any UI the OS renders on macOS including menus, window frames, etc. will use the dark UI.
  - The `prefers-color-scheme` CSS query will match `dark` mode.
  - The `updated` event will be emitted

 The usage of this property should align with a classic &quot;dark mode&quot; state machine in your application where the user has three options.

  - Follow OS --&gt; `ThemeSource.System`
  - Dark Mode --&gt; `ThemeSource.Dark`
  - Light Mode --&gt; `ThemeSource.Light`

 Your application should then always use `shouldUseDarkColors` to
 determine what CSS to apply.
</summary>
</member>
<member name="M:Electron.NativeTheme.removeListenerUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdated.
</summary>
</member>
<member name="M:Electron.NativeTheme.onceUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdated.
</summary>
</member>
<member name="M:Electron.NativeTheme.onUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the notification is shown to the user, note this could be
 fired multiple times as a notification can be shown multiple times through
 the show() method.
</summary>
</member>
<member name="P:Electron.NativeTheme.themeSource">
<summary>
 Override the value that Chromium has chosen to use internally.

 Setting this property to system will remove the override and everything
 will be reset to the OS default. By default `themeSource` is `system`.

 Setting this to ThemeSource.Dark has the following effects:

  - `nativeTheme.shouldUseDarkColors` will be `false` when accessed
  - Any UI Electron renderers on Linux and Windows including context menus, devtools, etc. will use the light UI.
  - Any UI the OS renders on macOS including menus, window frames, etc. will use the light UI.
  - The `prefers-color-scheme` CSS query will match `light` mode.
  - The `updated` event will be emitted

 Setting this to ThemeSource.Light has the following effects:

  - `nativeTheme.shouldUseDarkColors` will be `true` when accessed
  - Any UI Electron renderers on Linux and Windows including context menus, devtools, etc. will use the dark UI.
  - Any UI the OS renders on macOS including menus, window frames, etc. will use the dark UI.
  - The `prefers-color-scheme` CSS query will match `dark` mode.
  - The `updated` event will be emitted

 The usage of this property should align with a classic &quot;dark mode&quot; state machine in your application where the user has three options.

  - Follow OS --&gt; `ThemeSource.System`
  - Dark Mode --&gt; `ThemeSource.Dark`
  - Light Mode --&gt; `ThemeSource.Light`

 Your application should then always use `shouldUseDarkColors` to
 determine what CSS to apply.
</summary>
</member>
<member name="P:Electron.NativeTheme.shouldUseInvertedColorScheme">
<summary>
 Indicates whether the OS / Chromium currently has an inverted color scheme
 or is being instructed to use an inverted color scheme.
</summary>
</member>
<member name="P:Electron.NativeTheme.shouldUseHighContrastColors">
<summary>
 Indicates whether the OS / Chromium currently has high-contrast mode
 enabled or is being instructed to show a high-constrast UI.
</summary>
</member>
<member name="P:Electron.NativeTheme.shouldUseDarkColors">
<summary>
 Indicates whether the OS / Chromium currently has a dark mode enabled or
 is being instructed to show a dark-style UI. If you want to modify this
 value you should use `nativeTheme.themeSource`.
</summary>
</member>
<member name="M:Electron.NativeTheme.addListenerUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdated.
</summary>
</member>
<member name="M:Electron.NativeImageStatic.createFromPath(System.String)">
<summary>
 Creates a new NativeImage instance from a file located at `path`. This
 method returns an empty image if the path does not exist, cannot be read,
 or is not a valid image.
</summary>
</member>
<member name="M:Electron.NativeImageStatic.createFromNamedImage(System.String,System.Double,System.Double,System.Double)">
<summary>
 [macOS] Creates a new NativeImage instance from the NSImage that maps to
 the given image name. See here for a list of possible values:
 https://developer.apple.com/documentation/appkit/nsimagename?language=objc

 The first hslShift number is the absolute hue value for the image. 0 and 1
 map to 0 and 360 on the hue color wheel (red).

 The second hslShift number is a saturation shift for the image, with the
 following key values: 0 = remove all color. 0.5 = leave unchanged. 1 =
 fully saturate the image.

 The third hslShift number is a lightness shift for the image, with the
 following key values: 0 = remove all lightness (make all pixels black).
 0.5 = leave unchanged. 1 = full lightness (make all pixels white).

 In some cases, the NSImageName doesn&apos;t match its string representation;
 one example of this is NSFolderImageName, whose string representation
 would actually be NSFolder. Therefore, you&apos;ll need to determine the
 correct string representation for your image before passing it in. See the
 Electron documentation of this method for more information.
</summary>
</member>
<member name="M:Electron.NativeImageStatic.createFromDataURL(System.String)">
<summary>
 Creates a new NativeImage instance from `dataURL`.
</summary>
</member>
<member name="M:Electron.NativeImageStatic.createFromBuffer(Node.Buffer.Buffer,Microsoft.FSharp.Core.FSharpOption{Electron.NativeImageFromBufferOptions})">
<summary>
 Creates a new NativeImage instance from buffer. Tries to decode as PNG or
 JPEG first.
</summary>
</member>
<member name="M:Electron.NativeImageStatic.createFromBitmap(Node.Buffer.Buffer,Microsoft.FSharp.Core.FSharpOption{Electron.NativeImageFromBufferOptions})">
<summary>
 Creates a new `NativeImage` instance from `buffer` that contains the raw
 bitmap pixel data returned by `toBitmap()`. The specific format is
 platform-dependent.
</summary>
</member>
<member name="M:Electron.NativeImageStatic.createEmpty">
<summary>
 Creates an empty NativeImage instance.
</summary>
</member>
<member name="M:Electron.NativeImage.toPNG(Microsoft.FSharp.Core.FSharpOption{Electron.ToPNGOptions})">
<summary>
 Returns a Buffer that contains the image&apos;s PNG encoded data.
</summary>
</member>
<member name="M:Electron.NativeImage.toJPEG(System.Int32)">
<summary>
 Returns a Buffer that contains the image&apos;s JPEG encoded data. `quality`
 must be between 0 and 100.
</summary>
</member>
<member name="M:Electron.NativeImage.toDataURL(Microsoft.FSharp.Core.FSharpOption{Electron.ToDataURLOptions})">
<summary>
 Returns the data URL of the image.
</summary>
</member>
<member name="M:Electron.NativeImage.toBitmap(Microsoft.FSharp.Core.FSharpOption{Electron.ToBitmapOptions})">
<summary>
 Returns a Buffer that contains a copy of the image&apos;s raw bitmap pixel
 data.
</summary>
</member>
<member name="P:Electron.NativeImage.isMacTemplateImage(System.Boolean)">
<summary>
 Determines whether the image is considered a [template
 image](https://developer.apple.com/documentation/appkit/nsimage/1520017-template).

 Please note that this property only has an effect on macOS.
</summary>
</member>
<member name="M:Electron.NativeImage.setTemplateImage(System.Boolean)">
<summary>
 Marks the image as a template image.
</summary>
</member>
<member name="M:Electron.NativeImage.resize(Electron.ResizeOptions)">
<summary>
 Returns a resized image.

 If only the height or the width are specified then the current aspect
 ratio will be preserved in the resized image.
</summary>
</member>
<member name="M:Electron.NativeImage.isTemplateImage">
<summary>
 Indicates whether the image is a template image.
</summary>
</member>
<member name="M:Electron.NativeImage.isEmpty">
<summary>
 Indicates whether the image is empty.
</summary>
</member>
<member name="P:Electron.NativeImage.isMacTemplateImage">
<summary>
 Determines whether the image is considered a [template
 image](https://developer.apple.com/documentation/appkit/nsimage/1520017-template).

 Please note that this property only has an effect on macOS.
</summary>
</member>
<member name="M:Electron.NativeImage.getNativeHandle">
<summary>
 Returns a Buffer that stores C pointer to underlying native handle of the
 image. On macOS, a pointer to NSImage instance would be returned.

 [macOS] Notice that the returned pointer is a weak pointer to the
 underlying native image instead of a copy, so you must ensure that the
 associated nativeImage instance is kept around.
</summary>
</member>
<member name="M:Electron.NativeImage.getBitmap(Microsoft.FSharp.Core.FSharpOption{Electron.GetBitmapOptions})">
<summary>
 Returns a Buffer that contains the image&apos;s raw bitmap pixel data.

 The difference between getBitmap() and toBitmap() is, getBitmap() does not
 copy the bitmap data, so you have to use the returned Buffer immediately
 in current event loop tick, otherwise the data might be changed or
 destroyed.
</summary>
</member>
<member name="M:Electron.NativeImage.getAspectRatio">
<summary>
 Returns the image&apos;s aspect ratio.
</summary>
</member>
<member name="M:Electron.NativeImage.crop(Electron.Rectangle)">
<summary>
 Returns a cropped image.
</summary>
</member>
<member name="M:Electron.NativeImage.addRepresentation(Electron.AddRepresentationOptions)">
<summary>
 Add an image representation for a specific scale factor. This can be used
 to explicitly add different scale factor representations to an image. This
 can be called on empty images.
</summary>
</member>
<member name="P:Electron.MimeTypedBuffer.mimeType(System.String)">
<summary>
 The mimeType of the Buffer that you are sending.
</summary>
</member>
<member name="P:Electron.MimeTypedBuffer.data(Node.Buffer.Buffer)">
<summary>
 The actual Buffer content.
</summary>
</member>
<member name="P:Electron.MimeTypedBuffer.mimeType">
<summary>
 The mimeType of the Buffer that you are sending.
</summary>
</member>
<member name="P:Electron.MimeTypedBuffer.data">
<summary>
 The actual Buffer content.
</summary>
</member>
<member name="P:Electron.MenuItem.visible(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Indicates whether the item is visible, this property can be dynamically
 changed.
</summary>
</member>
<member name="P:Electron.MenuItem.type(Microsoft.FSharp.Core.FSharpOption{Electron.MenuItemType})">
<summary>
 The type of the item.
</summary>
</member>
<member name="P:Electron.MenuItem.toolTip(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 [macOS] The item&apos;s hover text.
</summary>
</member>
<member name="P:Electron.MenuItem.submenu(Microsoft.FSharp.Core.FSharpOption{Electron.Menu})">
<summary>
 The menu item&apos;s submenu, if present.
</summary>
</member>
<member name="P:Electron.MenuItem.sublabel(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The item&apos;s sublabel.
</summary>
</member>
<member name="P:Electron.MenuItem.role(Microsoft.FSharp.Core.FSharpOption{Electron.MenuItemRole})">
<summary>
 The item&apos;s role, if set.
</summary>
</member>
<member name="P:Electron.MenuItem.registerAccelerator(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Indicates if the accelerator should be registered with the system or just displayed.
 This property can be dynamically changed.
</summary>
</member>
<member name="P:Electron.MenuItem.menu(Microsoft.FSharp.Core.FSharpOption{Electron.Menu})">
<summary>
 A Menu that the item is a part of.
</summary>
</member>
<member name="P:Electron.MenuItem.label(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The item&apos;s visible label.
</summary>
</member>
<member name="P:Electron.MenuItem.id(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The item&apos;s unique id, this property can be dynamically changed.
</summary>
</member>
<member name="P:Electron.MenuItem.icon(Microsoft.FSharp.Core.FSharpOption{Fable.Core.U2{Electron.NativeImage,System.String}})">
<summary>
 The item&apos;s icon, if set.
</summary>
</member>
<member name="P:Electron.MenuItem.enabled(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Indicates whether the item is enabled, this property can be dynamically
 changed.
</summary>
</member>
<member name="P:Electron.MenuItem.commandId(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 An item&apos;s sequential unique id.
</summary>
</member>
<member name="P:Electron.MenuItem.click(Microsoft.FSharp.Core.FSharpOption{System.Action{Electron.KeyboardEvent,Electron.BrowserWindow,Electron.WebContents}})">
<summary>
 Fired when the MenuItem receives a click event. It can be called with
 menuItem.click(event, focusedWindow, focusedWebContents).
</summary>
</member>
<member name="P:Electron.MenuItem.checked(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Indicates whether the item is checked, this property can be dynamically
 changed.

 A MenuItemType.Checkbox menu item will toggle the `checked` property on
 and off when selected.

 A MenuItemType.Radio menu item will turn on its `checked` property when
 clicked, and will turn off that property for all adjacent items in the
 same menu.

 You can add a `click` function for additional behavior.
</summary>
</member>
<member name="P:Electron.MenuItem.accelerator(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The item&apos;s accelerator, if set.
</summary>
</member>
<member name="P:Electron.MenuItem.visible">
<summary>
 Indicates whether the item is visible, this property can be dynamically
 changed.
</summary>
</member>
<member name="P:Electron.MenuItem.type">
<summary>
 The type of the item.
</summary>
</member>
<member name="P:Electron.MenuItem.toolTip">
<summary>
 [macOS] The item&apos;s hover text.
</summary>
</member>
<member name="P:Electron.MenuItem.submenu">
<summary>
 The menu item&apos;s submenu, if present.
</summary>
</member>
<member name="P:Electron.MenuItem.sublabel">
<summary>
 The item&apos;s sublabel.
</summary>
</member>
<member name="P:Electron.MenuItem.role">
<summary>
 The item&apos;s role, if set.
</summary>
</member>
<member name="P:Electron.MenuItem.registerAccelerator">
<summary>
 Indicates if the accelerator should be registered with the system or just displayed.
 This property can be dynamically changed.
</summary>
</member>
<member name="P:Electron.MenuItem.menu">
<summary>
 A Menu that the item is a part of.
</summary>
</member>
<member name="P:Electron.MenuItem.label">
<summary>
 The item&apos;s visible label.
</summary>
</member>
<member name="P:Electron.MenuItem.id">
<summary>
 The item&apos;s unique id, this property can be dynamically changed.
</summary>
</member>
<member name="P:Electron.MenuItem.icon">
<summary>
 The item&apos;s icon, if set.
</summary>
</member>
<member name="P:Electron.MenuItem.enabled">
<summary>
 Indicates whether the item is enabled, this property can be dynamically
 changed.
</summary>
</member>
<member name="P:Electron.MenuItem.commandId">
<summary>
 An item&apos;s sequential unique id.
</summary>
</member>
<member name="P:Electron.MenuItem.click">
<summary>
 Fired when the MenuItem receives a click event. It can be called with
 menuItem.click(event, focusedWindow, focusedWebContents).
</summary>
</member>
<member name="P:Electron.MenuItem.checked">
<summary>
 Indicates whether the item is checked, this property can be dynamically
 changed.

 A MenuItemType.Checkbox menu item will toggle the `checked` property on
 and off when selected.

 A MenuItemType.Radio menu item will turn on its `checked` property when
 clicked, and will turn off that property for all adjacent items in the
 same menu.

 You can add a `click` function for additional behavior.
</summary>
</member>
<member name="P:Electron.MenuItem.accelerator">
<summary>
 The item&apos;s accelerator, if set.
</summary>
</member>
<member name="M:Electron.MenuStatic.sendActionToFirstResponder(System.String)">
<summary>
 [macOS] Sends the `action` to the first responder of application. This is
 used for emulating default macOS menu behaviors. Usually you would use the
 `role` property of a MenuItem.

 See the macOS Cocoa Event Handling Guide for more information on macOS&apos;
 native actions:
 https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/EventOverview/EventArchitecture/EventArchitecture.html#//apple_ref/doc/uid/10000060i-CH3-SW7
</summary>
</member>
<member name="M:Electron.MenuStatic.buildFromTemplate(Fable.Core.U2{Electron.MenuItemOptions,Electron.MenuItem}[])">
<summary>
 Generally, the template is an array of MenuItemOptions for constructing a
 MenuItem.

 You can also attach other fields to the elements of the template and they
 will become properties of the constructed menu items.
</summary>
</member>
<member name="P:Electron.Menu.items(Electron.MenuItem[])">
<summary>
 Returns the menu&apos;s items.
</summary>
</member>
<member name="M:Electron.Menu.removeListenerMenuWillShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMenuWillShow.
</summary>
</member>
<member name="M:Electron.Menu.removeListenerMenuWillClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMenuWillClose.
</summary>
</member>
<member name="M:Electron.Menu.popup(Microsoft.FSharp.Core.FSharpOption{Electron.PopupOptions})">
<summary>
 Pops up this menu as a context menu in the BrowserWindow.
</summary>
</member>
<member name="M:Electron.Menu.onceMenuWillShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMenuWillShow.
</summary>
</member>
<member name="M:Electron.Menu.onceMenuWillClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMenuWillClose.
</summary>
</member>
<member name="M:Electron.Menu.onMenuWillShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when menu.popup() is called.
</summary>
</member>
<member name="M:Electron.Menu.onMenuWillClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when a popup is closed either manually or with menu.closePopup().
</summary>
</member>
<member name="M:Electron.Menu.insert(System.Int32,Electron.MenuItem)">
<summary>
 Inserts the menuItem to the `pos` position of the menu.
</summary>
</member>
<member name="P:Electron.Menu.items">
<summary>
 Returns the menu&apos;s items.
</summary>
</member>
<member name="M:Electron.Menu.getMenuItemById(System.String)">
<summary>
 Returns the item with the specified id.
</summary>
</member>
<member name="M:Electron.Menu.closePopup(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserWindow})">
<summary>
 Closes the context menu in the browserWindow.
</summary>
</member>
<member name="M:Electron.Menu.append(Electron.MenuItem)">
<summary>
 Appends the menuItem to the menu.
</summary>
</member>
<member name="M:Electron.Menu.addListenerMenuWillShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMenuWillShow.
</summary>
</member>
<member name="M:Electron.Menu.addListenerMenuWillClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMenuWillClose.
</summary>
</member>
<member name="P:Electron.JumpListItem.workingDirectory(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The working directory. Default is empty.
</summary>
</member>
<member name="P:Electron.JumpListItem.title(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The text to be displayed for the item in the Jump List. Should only be set
 if `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.program(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Path of the program to execute, usually you should specify
 `process.execPath` which opens the current program. Should only be set if
 `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.path(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Path of the file to open, should only be set if `type` is
 JumpListItemType.File.
</summary>
</member>
<member name="P:Electron.JumpListItem.iconPath(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The absolute path to an icon to be displayed in a Jump List, which can be
 an arbitrary resource file that contains an icon (e.g. .ico, .exe, .dll).
 You can usually specify `process.execPath` to show the program icon.
</summary>
</member>
<member name="P:Electron.JumpListItem.iconIndex(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 The index of the icon in the resource file. If a resource file contains
 multiple icons this value can be used to specify the zero-based index of
 the icon that should be displayed for this task. If a resource file
 contains only one icon, this property should be set to zero.
</summary>
</member>
<member name="P:Electron.JumpListItem.description(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Description of the task (displayed in a tooltip). Should only be set if
 `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.args(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 The command line arguments when `program` is executed. Should only be set
 if `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.workingDirectory">
<summary>
 The working directory. Default is empty.
</summary>
</member>
<member name="P:Electron.JumpListItem.title">
<summary>
 The text to be displayed for the item in the Jump List. Should only be set
 if `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.program">
<summary>
 Path of the program to execute, usually you should specify
 `process.execPath` which opens the current program. Should only be set if
 `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.path">
<summary>
 Path of the file to open, should only be set if `type` is
 JumpListItemType.File.
</summary>
</member>
<member name="P:Electron.JumpListItem.iconPath">
<summary>
 The absolute path to an icon to be displayed in a Jump List, which can be
 an arbitrary resource file that contains an icon (e.g. .ico, .exe, .dll).
 You can usually specify `process.execPath` to show the program icon.
</summary>
</member>
<member name="P:Electron.JumpListItem.iconIndex">
<summary>
 The index of the icon in the resource file. If a resource file contains
 multiple icons this value can be used to specify the zero-based index of
 the icon that should be displayed for this task. If a resource file
 contains only one icon, this property should be set to zero.
</summary>
</member>
<member name="P:Electron.JumpListItem.description">
<summary>
 Description of the task (displayed in a tooltip). Should only be set if
 `type` is JumpListItemType.Task.
</summary>
</member>
<member name="P:Electron.JumpListItem.args">
<summary>
 The command line arguments when `program` is executed. Should only be set
 if `type` is JumpListItemType.Task.
</summary>
</member>
<member name="T:Electron.JumpListItemType.File">
<summary>
 A file link will open a file using the app that created the Jump List, for
 this to work the app must be registered as a handler for the file type
 (though it doesn&apos;t have to be the default handler).
</summary>
</member>
<member name="T:Electron.JumpListItemType.Separator">
<summary>
 Can be used to separate items in the standard Tasks category.
</summary>
</member>
<member name="T:Electron.JumpListItemType.Task">
<summary>
 A task will launch an app with specific arguments.
</summary>
</member>
<member name="P:Electron.JumpListCategory.name(System.String)">
<summary>
 Must be set if `type` JumpListCategoryType.Custom, otherwise it should be
 omitted.
</summary>
</member>
<member name="P:Electron.JumpListCategory.items(Electron.JumpListItem[])">
<summary>
 Must be set if `type` is JumpListCategoryType.Tasks or
 JumpListCategoryType.Custom, otherwise it should be omitted.
</summary>
</member>
<member name="P:Electron.JumpListCategory.name">
<summary>
 Must be set if `type` JumpListCategoryType.Custom, otherwise it should be
 omitted.
</summary>
</member>
<member name="P:Electron.JumpListCategory.items">
<summary>
 Must be set if `type` is JumpListCategoryType.Tasks or
 JumpListCategoryType.Custom, otherwise it should be omitted.
</summary>
</member>
<member name="T:Electron.JumpListCategoryType.Custom">
<summary>
 Displays tasks or file links. JumpListCategory.name must be set by the
 app.
</summary>
</member>
<member name="T:Electron.JumpListCategoryType.Recent">
<summary>
 Displays a list of files recently opened by the app. The name of the
 category and its items are set by Windows. Items may be added to this
 category indirectly using app.addRecentDocument(path).
</summary>
</member>
<member name="T:Electron.JumpListCategoryType.Frequent">
<summary>
 Displays a list of files frequently opened by the app. The name of the
 category and its items are set by Windows.
</summary>
</member>
<member name="T:Electron.JumpListCategoryType.Tasks">
<summary>
 Items in this category will be placed into the standard Tasks category.
 There can be only one such category, and it will always be displayed at
 the bottom of the Jump List.
</summary>
</member>
<member name="M:Electron.IpcRenderer.sendTo(System.Int32,System.String,System.Object[])">
<summary>
 Sends a message to a window with `webContentsId` via `channel`.
</summary>
</member>
<member name="M:Electron.IpcRenderer.sendSync(System.String,System.Object[])">
<summary>
 Send a message to the main process via `channel` and expect a result synchronously.
 Arguments will be serialized with the [Structured Clone
 Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm),
 just like
 [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage),
 so prototype chains will not be included. Sending Functions, Promises, Symbols,
 WeakMaps, or WeakSets will throw an exception.

 **NOTE**: Sending non-standard JavaScript types such as DOM objects or special
 Electron objects is deprecated, and will begin throwing an exception starting with
 Electron 9.

 The main process handles it by listening for `channel` with
 [`ipcMain`](https://www.electronjs.org/docs/api/ipc-main) module, and replies by
 setting `event.returnValue`.

 ⚠️ **WARNING**: Sending a synchronous message will block the whole renderer process
 until the reply is received, so use this method only as a last resort. It&apos;s much
 better to use the asynchronous version,
 [`invoke()`](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args).
</summary>
</member>
<member name="M:Electron.IpcRenderer.send(System.String,System.Object[])">
<summary>
 Send an asynchronous message to the main process via `channel`, along with
 arguments. Arguments will be serialized with the [Structured Clone
 Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm),
 just like
 [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage),
 so prototype chains will not be included. Sending Functions, Promises, Symbols,
 WeakMaps, or WeakSets will throw an exception.

 **NOTE**: Sending non-standard JavaScript types such as DOM objects or special
 Electron objects is deprecated, and will begin throwing an exception starting with
 Electron 9.

 The main process handles it by listening for `channel` with the
 [`ipcMain`](https://www.electronjs.org/docs/api/ipc-main) module.
</summary>
</member>
<member name="M:Electron.IpcRenderer.removeListener(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcRendererEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Removes the specified listener from the listener array for the specified
 channel.
</summary>
</member>
<member name="M:Electron.IpcRenderer.removeAllListeners(System.String)">
<summary>
 Removes all listeners, or those of the specified channel.
</summary>
</member>
<member name="M:Electron.IpcRenderer.once(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcRendererEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Adds a one time listener function for the event. This listener is invoked
 only the next time a message is sent to channel, after which it is
 removed.
</summary>
</member>
<member name="M:Electron.IpcRenderer.on(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcRendererEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Listens to channel, when a new message arrives listener would be called
 with listener(event, args...).
</summary>
</member>
<member name="M:Electron.IpcRenderer.invoke(System.String,System.Object[])">
<summary>
 Send a message to the main process via `channel` and expect a result asynchronously.
 Arguments will be serialized with the [Structured Clone
 Algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm),
 just like
 [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage),
 so prototype chains will not be included. Sending Functions, Promises, Symbols,
 WeakMaps, or WeakSets will throw an exception.

 **NOTE**: Sending non-standard JavaScript types such as DOM objects or special
 Electron objects is deprecated, and will begin throwing an exception starting with
 Electron 9.

 The main process should listen for `channel` with
 [`ipcMain.handle()`](https://www.electronjs.org/docs/api/ipc-main#ipcmainhandlechannel-listener).

 Returns a promise that resolves with the response from the main process.
</summary>
</member>
<member name="M:Electron.IpcMain.removeListener(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Removes the specified listener from the listener array for the specified
 channel.
</summary>
</member>
<member name="M:Electron.IpcMain.removeHandler(System.String)">
<summary>
 Removes any handler for `channel`, if present.
</summary>
</member>
<member name="M:Electron.IpcMain.removeAllListeners(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Removes listeners of the specified channel.
</summary>
</member>
<member name="M:Electron.IpcMain.once(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Adds a one time listener function for the event. This listener is invoked
 only the next time a message is sent to channel, after which it is
 removed.
</summary>
</member>
<member name="M:Electron.IpcMain.on(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Listens to channel, when a new message arrives listener would be called
 with listener(event, args...).
</summary>
</member>
<member name="M:Electron.IpcMain.handleOnce``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainInvokeEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Fable.Core.JS.Promise{``0}}})">
<summary>
 Handles a single `invoke`able IPC message, then removes the listener. See
 `handle`.
</summary>
</member>
<member name="M:Electron.IpcMain.handleOnce``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainInvokeEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],``0}})">
<summary>
 Handles a single `invoke`able IPC message, then removes the listener. See
 `handle`.
</summary>
</member>
<member name="M:Electron.IpcMain.handle``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainInvokeEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],Fable.Core.JS.Promise{``0}}})">
<summary>
 Adds a handler for an `invoke`able IPC. This handler will be called
 whenever a renderer calls `ipcRenderer.invoke(channel, ...args)`.

 If listener returns a `Promise`, the eventual result of the promise will
 be returned as a reply to the remote caller. Otherwise, the return value
 of the listener will be used as the value of the reply.

 The `event` that is passed as the first argument to the handler is the
 same as that passed to a regular event listener. It includes information
 about which WebContents is the source of the invoke request.
</summary>
</member>
<member name="M:Electron.IpcMain.handle``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.IpcMainInvokeEvent,Microsoft.FSharp.Core.FSharpFunc{System.Object[],``0}})">
<summary>
 Adds a handler for an `invoke`able IPC. This handler will be called
 whenever a renderer calls `ipcRenderer.invoke(channel, ...args)`.

 If listener returns a `Promise`, the eventual result of the promise will
 be returned as a reply to the remote caller. Otherwise, the return value
 of the listener will be used as the value of the reply.

 The `event` that is passed as the first argument to the handler is the
 same as that passed to a regular event listener. It includes information
 about which WebContents is the source of the invoke request.
</summary>
</member>
<member name="P:Electron.IOCounters.writeTransferCount">
<summary>
 The number of I/O write transfers.
</summary>
</member>
<member name="P:Electron.IOCounters.writeOperationCount">
<summary>
 The number of I/O write operations.
</summary>
</member>
<member name="P:Electron.IOCounters.readTransferCount">
<summary>
 The number of I/O read transfers.
</summary>
</member>
<member name="P:Electron.IOCounters.readOperationCount">
<summary>
 The number of I/O read operations.
</summary>
</member>
<member name="P:Electron.IOCounters.otherTransferCount">
<summary>
 Then number of I/O other transfers.
</summary>
</member>
<member name="P:Electron.IOCounters.otherOperationCount">
<summary>
 Then number of I/O other operations.
</summary>
</member>
<member name="M:Electron.IncomingMessage.removeListenerError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.IncomingMessage.removeListenerEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnd.
</summary>
</member>
<member name="M:Electron.IncomingMessage.removeListenerData(Microsoft.FSharp.Core.FSharpFunc{Node.Buffer.Buffer,Microsoft.FSharp.Core.Unit})">
<summary>
 See onData.
</summary>
</member>
<member name="M:Electron.IncomingMessage.removeListenerAborted(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onAborted.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onceError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onceEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnd.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onceData(Microsoft.FSharp.Core.FSharpFunc{Node.Buffer.Buffer,Microsoft.FSharp.Core.Unit})">
<summary>
 See onData.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onceAborted(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onAborted.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when an error was encountered while streaming response data
 events. For instance, if the server closes the underlying while the
 response is still streaming, an `error` event will be emitted on the
 response object and a `close` event will subsequently follow on the
 request object.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Indicates that response body has ended.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onData(Microsoft.FSharp.Core.FSharpFunc{Node.Buffer.Buffer,Microsoft.FSharp.Core.Unit})">
<summary>
 The `data` event is the usual method of transferring response data into
 applicative code.
</summary>
</member>
<member name="M:Electron.IncomingMessage.onAborted(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when a request has been canceled during an ongoing HTTP
 transaction.
</summary>
</member>
<member name="P:Electron.IncomingMessage.statusMessage">
<summary>
 The HTTP status message.
</summary>
</member>
<member name="P:Electron.IncomingMessage.statusCode">
<summary>
 The HTTP response status code.
</summary>
</member>
<member name="P:Electron.IncomingMessage.httpVersionMinor">
<summary>
 The HTTP protocol minor version number.
</summary>
</member>
<member name="P:Electron.IncomingMessage.httpVersionMajor">
<summary>
 The HTTP protocol major version number.
</summary>
</member>
<member name="P:Electron.IncomingMessage.httpVersion">
<summary>
 The HTTP protocol version number. Typical values are &apos;1.0&apos; or &apos;1.1&apos;.
 Additionally `httpVersionMajor` and `httpVersionMinor` are two
 Integer-valued readable properties that return respectively the HTTP major
 and minor version numbers.
</summary>
</member>
<member name="P:Electron.IncomingMessage.headers">
<summary>
 the response HTTP headers. The object has lower-case string[] members.
</summary>
</member>
<member name="M:Electron.IncomingMessage.addListenerError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.IncomingMessage.addListenerEnd(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnd.
</summary>
</member>
<member name="M:Electron.IncomingMessage.addListenerData(Microsoft.FSharp.Core.FSharpFunc{Node.Buffer.Buffer,Microsoft.FSharp.Core.Unit})">
<summary>
 See onData.
</summary>
</member>
<member name="M:Electron.IncomingMessage.addListenerAborted(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onAborted.
</summary>
</member>
<member name="M:Electron.InAppPurchase.restoreCompletedTransactions">
<summary>
 Restores finished transactions. This method can be called either to install
 purchases on additional devices, or to restore purchases for an application that the
 user deleted and reinstalled.

 The [payment queue](https://developer.apple.com/documentation/storekit/skpaymentqueue?language=objc)
 delivers a new transaction for each previously completed transaction that can be
 restored. Each transaction includes a copy of the original transaction.
</summary>
</member>
<member name="M:Electron.InAppPurchase.removeListenerTransactionsUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Transaction[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onTransactionsUpdated.
</summary>
</member>
<member name="M:Electron.InAppPurchase.purchaseProduct(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
   Purchases a product.

   You should listen for the `transactions-updated` event as soon as
   possible and certainly before you call `purchaseProduct`.

   Returns a promise that resolves with `true` if the product is valid and
   added to the payment queue.
 </summary>
 <param name="productID">
   The identifiers of the product to purchase. (The identifier of
   com.example.app.product1 is product1).
 </param>
 <param name="quantity">
   The number of items the user wants to purchase.
 </param>
</member>
<member name="M:Electron.InAppPurchase.onceTransactionsUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Transaction[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onTransactionsUpdated.
</summary>
</member>
<member name="M:Electron.InAppPurchase.onTransactionsUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Transaction[],Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when one or more transactions have been updated.
</summary>
</member>
<member name="M:Electron.InAppPurchase.getReceiptURL">
<summary>
 Returns the path to the receipt.
</summary>
</member>
<member name="M:Electron.InAppPurchase.getProducts(System.String[])">
 <summary>
   Retrieves the product descriptions.
 </summary>
 <param name="productIDs">The identifiers of the products to get.</param>
</member>
<member name="M:Electron.InAppPurchase.finishTransactionByDate(System.String)">
<summary>
 Completes the pending transactions corresponding to the ISO formatted
 date.
</summary>
</member>
<member name="M:Electron.InAppPurchase.finishAllTransactions">
<summary>
 Completes all pending transactions.
</summary>
</member>
<member name="M:Electron.InAppPurchase.canMakePayments">
<summary>
 Indicates whether a user can make a payment.
</summary>
</member>
<member name="M:Electron.InAppPurchase.addListenerTransactionsUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Transaction[],Microsoft.FSharp.Core.Unit}})">
<summary>
 See onTransactionsUpdated.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.webgl2">
<summary>
 WebGL2.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.webgl">
<summary>
 WebGL.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.vpx_decode">
<summary>
 VPx Video Decode.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.video_encode">
<summary>
 Video Encode.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.video_decode">
<summary>
 Video Decode.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.rasterization">
<summary>
 Rasterization.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.native_gpu_memory_buffers">
<summary>
 Native GpuMemoryBuffers.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.multiple_raster_threads">
<summary>
 Multiple Raster Threads.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.gpu_compositing">
<summary>
 Compositing.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.flash_stage3d_baseline">
<summary>
 Flash Stage3D Baseline profile.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.flash_stage3d">
<summary>
 Flash Stage3D.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.flash_3d">
<summary>
 Flash.
</summary>
</member>
<member name="P:Electron.GPUFeatureStatus.2d_canvas">
<summary>
 Canvas.
</summary>
</member>
<member name="M:Electron.GlobalShortcut.unregisterAll">
<summary>
 Unregisters all of the global shortcuts.
</summary>
</member>
<member name="M:Electron.GlobalShortcut.unregister(System.String)">
<summary>
 Unregisters the global shortcut of `accelerator`.
</summary>
</member>
<member name="M:Electron.GlobalShortcut.registerAll(System.String[],Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers multiple global shortcuts. The callback is called when any of
 the registered shortcuts are pressed by the user.

 When a given accelerator is already taken by other applications, this call
 will silently fail. This behavior is intended by operating systems, since
 they don&apos;t want applications to fight for global shortcuts.
</summary>
</member>
<member name="M:Electron.GlobalShortcut.register(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a global shortcut. The callback is called when the registered
 shortcut is pressed by the user. The returned value indicates whether or
 not the shortcut was registered successfully.

 When the accelerator is already taken by other applications, this call
 will silently fail. This behavior is intended by operating systems, since
 they don&apos;t want applications to fight for global shortcuts.
</summary>
</member>
<member name="M:Electron.GlobalShortcut.isRegistered(System.String)">
<summary>
 Returns a value indicating whether this application has registered the
 accelerator.

 When the accelerator is already taken by other applications, this call
 will still return false. This behavior is intended by operating systems,
 since they don&apos;t want applications to fight for global shortcuts.
</summary>
</member>
<member name="P:Electron.FileFilter.extensions(System.String[])">
<summary>
 Extensions without dots or wildcards (e.g. &quot;png&quot;, but not &quot;.png&quot; or
 &quot;*.png&quot;). To show all files, use &quot;*&quot;.
</summary>
</member>
<member name="P:Electron.FileFilter.extensions">
<summary>
 Extensions without dots or wildcards (e.g. &quot;png&quot;, but not &quot;.png&quot; or
 &quot;*.png&quot;). To show all files, use &quot;*&quot;.
</summary>
</member>
<member name="P:Electron.DownloadItem.savePath(System.String)">
<summary>
 Determines the save file path of the download item.

 The property is only available in session&apos;s `will-download` callback
 function. If user doesn&apos;t set the save path via the property, Electron
 will use the original routine to determine the save path; this usually
 prompts a save dialog.
</summary>
</member>
<member name="M:Electron.DownloadItem.setSavePath(System.String)">
<summary>
 Set the save file path of the download item.

 The API is only available in session&apos;s `will-download` callback function.
 If user doesn&apos;t set the save path via the API, Electron will use the
 original routine to determine the save path; this usually prompts a save
 dialog.
</summary>
</member>
<member name="M:Electron.DownloadItem.setSaveDialogOptions(Electron.SaveDialogOptions)">
<summary>
 Set the save file dialog options.

 This API allows the user to set custom options for the save dialog that
 opens for the download item by default. The API is only available in
 session&apos;s `will-download` callback function.
</summary>
</member>
<member name="M:Electron.DownloadItem.resume">
<summary>
 Resumes the download that has been paused.

 Note: To enable resumable downloads the server you are downloading from
 must support range requests and provide both Last-Modified and ETag header
 values. Otherwise resume() will dismiss previously received bytes and
 restart the download from the beginning.
</summary>
</member>
<member name="M:Electron.DownloadItem.removeListenerUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemUpdatedState,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onUpdated.
</summary>
</member>
<member name="M:Electron.DownloadItem.removeListenerDone(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemDoneState,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDone.
</summary>
</member>
<member name="M:Electron.DownloadItem.pause">
<summary>
 Pauses the download.
</summary>
</member>
<member name="M:Electron.DownloadItem.onceUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemUpdatedState,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onUpdated.
</summary>
</member>
<member name="M:Electron.DownloadItem.onceDone(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemDoneState,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDone.
</summary>
</member>
<member name="M:Electron.DownloadItem.onUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemUpdatedState,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the download has been updated and is not done.
</summary>
</member>
<member name="M:Electron.DownloadItem.onDone(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemDoneState,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the download is in a terminal state. This includes a
 completed download, a cancelled download (via downloadItem.cancel()), and
 interrupted download that can&apos;t be resumed.
</summary>
</member>
<member name="M:Electron.DownloadItem.isPaused">
<summary>
 Indicates whether the download is paused.
</summary>
</member>
<member name="M:Electron.DownloadItem.hasUserGesture">
<summary>
 Indicates whether the download has user gesture.
</summary>
</member>
<member name="P:Electron.DownloadItem.savePath">
<summary>
 Determines the save file path of the download item.

 The property is only available in session&apos;s `will-download` callback
 function. If user doesn&apos;t set the save path via the property, Electron
 will use the original routine to determine the save path; this usually
 prompts a save dialog.
</summary>
</member>
<member name="M:Electron.DownloadItem.getURLChain">
<summary>
 Returns the complete URL chain of the item including any redirects.

 May be useful to resume a cancelled item when session is restarted.
</summary>
</member>
<member name="M:Electron.DownloadItem.getURL">
<summary>
 Returns the origin URL where the item is downloaded from.
</summary>
</member>
<member name="M:Electron.DownloadItem.getTotalBytes">
<summary>
 Returns the total size in bytes of the download item.

 If the size is unknown, it returns 0.
</summary>
</member>
<member name="M:Electron.DownloadItem.getState">
<summary>
 Returns the current state.
</summary>
</member>
<member name="M:Electron.DownloadItem.getStartTime">
<summary>
 Returns the number of seconds since the UNIX epoch when the download was
 started.

 May be useful to resume a cancelled item when session is restarted.
</summary>
</member>
<member name="M:Electron.DownloadItem.getSavePath">
<summary>
 Returns the save path of the download item. This will be either the path
 set via downloadItem.setSavePath(path) or the path selected from the shown
 save dialog.
</summary>
</member>
<member name="M:Electron.DownloadItem.getSaveDialogOptions">
<summary>
 Returns the object previously set by
 downloadItem.setSaveDialogOptions(options)
</summary>
</member>
<member name="M:Electron.DownloadItem.getReceivedBytes">
<summary>
 Returns the received bytes of the download item.
</summary>
</member>
<member name="M:Electron.DownloadItem.getMimeType">
<summary>
 Returns the files mime type.
</summary>
</member>
<member name="M:Electron.DownloadItem.getLastModifiedTime">
<summary>
 Returns the Last-Modified header value.

 May be useful to resume a cancelled item when session is restarted.
</summary>
</member>
<member name="M:Electron.DownloadItem.getFilename">
<summary>
 Returns the file name of the download item.

 Note: The file name is not always the same as the actual one saved in
 local disk. If user changes the file name in a prompted download saving
 dialog, the actual name of saved file will be different.
</summary>
</member>
<member name="M:Electron.DownloadItem.getETag">
<summary>
 Returns the ETag header value.

 May be useful to resume a cancelled item when session is restarted.
</summary>
</member>
<member name="M:Electron.DownloadItem.getContentDisposition">
<summary>
 Returns the Content-Disposition field from the response header.
</summary>
</member>
<member name="M:Electron.DownloadItem.cancel">
<summary>
 Cancels the download operation.
</summary>
</member>
<member name="M:Electron.DownloadItem.canResume">
<summary>
 Indicates whether the download can resume.
</summary>
</member>
<member name="M:Electron.DownloadItem.addListenerUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemUpdatedState,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onUpdated.
</summary>
</member>
<member name="M:Electron.DownloadItem.addListenerDone(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.DownloadItemDoneState,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDone.
</summary>
</member>
<member name="T:Electron.DownloadItemUpdatedState.Interrupted">
<summary>
 The download has interrupted and can be resumed.
</summary>
</member>
<member name="T:Electron.DownloadItemUpdatedState.Progressing">
<summary>
 The download is in-progress.
</summary>
</member>
<member name="T:Electron.DownloadItemDoneState.Interrupted">
<summary>
 The download has interrupted and can not resume.
</summary>
</member>
<member name="T:Electron.DownloadItemDoneState.Cancelled">
<summary>
 The download has been cancelled.
</summary>
</member>
<member name="T:Electron.DownloadItemDoneState.Completed">
<summary>
 The download completed successfully.
</summary>
</member>
<member name="P:Electron.Display.scaleFactor">
<summary>
 Output device&apos;s pixel scale factor.
</summary>
</member>
<member name="P:Electron.Display.rotation">
<summary>
 Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.
</summary>
</member>
<member name="P:Electron.Display.monochrome">
<summary>
 Whether or not the display is a monochrome display.
</summary>
</member>
<member name="P:Electron.Display.internal">
<summary>
 `true` for an internal display and `false` for an external display
</summary>
</member>
<member name="P:Electron.Display.id">
<summary>
 Unique identifier associated with the display.
</summary>
</member>
<member name="P:Electron.Display.depthPerComponent">
<summary>
 The number of bits per color component.
</summary>
</member>
<member name="P:Electron.Display.colorSpace">
<summary>
 Represents a color space (three-dimensional object which contains all
 realizable color combinations) for the purpose of color conversions
</summary>
</member>
<member name="P:Electron.Display.colorDepth">
<summary>
 The number of bits per pixel.
</summary>
</member>
<member name="M:Electron.Dialog.showSaveDialogSync(Electron.BrowserWindow,Electron.SaveDialogOptions)">
<summary>
 Returns the path of the file chosen by the user, or None if the dialog was
 canceled.

 The `browserWindow` argument allows the dialog to attach itself to a
 parent window, making it modal.

 Note: On macOS, using the asynchronous version is recommended to avoid
 issues when expanding and collapsing the dialog.
</summary>
</member>
<member name="M:Electron.Dialog.showSaveDialogSync(Electron.SaveDialogOptions)">
<summary>
 Returns the path of the file chosen by the user, or None if the dialog was
 canceled.

 Note: On macOS, using the asynchronous version is recommended to avoid
 issues when expanding and collapsing the dialog.
</summary>
</member>
<member name="M:Electron.Dialog.showSaveDialog(Electron.BrowserWindow,Electron.SaveDialogOptions)">
<summary>
 Display a Save dialog and returns the file path chosen by the user.

 The `browserWindow` argument allows the dialog to attach itself to a
 parent window, making it modal.
</summary>
</member>
<member name="M:Electron.Dialog.showSaveDialog(Electron.SaveDialogOptions)">
<summary>
 Display a Save dialog and returns the file path chosen by the user.
</summary>
</member>
<member name="M:Electron.Dialog.showOpenDialogSync(Electron.BrowserWindow,Electron.OpenDialogOptions)">
<summary>
 Returns an array of file paths chosen by the user.

 The `browserWindow` argument allows the dialog to attach itself to a
 parent window, making it modal.
</summary>
</member>
<member name="M:Electron.Dialog.showOpenDialogSync(Electron.OpenDialogOptions)">
<summary>
 Returns the file paths chosen by the user, or None if the dialog was
 canceled.
</summary>
</member>
<member name="M:Electron.Dialog.showOpenDialog(Electron.BrowserWindow,Electron.OpenDialogOptions)">
<summary>
 Display an Open dialog and returns the file paths chosen by the user.

 The `browserWindow` argument allows the dialog to attach itself to a
 parent window, making it modal.
</summary>
</member>
<member name="M:Electron.Dialog.showOpenDialog(Electron.OpenDialogOptions)">
<summary>
 Display an Open dialog and returns the file paths chosen by the user.
</summary>
</member>
<member name="M:Electron.Dialog.showMessageBoxSync(Electron.BrowserWindow,Electron.MessageBoxOptions)">
<summary>
 Shows a message box, it will block the process until the message box is
 closed. It returns the index of the clicked button.

 The browserWindow argument allows the dialog to attach itself to a parent
 window, making it modal.
</summary>
</member>
<member name="M:Electron.Dialog.showMessageBoxSync(Electron.MessageBoxOptions)">
<summary>
 Shows a message box, it will block the process until the message box is
 closed. It returns the index of the clicked button.
</summary>
</member>
<member name="M:Electron.Dialog.showMessageBox(Electron.BrowserWindow,Electron.MessageBoxOptions)">
<summary>
 Shows a message box, it will block the process until the message box is closed.

 The browserWindow argument allows the dialog to attach itself to a parent
 window, making it modal.
</summary>
</member>
<member name="M:Electron.Dialog.showMessageBox(Electron.MessageBoxOptions)">
<summary>
 Shows a message box, it will block the process until the message box is closed.
</summary>
</member>
<member name="M:Electron.Dialog.showErrorBox(System.String,System.String)">
<summary>
 Displays a modal dialog that shows an error message.

 This API can be called safely before the `ready` event the app module
 emits, it is usually used to report errors in early stage of startup. If
 called before the app `ready` event on Linux, the message will be emitted
 to stderr, and no GUI dialog will appear.
</summary>
</member>
<member name="M:Electron.Dialog.showCertificateTrustDialog(Electron.BrowserWindow,Electron.CertificateTrustDialogOptions)">
<summary>
 [macOS] Displays a modal dialog that shows a message and certificate
 information, and gives the user the option of trusting/importing the
 certificate.
</summary>
</member>
<member name="M:Electron.Dialog.showCertificateTrustDialog(Electron.CertificateTrustDialogOptions)">
<summary>
 [macOS, Windows] Displays a modal dialog that shows a message and
 certificate information, and gives the user the option of
 trusting/importing the certificate.
</summary>
</member>
<member name="P:Electron.MessageBoxResult.response">
<summary>
 The index of the clicked button.
</summary>
</member>
<member name="P:Electron.MessageBoxResult.checkboxChecked">
<summary>
 The checked state of the checkbox if checkboxLabel was set. Otherwise
 false
</summary>
</member>
<member name="P:Electron.SaveDialogResult.filePath">
<summary>
 If the dialog is canceled this will be null or empty string.
</summary>
</member>
<member name="P:Electron.SaveDialogResult.canceled">
<summary>
 Whether or not the dialog was canceled.
</summary>
</member>
<member name="P:Electron.SaveDialogResult.bookmarks">
<summary>
 [macOS Mac App Store only] Base64 encoded string which contains the
 security scoped bookmark data for the saved file. securityScopedBookmarks
 must be enabled for this to be present.
</summary>
</member>
<member name="P:Electron.OpenDialogResult.filePaths">
<summary>
 An array of file paths chosen by the user. If the dialog is cancelled this
 will be an empty array.
</summary>
</member>
<member name="P:Electron.OpenDialogResult.canceled">
<summary>
 Whether or not the dialog was canceled.
</summary>
</member>
<member name="P:Electron.OpenDialogResult.bookmarks">
<summary>
 [macOS Mac App Store only] An array matching the filePaths array of base64 encoded
 strings which contains security scoped bookmark data. securityScopedBookmarks must
 be enabled for this to be populated. (For return values, see [table
 here](https://www.electronjs.org/docs/all#bookmarks-array).)
</summary>
</member>
<member name="P:Electron.DesktopCapturerSource.thumbnail">
<summary>
 A thumbnail image. There is no guarantee that the size of the thumbnail is
 the same as the `thumbnailSize` specified in the `options` passed to
 desktopCapturer.getSources. The actual size depends on the scale of the
 screen or window.
</summary>
</member>
<member name="P:Electron.DesktopCapturerSource.name">
<summary>
 A screen source will be named either Entire Screen or Screen &lt;index&gt;,
 while the name of a window source will match the window title.
</summary>
</member>
<member name="P:Electron.DesktopCapturerSource.id">
<summary>
 The identifier of a window or screen that can be used as a
 chromeMediaSourceId constraint when calling
 [navigator.webkitGetUserMedia]. The format of the identifier will be
 window:XX or screen:XX, where XX is a random generated number.
</summary>
</member>
<member name="P:Electron.DesktopCapturerSource.display_id">
<summary>
 A unique identifier that will correspond to the `id` of the matching
 returned by the Screen API. On some platforms, this is equivalent to the
 XX portion of the `id` field and on others it will differ. It will be an
 empty string if not available.
</summary>
</member>
<member name="P:Electron.DesktopCapturerSource.appIcon">
<summary>
 An icon image of the application that owns the window or None if the
 source has a type screen. The size of the icon is not known in advance and
 depends on what the application provides.
</summary>
</member>
<member name="M:Electron.DesktopCapturer.getSources(Electron.GetDesktopCapturerSourcesOptions)">
<summary>
 Each returned DesktopCapturerSource represents a screen or an individual window that
 can be captured.

 **Note:** Capturing the screen contents requires user consent on macOS 10.15
 Catalina or higher, which can detected by `systemPreferences.getMediaAccessStatus`.
</summary>
</member>
<member name="M:Electron.Debugger.sendCommand(System.String,Microsoft.FSharp.Core.FSharpOption{System.Object})">
 <summary>
   Send given command to the debugging target. Returns a promise that
   resolves with the response defined by the 'returns' attribute of the
   command description in the remote debugging protocol or is rejected
   indicating the failure of the command.
 </summary>
 <param name="method">
   Method name, should be one of the methods defined by the remote
   debugging protocol.
 </param>
 <param name="commandParams">Object with request parameters.</param>
</member>
<member name="M:Electron.Debugger.removeListenerMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onMessage.
</summary>
</member>
<member name="M:Electron.Debugger.removeListenerDetach(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDetach.
</summary>
</member>
<member name="M:Electron.Debugger.onceMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onMessage.
</summary>
</member>
<member name="M:Electron.Debugger.onceDetach(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDetach.
</summary>
</member>
<member name="M:Electron.Debugger.onMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted whenever the debugging target issues an instrumentation event.

 Parameters:

   - event
   - method: Method name.
   - params: Event parameters defined by the &apos;parameters&apos; attribute in the remote debugging protocol.
</summary>
</member>
<member name="M:Electron.Debugger.onDetach(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the debugging session is terminated. This happens either when
 `webContents` is closed or devtools is invoked for the attached
 `webContents`.

 Parameters:

   - event
   - reason: reason for detaching the debugger
</summary>
</member>
<member name="M:Electron.Debugger.isAttached">
<summary>
 Indicates whether a debugger is attached to the webContents.
</summary>
</member>
<member name="M:Electron.Debugger.detach">
<summary>
 Detaches the debugger from the webContents.
</summary>
</member>
<member name="M:Electron.Debugger.attach(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Attaches the debugger to the webContents.
</summary>
</member>
<member name="M:Electron.Debugger.addListenerMessage(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onMessage.
</summary>
</member>
<member name="M:Electron.Debugger.addListenerDetach(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDetach.
</summary>
</member>
<member name="P:Electron.CustomScheme.scheme(System.String)">
<summary>
 Custom schemes to be registered with options.
</summary>
</member>
<member name="P:Electron.CustomScheme.scheme">
<summary>
 Custom schemes to be registered with options.
</summary>
</member>
<member name="M:Electron.CrashReporter.start(Electron.CrashReporterStartOptions)">
<summary>
 This method must be called before using any other `crashReporter` APIs. Once
 initialized this way, the crashpad handler collects crashes from all subsequently
 created processes. The crash reporter cannot be disabled once started.

 This method should be called as early as possible in app startup, preferably before
 `app.on(&apos;ready&apos;)`. If the crash reporter is not initialized at the time a renderer
 process is created, then that renderer process will not be monitored by the crash
 reporter.

 **Note:** You can test out the crash reporter by generating a crash using
 `process.crash()`.

 **Note:** If you need to send additional/updated `extra` parameters after your first
 call `start` you can call `addExtraParameter`.

 **Note:** Parameters passed in `extra`, `globalExtra` or set with
 `addExtraParameter` have limits on the length of the keys and values. Key names must
 be at most 39 bytes long, and values must be no longer than 127 bytes. Keys with
 names longer than the maximum will be silently ignored. Key values longer than the
 maximum length will be truncated.

 **Note:** Calling this method from the renderer process is deprecated.
</summary>
</member>
<member name="M:Electron.CrashReporter.setUploadToServer(System.Boolean)">
<summary>
 Sets whether reports should be submitted to the server.

 This would normally be controlled by user preferences. This has no effect
 if called before `start` is called.

 Note: This API can only be called from the main process.
</summary>
</member>
<member name="M:Electron.CrashReporter.removeExtraParameter(System.String)">
<summary>
 Remove a extra parameter from the current set of parameters. Future crashes will not
 include this parameter.
</summary>
</member>
<member name="M:Electron.CrashReporter.getUploadedReports">
<summary>
 Returns all uploaded crash reports.

 **Note:** Calling this method from the renderer process is deprecated.
</summary>
</member>
<member name="M:Electron.CrashReporter.getUploadToServer">
<summary>
 Returns a value indicating whether reports should be submitted to the server. Set
 through the `start` method or `setUploadToServer`.

 **Note:** Calling this method from the renderer process is deprecated.
</summary>
</member>
<member name="M:Electron.CrashReporter.getParameters">
<summary>
 Returns the current `extra` parameters of the crash reporter.
</summary>
</member>
<member name="M:Electron.CrashReporter.getLastCrashReport">
<summary>
 Returns the date and ID of the last crash report. Only crash reports that have been
 uploaded will be returned; even if a crash report is present on disk it will not be
 returned until it is uploaded. In the case that there are no uploaded reports, None
 is returned.

 **Note:** Calling this method from the renderer process is deprecated.
</summary>
</member>
<member name="M:Electron.CrashReporter.getCrashesDirectory">
<summary>
 Returns the directory where crashes are temporarily stored before being uploaded.
</summary>
</member>
<member name="M:Electron.CrashReporter.addExtraParameter(System.String,System.String)">
<summary>
 Set an extra parameter to be sent with the crash report. The values specified here
 will be sent in addition to any values set via the `extra` option when `start` was
 called.

 Parameters added in this fashion (or via the `extra` parameter to
 `crashReporter.start`) are specific to the calling process. Adding extra parameters
 in the main process will not cause those parameters to be sent along with crashes
 from renderer or other child processes. Similarly, adding extra parameters in a
 renderer process will not result in those parameters being sent with crashes that
 occur in other renderer processes or in the main process.

 **Note:** Parameters have limits on the length of the keys and values. Key names
 must be no longer than 39 bytes, and values must be no longer than 127 bytes. Keys
 with names longer than the maximum will be silently ignored. Key values longer than
 the maximum length will be truncated.
</summary>
</member>
<member name="P:Electron.CPUUsage.percentCPUUsage">
<summary>
 Percentage of CPU used since the last call to `getCPUUsage`. First call
 returns 0.
</summary>
</member>
<member name="P:Electron.CPUUsage.idleWakeupsPerSecond">
<summary>
 The number of average idle CPU wakeups per second since the last call to
 `getCPUUsage`. First call returns 0. Will always return 0 on Windows.
</summary>
</member>
<member name="M:Electron.Cookies.set(Electron.SetCookieDetails)">
<summary>
 Sets a cookie with details.
</summary>
</member>
<member name="M:Electron.Cookies.removeListenerChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Cookie,Microsoft.FSharp.Core.FSharpFunc{Electron.CookieChangedCause,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onChanged.
</summary>
</member>
<member name="M:Electron.Cookies.remove(System.String,System.String)">
<summary>
 Removes the cookies matching `url` and `name`
</summary>
</member>
<member name="M:Electron.Cookies.onceChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Cookie,Microsoft.FSharp.Core.FSharpFunc{Electron.CookieChangedCause,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onChanged.
</summary>
</member>
<member name="M:Electron.Cookies.onChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Cookie,Microsoft.FSharp.Core.FSharpFunc{Electron.CookieChangedCause,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Emitted when a cookie is changed because it was added, edited, removed, or
 expired.

 Parameters:

   - event
   - cookie: The cookie that was changed
   - cause: The cause of the change
   - removed: true if the cookie was removed, false otherwise
</summary>
</member>
<member name="M:Electron.Cookies.get(Electron.GetCookiesFilter)">
<summary>
 Sends a request to get all cookies matching filter, and resolves a promise
 with the response.
</summary>
</member>
<member name="M:Electron.Cookies.flushStore">
<summary>
 Writes any unwritten cookies data to disk.
</summary>
</member>
<member name="M:Electron.Cookies.addListenerChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Cookie,Microsoft.FSharp.Core.FSharpFunc{Electron.CookieChangedCause,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onChanged.
</summary>
</member>
<member name="T:Electron.CookieChangedCause.ExpiredOverwrite">
<summary>
 The cookie was overwritten with an already-expired expiration date.
</summary>
</member>
<member name="T:Electron.CookieChangedCause.Evicted">
<summary>
 The cookie was automatically evicted during garbage collection.
</summary>
</member>
<member name="T:Electron.CookieChangedCause.Expired">
<summary>
 The cookie was automatically removed as it expired.
</summary>
</member>
<member name="T:Electron.CookieChangedCause.Overwrite">
<summary>
 The cookie was automatically removed due to an insert operation that
 overwrote it.
</summary>
</member>
<member name="T:Electron.CookieChangedCause.Explicit">
<summary>
 The cookie was changed directly by a consumer&apos;s action.
</summary>
</member>
<member name="P:Electron.Cookie.value">
<summary>
 The value of the cookie.
</summary>
</member>
<member name="P:Electron.Cookie.session">
<summary>
 Whether the cookie is a session cookie or a persistent cookie with an
 expiration date.
</summary>
</member>
<member name="P:Electron.Cookie.secure">
<summary>
 Whether the cookie is marked as secure.
</summary>
</member>
<member name="P:Electron.Cookie.path">
<summary>
 The path of the cookie.
</summary>
</member>
<member name="P:Electron.Cookie.name">
<summary>
 The name of the cookie.
</summary>
</member>
<member name="P:Electron.Cookie.httpOnly">
<summary>
 Whether the cookie is marked as HTTP only.
</summary>
</member>
<member name="P:Electron.Cookie.hostOnly">
<summary>
 Whether the cookie is a host-only cookie; this will only be true if no
 domain was passed.
</summary>
</member>
<member name="P:Electron.Cookie.expirationDate">
<summary>
 The expiration date of the cookie as the number of seconds since the UNIX
 epoch. Not provided for session cookies.
</summary>
</member>
<member name="P:Electron.Cookie.domain">
<summary>
 The domain of the cookie; this will be normalized with a preceding dot so
 that it&apos;s also valid for subdomains.
</summary>
</member>
<member name="M:Electron.ContextBridge.exposeInMainWorld``1(System.String,``0)">
<summary>
 Expose the specified object in the main world. See the [ContextBridge
 docs](https://electronjs.org/docs/api/context-bridge) for details

 The API will be available on BrowserWindow as a property with the name specified by
 `apiKey`. You can use the dynamic accessor from `Fable.Core.JsInterop` to retrieve
 it:

 `(window?myKey: MyApiType).MyThing`
</summary>
</member>
<member name="M:Electron.ContentTracing.stopRecording(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Stop recording on all processes.

 Child processes typically cache trace data and only rarely flush and send
 trace data back to the main process. This helps to minimize the runtime
 overhead of tracing since sending trace data over IPC can be an expensive
 operation. So, to end tracing, Chromium asynchronously asks all child
 processes to flush any pending trace data.

 Trace data will be written into `resultFilePath`. If `resultFilePath` is
 empty or not provided, trace data will be written to a temporary file, and
 the path will be returned in the promise.

 The returned promise resolves with a path to a file that contains the
 traced data once all child processes have acknowledged the `stopRecording`
 request
</summary>
</member>
<member name="M:Electron.ContentTracing.startRecording(Electron.TraceConfig)">
<summary>
 Start recording on all processes.

 Recording begins immediately locally and asynchronously on child processes
 as soon as they receive the EnableRecording request.

 If a recording is already running, the promise will be immediately
 resolved, as only one trace operation can be in progress at a time.

 The returned promise is resolved once all child processes have
 acknowledged the `startRecording` request.
</summary>
</member>
<member name="M:Electron.ContentTracing.startRecording(Electron.TraceCategoriesAndOptions)">
<summary>
 Start recording on all processes.

 Recording begins immediately locally and asynchronously on child processes
 as soon as they receive the EnableRecording request.

 If a recording is already running, the promise will be immediately
 resolved, as only one trace operation can be in progress at a time.

 The returned promise is resolved once all child processes have
 acknowledged the `startRecording` request.
</summary>
</member>
<member name="M:Electron.ContentTracing.getTraceBufferUsage">
<summary>
 Get the maximum usage across processes of trace buffer as a percentage of
 the full state.
</summary>
</member>
<member name="M:Electron.ContentTracing.getCategories">
<summary>
 Get a set of category groups. The category groups can change as new code paths are
 reached. See also the [list of built-in tracing
 categories](https://chromium.googlesource.com/chromium/src/+/master/base/trace_event/builtin_categories.h).

 The returned promise resolves with an array of category groups once all child
 processes have acknowledged the getCategories request.

 **NOTE:** Electron adds a non-default tracing category called `&quot;electron&quot;`. This
 category can be used to capture Electron-specific tracing events.
</summary>
</member>
<member name="M:Electron.Clipboard.writeText(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Writes the `text` into the clipboard as plain text. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.writeRTF(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Writes the `text` into the clipboard in RTF. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.writeImage(Electron.NativeImage,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Writes `image` to the clipboard. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.writeHTML(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Writes `markup` to the clipboard. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.writeFindText(System.String)">
<summary>
 [macOS] Writes the `text` into the find pasteboard (the pasteboard that
 holds information about the current state of the active application’s find
 panel) as plain text. This method uses synchronous IPC when called from
 the renderer process.
</summary>
</member>
<member name="M:Electron.Clipboard.writeBuffer(System.String,Node.Buffer.Buffer,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Writes the `buffer` into the clipboard as `format`. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.writeBookmark(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 [macOS, Windows] Writes the title and url into the clipboard as a
 bookmark. The default `type` is `ClipboardType.Clipboard`.

 Note: Most apps on Windows don&apos;t support pasting bookmarks into them so
 you can use clipboard.write to write both a bookmark and fallback text to
 the clipboard.
</summary>
</member>
<member name="M:Electron.Clipboard.write(Electron.ClipboardData,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Writes `data` to the clipboard. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.readText(Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Returns the content in the clipboard as plain text. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.readRTF(Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Returns the content in the clipboard as RTF. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.readImage(Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Returns the image content in the clipboard. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.readHTML(Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Returns the content in the clipboard as markup. The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.readFindText">
<summary>
 [macOS] Returns the text on the find pasteboard, which is the pasteboard
 that holds information about the current state of the active application’s
 find panel.

 This method uses synchronous IPC when called from the renderer process.
 The cached value is reread from the find pasteboard whenever the
 application is activated.
</summary>
</member>
<member name="M:Electron.Clipboard.readBuffer(System.String)">
<summary>
 Reads `format` type from the clipboard.
</summary>
</member>
<member name="M:Electron.Clipboard.readBookmark">
<summary>
 [macOS, Windows] Returns an object containing title and url keys
 representing the bookmark in the clipboard. The title and url values will
 be empty strings when the bookmark is unavailable.
</summary>
</member>
<member name="M:Electron.Clipboard.read(System.String)">
<summary>
 Reads `format` type from the clipboard.
</summary>
</member>
<member name="M:Electron.Clipboard.has(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Returns a value indicating whether the clipboard supports the specified
 format.  The default `type` is `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.clear(Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Clears the clipboard content.  The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="M:Electron.Clipboard.availableFormats(Microsoft.FSharp.Core.FSharpOption{Electron.ClipboardType})">
<summary>
 Returns the supported formats for the clipboard.  The default `type` is
 `ClipboardType.Clipboard`.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.useSessionCookies(System.Boolean)">
<summary>
 Whether to send cookies with this request from the provided session. This will make
 the `net` request&apos;s cookie behavior match a `fetch` request. Default is `false`.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.url(System.String)">
<summary>
 The request URL. Must be provided in the absolute form with the protocol
 scheme specified as http or https.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.session(Electron.Session)">
<summary>
 The Session instance with which the request is associated.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.redirect(Electron.RedirectMode)">
<summary>
 The redirect mode for this request. Defaults to RedirectMode.Follow. When
 mode is RedirectMode.Error, any redirection will be aborted. When mode is
 RedirectMode.Manual the redirection will be deferred until
 request.followRedirect is invoked. Listen for the `redirect` event in this
 mode to get more details about the redirect request.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.protocol(System.String)">
<summary>
 The protocol scheme in the form &apos;scheme:&apos;. Currently supported values are
 &apos;http:&apos; or &apos;https:&apos;. Defaults to &apos;http:&apos;.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.port(System.Int32)">
<summary>
 The server&apos;s listening port number.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.path(System.String)">
<summary>
 The path part of the request URL.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.partition(System.String)">
<summary>
 The name of the partition with which the request is associated. Defaults
 to the empty string. The session option prevails on partition. Thus if a
 session is explicitly specified, partition is ignored.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.method(System.String)">
<summary>
 The HTTP request method. Defaults to the GET method.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.hostname(System.String)">
<summary>
 The server host name.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.host(System.String)">
<summary>
 The server host provided as a concatenation of the hostname and the port
 number &apos;hostname:port&apos;.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.useSessionCookies">
<summary>
 Whether to send cookies with this request from the provided session. This will make
 the `net` request&apos;s cookie behavior match a `fetch` request. Default is `false`.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.url">
<summary>
 The request URL. Must be provided in the absolute form with the protocol
 scheme specified as http or https.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.session">
<summary>
 The Session instance with which the request is associated.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.redirect">
<summary>
 The redirect mode for this request. Defaults to RedirectMode.Follow. When
 mode is RedirectMode.Error, any redirection will be aborted. When mode is
 RedirectMode.Manual the redirection will be deferred until
 request.followRedirect is invoked. Listen for the `redirect` event in this
 mode to get more details about the redirect request.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.protocol">
<summary>
 The protocol scheme in the form &apos;scheme:&apos;. Currently supported values are
 &apos;http:&apos; or &apos;https:&apos;. Defaults to &apos;http:&apos;.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.port">
<summary>
 The server&apos;s listening port number.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.path">
<summary>
 The path part of the request URL.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.partition">
<summary>
 The name of the partition with which the request is associated. Defaults
 to the empty string. The session option prevails on partition. Thus if a
 session is explicitly specified, partition is ignored.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.method">
<summary>
 The HTTP request method. Defaults to the GET method.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.hostname">
<summary>
 The server host name.
</summary>
</member>
<member name="P:Electron.ClientRequestOptions.host">
<summary>
 The server host provided as a concatenation of the hostname and the port
 number &apos;hostname:port&apos;.
</summary>
</member>
<member name="M:Electron.ClientRequest.write(Node.Buffer.Buffer,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit}})">
 <summary>
   Adds a chunk of data to the request body. The first write operation may
   cause the request headers to be issued on the wire. After the first
   write operation, it is not allowed to add or remove a custom header.
 </summary>
 <param name="chunk">A chunk of the request body's data.</param>
 <param name="callback">
   Called after the write operation ends. This is essentially a dummy
   function introduced in the purpose of keeping similarity with the
   Node.js API. It is called asynchronously in the next tick after chunk
   content have been delivered to the Chromium networking layer. Contrary
   to the Node.js implementation, it is not guaranteed that chunk content
   have been flushed on the wire before callback is called.
 </param>
</member>
<member name="M:Electron.ClientRequest.write(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit}})">
 <summary>
   Adds a chunk of data to the request body. The first write operation may
   cause the request headers to be issued on the wire. After the first
   write operation, it is not allowed to add or remove a custom header.
 </summary>
 <param name="chunk">
   A chunk of the request body's data. It is converted into a Buffer using
   the specified encoding.
 </param>
 <param name="encoding">
   Used to convert string chunks into Buffer objects. Defaults to "utf-8".
 </param>
 <param name="callback">
   Called after the write operation ends. This is essentially a dummy
   function introduced in the purpose of keeping similarity with the
   Node.js API. It is called asynchronously in the next tick after chunk
   content have been delivered to the Chromium networking layer. Contrary
   to the Node.js implementation, it is not guaranteed that chunk content
   have been flushed on the wire before callback is called.
 </param>
</member>
<member name="P:Electron.ClientRequest.chunkedEncoding(System.Boolean)">
<summary>
 Indicates whether the request will use HTTP chunked transfer encoding or
 not. Defaults to false. The property is readable and writable, however it
 can be set only before the first write operation as the HTTP headers are
 not yet put on the wire. Trying to set the chunkedEncoding property after
 the first write will throw an error.

 Using chunked encoding is strongly recommended if you need to send a large
 request body as data will be streamed in small chunks instead of being
 internally buffered inside Electron process memory.
</summary>
</member>
<member name="M:Electron.ClientRequest.setHeader(System.String,System.String)">
<summary>
 Adds an extra HTTP header. The header name will be issued as-is without
 lowercasing. It can be called only before first write. Calling this method
 after the first write will throw an error.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerResponse(Microsoft.FSharp.Core.FSharpFunc{Electron.IncomingMessage,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponse.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerRedirect(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onRedirect.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerLogin(Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerFinish(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onFinish.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerClose(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeListenerAbort(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onAbort.
</summary>
</member>
<member name="M:Electron.ClientRequest.removeHeader(System.String)">
<summary>
 Removes a previously set extra header name. This method can be called only
 before first write. Trying to call it after the first write will throw an
 error.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceResponse(Microsoft.FSharp.Core.FSharpFunc{Electron.IncomingMessage,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponse.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceRedirect(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onRedirect.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceLogin(Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceFinish(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onFinish.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceClose(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.ClientRequest.onceAbort(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onAbort.
</summary>
</member>
<member name="M:Electron.ClientRequest.onResponse(Microsoft.FSharp.Core.FSharpFunc{Electron.IncomingMessage,Microsoft.FSharp.Core.Unit})">
<summary>
 Provides the HTTP response message.
</summary>
</member>
<member name="M:Electron.ClientRequest.onRedirect(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Emitted when the server returns a redirect response (e.g. 301 Moved Permanently).
 Calling `request.followRedirect` will continue with the redirection. If this event
 is handled, `request.followRedirect` must be called **synchronously**, otherwise the
 request will be cancelled.

 Parameters:
   - statusCode
   - method
   - redirectUrl
   - responseHeaders
</summary>
</member>
<member name="M:Electron.ClientRequest.onLogin(Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when an authenticating proxy is asking for user credentials.

 The callback function is expected to be called back with username and
 password.

 Providing empty credentials will cancel the request and report an
 authentication error on the response object.
</summary>
</member>
<member name="M:Electron.ClientRequest.onFinish(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted just after the last chunk of the request&apos;s data has been written
 into the `request` object.
</summary>
</member>
<member name="M:Electron.ClientRequest.onError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the `net` module fails to issue a network request. Typically
 when the request object emits an error event, a close event will
 subsequently follow and no response object will be provided.
</summary>
</member>
<member name="M:Electron.ClientRequest.onClose(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted as the last event in the HTTP request-response transaction. The
 close event indicates that no more events will be emitted on either the
 request or response objects.
</summary>
</member>
<member name="M:Electron.ClientRequest.onAbort(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the request is aborted. Will not be fired if the request is
 already closed.
</summary>
</member>
<member name="P:Electron.ClientRequest.chunkedEncoding">
<summary>
 Indicates whether the request will use HTTP chunked transfer encoding or
 not. Defaults to false. The property is readable and writable, however it
 can be set only before the first write operation as the HTTP headers are
 not yet put on the wire. Trying to set the chunkedEncoding property after
 the first write will throw an error.

 Using chunked encoding is strongly recommended if you need to send a large
 request body as data will be streamed in small chunks instead of being
 internally buffered inside Electron process memory.
</summary>
</member>
<member name="M:Electron.ClientRequest.getUploadProgress">
<summary>
 You can use this method in conjunction with POST requests to get the
 progress of a file upload or other data transfer.
</summary>
</member>
<member name="M:Electron.ClientRequest.getHeader(System.String)">
<summary>
 Returns the value of a previously set extra header.
</summary>
</member>
<member name="M:Electron.ClientRequest.followRedirect">
<summary>
 Continues any pending redirection. Can only be called during a `redirect` event.
</summary>
</member>
<member name="M:Electron.ClientRequest.end(Node.Buffer.Buffer,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit}})">
<summary>
 Sends the last chunk of the request data. Subsequent write or end
 operations will not be allowed. The `finish` event is emitted just after
 the end operation.
</summary>
</member>
<member name="M:Electron.ClientRequest.end(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit}})">
<summary>
 Sends the last chunk of the request data. Subsequent write or end
 operations will not be allowed. The `finish` event is emitted just after
 the end operation.
</summary>
</member>
<member name="M:Electron.ClientRequest.end(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit}})">
<summary>
 Sends the last chunk of the request data. Subsequent write or end
 operations will not be allowed. The `finish` event is emitted just after
 the end operation.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerResponse(Microsoft.FSharp.Core.FSharpFunc{Electron.IncomingMessage,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponse.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerRedirect(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}}})">
<summary>
 See onRedirect.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerLogin(Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerFinish(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onFinish.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerClose(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.ClientRequest.addListenerAbort(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onAbort.
</summary>
</member>
<member name="M:Electron.ClientRequest.abort">
<summary>
 Cancels an ongoing HTTP transaction. If the request has already emitted
 the `close` event, the abort operation will have no effect. Otherwise an
 ongoing event will emit `abort` and `close` events. Additionally, if there
 is an ongoing response object,it will emit the `aborted` event.
</summary>
</member>
<member name="P:Electron.CertificatePrincipal.state">
<summary>
 State or province.
</summary>
</member>
<member name="P:Electron.CertificatePrincipal.organizations">
<summary>
 Organization names.
</summary>
</member>
<member name="P:Electron.CertificatePrincipal.organizationUnits">
<summary>
 Organization Unit names.
</summary>
</member>
<member name="P:Electron.CertificatePrincipal.locality">
<summary>
 Locality.
</summary>
</member>
<member name="P:Electron.CertificatePrincipal.country">
<summary>
 Country or region.
</summary>
</member>
<member name="P:Electron.CertificatePrincipal.commonName">
<summary>
 Common Name.
</summary>
</member>
<member name="P:Electron.Certificate.fingerprint(System.String)">
<summary>
 Fingerprint of the certificate
</summary>
</member>
<member name="P:Electron.Certificate.validStart">
<summary>
 Start date of the certificate being valid in seconds
</summary>
</member>
<member name="P:Electron.Certificate.validExpiry">
<summary>
 End date of the certificate being valid in seconds
</summary>
</member>
<member name="P:Electron.Certificate.subjectName">
<summary>
 Subject&apos;s Common Name
</summary>
</member>
<member name="P:Electron.Certificate.subject">
<summary>
 Subject principal
</summary>
</member>
<member name="P:Electron.Certificate.serialNumber">
<summary>
 Hex value represented string
</summary>
</member>
<member name="P:Electron.Certificate.issuerName">
<summary>
 Issuer&apos;s Common Name
</summary>
</member>
<member name="P:Electron.Certificate.issuerCert">
<summary>
 Issuer certificate (if not self-signed)
</summary>
</member>
<member name="P:Electron.Certificate.issuer">
<summary>
 Issuer principal
</summary>
</member>
<member name="P:Electron.Certificate.fingerprint">
<summary>
 Fingerprint of the certificate
</summary>
</member>
<member name="P:Electron.Certificate.data">
<summary>
 PEM encoded data
</summary>
</member>
<member name="M:Electron.BrowserWindowProxy.print">
<summary>
 Invokes the print dialog on the child window.
</summary>
</member>
<member name="M:Electron.BrowserWindowProxy.postMessage``1(``0,System.String)">
<summary>
 Sends a message to the child window with the specified origin or * for no
 origin preference.
</summary>
</member>
<member name="P:Electron.BrowserWindowProxy.closed">
<summary>
 Set to true after the child window gets closed.
</summary>
</member>
<member name="M:Electron.BrowserWindowProxy.focus">
<summary>
 Focuses the child window (brings the window to front).
</summary>
</member>
<member name="M:Electron.BrowserWindowProxy.eval(System.String)">
<summary>
 Evaluates the code in the child window.
</summary>
</member>
<member name="M:Electron.BrowserWindowProxy.close">
<summary>
 Forcefully closes the child window without calling its unload event.
</summary>
</member>
<member name="M:Electron.BrowserWindowProxy.blur">
<summary>
 Removes focus from the child window.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.removeExtension(System.String)">
<summary>
 Remove a Chrome extension by name.

 Note: This API cannot be called before the `ready` event of the app module
 is emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.removeDevToolsExtension(System.String)">
<summary>
 Remove a DevTools extension by name.

 Note: This API cannot be called before the `ready` event of the app module
 is emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.getFocusedWindow">
<summary>
 Returns the window that is focused in this application.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.getExtensions">
<summary>
 Returns an object where the keys are the extension names and each value is
 an object containing `name` and `version` properties.

 Note: This API cannot be called before the `ready` event of the app module
 is emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.getDevToolsExtensions">
<summary>
 Returns an object where the keys are the extension names and each value is
 an object containing `name` and `version` properties.

 Note: This API cannot be called before the `ready` event of the app module
 is emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.getAllWindows">
<summary>
 Returns all opened browser windows.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.fromWebContents(Electron.WebContents)">
<summary>
 Returns the window that owns the given webContents or None if the contents are not
 owned by a window.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.fromId(System.Int32)">
<summary>
 Returns the window with the given id.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.fromBrowserView(Electron.BrowserView)">
<summary>
 Returns the window that owns the given browserView, or None if the given
 view is not attached to any window.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.addExtension(System.String)">
<summary>
 Adds Chrome extension located at `path`, and returns extension&apos;s name. The
 method will also not return if the extension&apos;s manifest is missing or
 incomplete.

 Note: This API cannot be called before the `ready` event of the app module
 is emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.addDevToolsExtension(System.String)">
<summary>
 Adds DevTools extension located at `path`, and returns extension&apos;s name.

 The extension will be remembered so you only need to call this API once,
 this API is not for programming use. If you try to add an extension that
 has already been loaded, this method will not return and instead log a
 warning to the console.

 The method will also not return if the extension&apos;s manifest is missing or
 incomplete.

 Note: This API cannot be called before the `ready` event of the app module
 is emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindowStatic.Create(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserWindowOptions})">
<summary>
 Instantiates a BrowserWindow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.unmaximize">
<summary>
 Unmaximizes the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.unhookWindowMessage(System.Int32)">
<summary>
 [Windows] Unhook the window message.
</summary>
</member>
<member name="M:Electron.BrowserWindow.unhookAllWindowMessages">
<summary>
 [Windows] Unhooks all of the window messages.
</summary>
</member>
<member name="M:Electron.BrowserWindow.toggleTabBar">
<summary>
 [macOS] Toggles the visibility of the tab bar if native tabs are enabled
 and there is only one tab in the current window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.showInactive">
<summary>
 Shows the window but doesn&apos;t focus on it.
</summary>
</member>
<member name="M:Electron.BrowserWindow.showDefinitionForSelection">
<summary>
 [macOS] Same as webContents.showDefinitionForSelection().
</summary>
</member>
<member name="M:Electron.BrowserWindow.show">
<summary>
 Shows and gives focus to the window.
</summary>
</member>
<member name="P:Electron.BrowserWindow.visibleOnAllWorkspaces(System.Boolean)">
<summary>
 Determines whether the window is visible on all workspaces.

 **Note:** Always returns false on Windows.
</summary>
</member>
<member name="P:Electron.BrowserWindow.title(System.String)">
<summary>
 Determines the title of the native window.

 **Note:** The title of the web page can be different from the title of the native
 window.
</summary>
</member>
<member name="P:Electron.BrowserWindow.simpleFullScreen(System.Boolean)">
<summary>
 Determines whether the window is in simple (pre-Lion) fullscreen mode.
</summary>
</member>
<member name="P:Electron.BrowserWindow.shadow(System.Boolean)">
<summary>
 Determines whether the window has a shadow.
</summary>
</member>
<member name="P:Electron.BrowserWindow.resizable(System.Boolean)">
<summary>
 Determines whether the window can be manually resized by user.
</summary>
</member>
<member name="P:Electron.BrowserWindow.representedFilename(System.String)">
<summary>
 [macOS] Determines the pathname of the file the window represents, and the icon of
 the file will show in window&apos;s title bar.
</summary>
</member>
<member name="P:Electron.BrowserWindow.movable(System.Boolean)">
<summary>
 Determines Whether the window can be moved by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.minimizable(System.Boolean)">
<summary>
 Determines whether the window can be manually minimized by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.menuBarVisible(System.Boolean)">
<summary>
 [Windows, Linux] Determines whether the menu bar should be visible.

 **Note:** If the menu bar is auto-hide, users can still bring up the menu bar by
 pressing the single Alt key.
</summary>
</member>
<member name="P:Electron.BrowserWindow.maximizable(System.Boolean)">
<summary>
 Determines whether the window can be manually maximized by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.kiosk(System.Boolean)">
<summary>
 Determines whether the window is in kiosk mode.
</summary>
</member>
<member name="P:Electron.BrowserWindow.fullScreenable(System.Boolean)">
<summary>
 Determines whether the maximize/zoom window button toggles fullscreen mode
 or maximizes the window.
</summary>
</member>
<member name="P:Electron.BrowserWindow.fullScreen(System.Boolean)">
<summary>
 Determines whether the window is in fullscreen mode.
</summary>
</member>
<member name="P:Electron.BrowserWindow.excludedFromShownWindowsMenu(System.Boolean)">
<summary>
 [macOS] Determines whether the window is excluded from the application’s
 Windows menu. `false` by default.
</summary>
</member>
<member name="P:Electron.BrowserWindow.documentEdited(System.Boolean)">
<summary>
 [macOS] Specifies whether the window’s document has been edited.

 The icon in title bar will become gray when set to true.
</summary>
</member>
<member name="P:Electron.BrowserWindow.closable(System.Boolean)">
<summary>
 Determines whether the window can be manually closed by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.autoHideMenuBar(System.Boolean)">
<summary>
 Determines whether the window menu bar should hide itself automatically.
 Once set, the menu bar will only show when users press the single Alt key.

 If the menu bar is already visible, setting this property to true won&apos;t
 hide it immediately.
</summary>
</member>
<member name="P:Electron.BrowserWindow.accessibleTitle(System.String)">
<summary>
 Defines an alternative title provided only to accessibility tools such as screen
 readers. This string is not directly visible to users.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setWindowButtonVisibility(System.Boolean)">
<summary>
 [macOS] Sets whether the window traffic light buttons should be visible.

 This cannot be called when titleBarStyle is set to customButtonsOnHover.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setVisibleOnAllWorkspaces(System.Boolean)">
<summary>
 [macOS, Linux] Sets whether the window should be visible on all workspaces.

 Note: This API does nothing on Windows.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setVibrancy(Microsoft.FSharp.Core.FSharpOption{Electron.VibrancyType})">
<summary>
 [macOS] Adds a vibrancy effect to the browser window. Passing None will
 remove the vibrancy effect on the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setTrafficLightPosition">
<summary>
 Returns the current position for the traffic light buttons. Can only be used with
 `titleBarStyle` set to `TitleBarStyle.Hidden`.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setTrafficLightPosition(Electron.Point)">
<summary>
 Set a custom position for the traffic light buttons. Can only be used with
 `titleBarStyle` set to `TitleBarStyle.Hidden`.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setTouchBar(Microsoft.FSharp.Core.FSharpOption{Electron.TouchBar})">
<summary>
 [macOS] Sets the touchBar layout for the current window. Specifying None
 clears the touch bar. This method only has an effect if the machine has a
 touch bar and is running on macOS 10.12.1+.

 Note: The TouchBar API is currently experimental and may change or be
 removed in future Electron releases.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setTitle(System.String)">
<summary>
 Changes the title of native window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setThumbnailToolTip(System.String)">
<summary>
 [Windows] Sets the toolTip that is displayed when hovering over the window
 thumbnail in the taskbar.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setThumbnailClip(Electron.Rectangle)">
<summary>
 [Windows] Sets the region of the window to show as the thumbnail image
 displayed when hovering over the window in the taskbar. You can reset the
 thumbnail to be the entire window by specifying an empty region: { x: 0,
 y: 0, width: 0, height: 0 }.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setThumbarButtons(Electron.ThumbarButton[])">
<summary>
 [Windows] Add a thumbnail toolbar with a specified set of buttons to the
 thumbnail image of a window in a taskbar button layout. Returns true if
 the thumbnail has been added successfully.

 The number of buttons in thumbnail toolbar should be no greater than 7 due
 to the limited room. Once you setup the thumbnail toolbar, the toolbar
 cannot be removed due to the platform&apos;s limitation. But you can call the
 API with an empty array to clean the buttons.

</summary>
</member>
<member name="M:Electron.BrowserWindow.setSkipTaskbar(System.Boolean)">
<summary>
 Makes the window not show in the taskbar.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setSize(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Resizes the window. If width or height are below any set minimum size
 constraints the window will snap to its minimum size. animate is macOS only.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setSimpleFullScreen(System.Boolean)">
<summary>
 [macOS] Enters or leaves simple fullscreen mode.

 Simple fullscreen mode emulates the native fullscreen behavior found in
 versions of Mac OS X prior to Lion (10.7).
</summary>
</member>
<member name="M:Electron.BrowserWindow.setSheetOffset(System.Double,Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 [macOS] Changes the attachment point for sheets on macOS. By default,
 sheets are attached just below the window frame, but you may want to
 display them beneath a HTML-rendered toolbar.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setShape(Electron.Rectangle[])">
<summary>
 [Windows, Linux] Sets a shape on the window. Passing an empty array
 reverts the window to being rectangular.

 Setting a window shape determines the area within the window where the
 system permits drawing and user interaction. Outside of the given region,
 no pixels will be drawn and no mouse events will be registered. Mouse
 events outside of the region will not be received by that window, but will
 fall through to whatever is behind the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setResizable(System.Boolean)">
<summary>
 Sets whether the window can be manually resized by user.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setRepresentedFilename(System.String)">
<summary>
 [macOS] Sets the pathname of the file the window represents, and the icon
 of the file will show in window&apos;s title bar.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setProgressBar(System.Double,Microsoft.FSharp.Core.FSharpOption{Electron.ProgressBarOptions})">
<summary>
 Sets progress value in progress bar. Valid range is [0, 1.0].

 Remove progress bar when progress &lt; 0; Change to indeterminate mode when
 progress &gt; 1.

 On Linux platform, only supports Unity desktop environment, you need to
 specify the *.desktop file name to desktopName field in package.json. By
 default, it will assume `{app.name}.desktop`.

 On Windows, a mode can be passed. If you call setProgressBar without a
 mode set (but with a value within the valid range), ProgressBarMode.Normal
 will be assumed.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setPosition(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Moves window to x and y. animate is macOS only.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setParentWindow(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserWindow})">
<summary>
 Sets parent as current window&apos;s parent window, passing None will turn
 current window into a top-level window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setOverlayIcon(Microsoft.FSharp.Core.FSharpOption{Electron.NativeImage},System.String)">
 <summary>
   [Windows] Sets or clears a 16 x 16 pixel overlay onto the current
   taskbar icon, usually used to convey some sort of application status or
   to passively notify the user.
 </summary>
 <param name="overlay">
   The icon to display on the bottom right corner of the taskbar icon. If
   this parameter is None, the overlay is cleared
 </param>
 <param name="description">
    A description that will be provided to Accessibility screen readers
 </param>
</member>
<member name="M:Electron.BrowserWindow.setOpacity(System.Double)">
<summary>
 [Windows, macOS] Sets the opacity of the window. On Linux does nothing.
 Out of bound number values are clamped to the [0, 1] range.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMovable(System.Boolean)">
<summary>
 [macOS, Windows] Sets whether the window can be moved by the user. On Linux
 does nothing.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMinimumSize(System.Int32,System.Int32)">
<summary>
 Sets the minimum size of window to width and height.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMinimizable(System.Boolean)">
<summary>
 [macOS, Windows] Sets whether the window can be manually minimized by
 user. On Linux does nothing.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMenuBarVisibility(System.Boolean)">
<summary>
 [Windows, Linux] Sets whether the menu bar should be visible. If the menu
 bar is auto-hide, users can still bring up the menu bar by pressing the
 single Alt key.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMenu(Electron.Menu)">
<summary>
 [Windows, Linux] Sets the menu as the window&apos;s menu bar.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMaximumSize(System.Int32,System.Int32)">
<summary>
 Sets the maximum size of window to width and height.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setMaximizable(System.Boolean)">
<summary>
 [macOS, Windows] Sets whether the window can be manually maximized by
 user. On Linux does nothing.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setKiosk(System.Boolean)">
<summary>
 Enters or leaves kiosk mode.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setIgnoreMouseEvents(System.Boolean,Microsoft.FSharp.Core.FSharpOption{Electron.IgnoreMouseEventsOptions})">
<summary>
 Makes the window ignore all mouse events.

 All mouse events happened in this window will be passed to the window
 below this window, but if this window has focus, it will still receive
 keyboard events.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setIcon(System.String)">
<summary>
 [Windows, Linux] Changes window icon.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setIcon(Electron.NativeImage)">
<summary>
 [Windows, Linux] Changes window icon.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setHasShadow(System.Boolean)">
<summary>
 [macOS] Sets whether the window should have a shadow. On Windows and Linux
 does nothing.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setFullScreenable(System.Boolean)">
<summary>
 Sets whether the maximize/zoom window button toggles fullscreen mode or
 maximizes the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setFullScreen(System.Boolean)">
<summary>
 Sets whether the window should be in fullscreen mode.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setFocusable(System.Boolean)">
<summary>
 [Windows] Changes whether the window can be focused.

 On macOS it does not remove the focus from the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setEnabled(System.Boolean)">
<summary>
 Disable or enable the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setDocumentEdited(System.Boolean)">
<summary>
 [macOS] Specifies whether the window’s document has been edited, and the
 icon in title bar will become gray when set to true.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setContentSize(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Resizes the window&apos;s client area (e.g. the web page) to width and height.
 animate is macOS only.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setContentProtection(System.Boolean)">
<summary>
 [macOS, Windows] Prevents the window contents from being captured by other
 apps.

 On macOS it sets the NSWindow&apos;s sharingType to NSWindowSharingNone. On
 Windows it calls SetWindowDisplayAffinity with WDA_MONITOR.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setContentBounds(Electron.Rectangle,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Resizes and moves the window&apos;s client area (e.g. the web page) to the
 supplied bounds. animate is macOS only.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setClosable(System.Boolean)">
<summary>
 [macOS, Windows] Sets whether the window can be manually closed by user.
 On Linux does nothing.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setBrowserView(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserView})">
<summary>
 Attach the `browserView` to the window. If there are other BrowserViews attached,
 they will be removed from this window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setBounds(Electron.Rectangle,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Resizes and moves the window to the supplied bounds. Any properties that
 are not supplied will default to their current values. `animate` is macOS
 only.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setBackgroundColor(System.String)">
<summary>
 Sets the background color of the window as a hexadecimal value, like
 #66CD00 or #FFF or #80FFFFFF (alpha is supported if transparent is true).
 Default is #FFF (white).
</summary>
</member>
<member name="M:Electron.BrowserWindow.setAutoHideMenuBar(System.Boolean)">
<summary>
 Sets whether the window menu bar should hide itself automatically. Once
 set the menu bar will only show when users press the single Alt key.

 If the menu bar is already visible, calling setAutoHideMenuBar(true) won&apos;t
 hide it immediately.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setAutoHideCursor(System.Boolean)">
<summary>
 [macOS] Controls whether to hide cursor when typing.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setAspectRatio(System.Double,Microsoft.FSharp.Core.FSharpOption{Electron.Size})">
 <summary>
   [macOS, Linux] This will make a window maintain an aspect ratio. The extra size
   allows a developer to have space, specified in pixels, not included within the
   aspect ratio calculations. This API already takes into account the difference
   between a window's size and its content size.

   Consider a normal window with an HD video player and associated controls. Perhaps
   there are 15 pixels of controls on the left edge, 25 pixels of controls on the
   right edge and 50 pixels of controls below the player. In order to maintain a 16:9
   aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself we
   would call this function with arguments of 16/9 and { width: 40, height: 50 }. The
   second argument doesn't care where the extra width and height are within the
   content view--only that they exist. Sum any extra width and height areas you have
   within the overall content view.
 </summary>
 <param name="aspectRatio">
   The aspect ratio to maintain for some portion of the content view.
 </param>
 <param name="ertraSize">
   [macOS] The extra size not to be included while maintaining the aspect ratio.
 </param>
</member>
<member name="M:Electron.BrowserWindow.setAppDetails(Electron.AppDetailsOptions)">
<summary>
 Sets the properties for the window&apos;s taskbar button.

 Note: relaunchCommand and relaunchDisplayName must always be set together.
 If one of those properties is not set, then neither will be used.
</summary>
</member>
<member name="M:Electron.BrowserWindow.setAlwaysOnTop(System.Boolean,Microsoft.FSharp.Core.FSharpOption{Electron.AlwaysOnTopLevel},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets whether the window should show always on top of other windows. After
 setting this, the window is still a normal window, not a toolbox window
 which can not be focused on.

 `level` is macOS/Windows only. The default level is `Floating` when `flag`
 is `true`. The `level` is reset to `Normal` when the `flag` is `false`.
 Note that from floating to status included, the window is placed below the
 Dock on macOS and below the taskbar on Windows. From pop-up-menu to a
 higher it is shown above the Dock on macOS and above the taskbar on
 Windows. See the macOS docs for more details.
</summary>
</member>
<member name="M:Electron.BrowserWindow.selectPreviousTab">
<summary>
 [macOS] Selects the previous tab when native tabs are enabled and there
 are other tabs in the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.selectNextTab">
<summary>
 [macOS] Selects the next tab when native tabs are enabled and there are
 other tabs in the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.restore">
<summary>
 Restores the window from minimized state to its previous state.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeMenu">
<summary>
 [Windows, Linux] Remove the window&apos;s menu bar.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerWillResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillResize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerWillMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillMove.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnresponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerUnmaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnmaximize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerSwipe(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.SwipeDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onSwipe.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerSheetEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSheetEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerSheetBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSheetBegin.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerSessionEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSessionEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerScrollTouchEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerScrollTouchEdge(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchEdge.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerScrollTouchBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchBegin.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerRotateGesture(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRotateGesture.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerRestore(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRestore.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerResponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerReadyToShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onReadyToShow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerPageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPageTitleUpdated.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onNewWindowForTab.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerMoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMoved.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMove.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerMinimize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMinimize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerMaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMaximize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerLeaveFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerHide(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onHide.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onFocus.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerEnterFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClosed.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBlur.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerAppCommand(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAppCommand.
</summary>
</member>
<member name="M:Electron.BrowserWindow.removeListenerAlwaysOnTopChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAlwaysOnTopChanged.
</summary>
</member>
<member name="M:Electron.BrowserWindow.reload">
<summary>
 Same as webContents.reload.
</summary>
</member>
<member name="M:Electron.BrowserWindow.previewFile(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
   [macOS] Uses Quick Look to preview a file at a given path.
 </summary>
 <param name="path">
   The absolute path to the file to preview with QuickLook. This is
   important as Quick Look uses the file name and file extension on the
   path to determine the content type of the file to open.
 </param>
 <param name="displayName">
   The name of the file to display on the Quick Look modal view. This is
   purely visual and does not affect the content type of the file. Defaults
   to path.
 </param>
</member>
<member name="M:Electron.BrowserWindow.onceWillResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillResize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceWillMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillMove.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnresponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceUnmaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnmaximize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceSwipe(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.SwipeDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onSwipe.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceSheetEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSheetEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceSheetBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSheetBegin.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceSessionEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSessionEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceScrollTouchEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceScrollTouchEdge(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchEdge.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceScrollTouchBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchBegin.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceRotateGesture(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRotateGesture.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceRestore(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRestore.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceResponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceReadyToShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onReadyToShow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.oncePageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPageTitleUpdated.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onNewWindowForTab.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceMoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMoved.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMove.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceMinimize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMinimize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceMaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMaximize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceLeaveFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceHide(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onHide.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onFocus.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceEnterFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClosed.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBlur.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceAppCommand(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAppCommand.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onceAlwaysOnTopChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAlwaysOnTopChanged.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onWillResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS, Windows] Emitted before the window is resized. Calling
 event.preventDefault() will prevent the window from being resized.

 Note that this is only emitted when the window is being resized manually.
 Resizing the window with setBounds/setSize will not emit this event.

 Parameters:

   - event
   - newBounds: Size the window is being resized to.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onWillMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS; Windows] Emitted before the window is moved. On Windows, calling
 `event.preventDefault()` will prevent the window from being moved. Note that this is
 only emitted when the window is being resized manually. Resizing the window with
 `setBounds`/`setSize` will not emit this event.

 Parameters:

   - event
   - newBounds: Location the window is being moved to.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the web page becomes unresponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onUnmaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window exits from a maximized state.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onSwipe(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.SwipeDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted on 3-finger swipe.

 The method underlying this event is built to handle older macOS-style trackpad
 swiping, where the content on the screen doesn&apos;t move with the swipe. Most macOS
 trackpads are not configured to allow this kind of swiping anymore, so in order for
 it to emit properly the &apos;Swipe between pages&apos; preference in System Preferences &gt;
 Trackpad &gt; More Gestures must be set to &apos;Swipe with two or three fingers&apos;.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is shown.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onSheetEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when the window has closed a sheet.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onSheetBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when the window opens a sheet.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onSessionEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Emitted when window session is going to end due to force
 shutdown or machine restart or session log off.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onScrollTouchEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when scroll wheel event phase has ended.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onScrollTouchEdge(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when scroll wheel event phase filed upon reaching the edge
 of element.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onScrollTouchBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when scroll wheel event phase has begun.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onRotateGesture(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted on trackpad rotation gesture. Continually emitted until
 rotation gesture is ended. The `rotation` value on each emission is the
 angle in degrees rotated since the last emission. The last emitted event
 upon a rotation gesture will always be of value 0. Counter-clockwise
 rotation values are positive, while clockwise ones are negative.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onRestore(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is restored from a minimized state.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onResponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the unresponsive web page becomes responsive again.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted after the window has been resized.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onReadyToShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the web page has been rendered (while not being shown) and
 window can be displayed without a visual flash.

 Please note that using this event implies that the renderer will be
 considered &quot;visible&quot; and paint even though `show` is false. This event
 will never fire if you use `paintWhenInitiallyHidden: false`.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onPageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when the document changed its title, calling
 event.preventDefault() will prevent the native window&apos;s title from
 changing. `explicitSet` is false when title is synthesized from file URL.

 Parameters:

   - event
   - title
   - explicitSet
</summary>
</member>
<member name="M:Electron.BrowserWindow.onNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when the native new tab button is clicked.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onMoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted once when the window is moved to a new position.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is being moved to a new position.

 Note: On macOS this event is an alias of `moved`.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onMinimize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is minimized.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onMaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when window is maximized.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window leaves a full-screen state triggered by HTML API.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onLeaveFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window leaves a full-screen state.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onHide(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is hidden.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window gains focus.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window enters a full-screen state triggered by HTML API.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onEnterFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window enters a full-screen state.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is closed. After you have received this event you
 should remove the reference to the window and avoid using it any more.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window is going to be closed. It&apos;s emitted before the
 `beforeunload` and `unload` event of the DOM. Calling
 event.preventDefault() will cancel the close.

 Usually you would want to use the `beforeunload` handler to decide whether
 the window should be closed, which will also be called when the window is
 reloaded. In Electron, returning any value other than undefined would
 cancel the close.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the window loses focus.
</summary>
</member>
<member name="M:Electron.BrowserWindow.onAppCommand(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [Windows, Linux] Emitted when an App Command is invoked. These are
 typically related to keyboard media keys or browser commands, as well as
 the &quot;Back&quot; button built into some mice on Windows. Commands are
 lowercased, underscores are replaced with hyphens, and the APPCOMMAND_
 prefix is stripped off. e.g. APPCOMMAND_BROWSER_BACKWARD is emitted as
 browser-backward. The following app commands are explicitly supported on
 Linux: browser-backward, browser-forward

 Parameters:

   - event
   - command
</summary>
</member>
<member name="M:Electron.BrowserWindow.onAlwaysOnTopChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the window is set or unset to show always on top of
 other windows.

 Parameters:

   - event
   - isAlwaysOnTop
</summary>
</member>
<member name="M:Electron.BrowserWindow.moveTop">
<summary>
 Moves window to top(z-order) regardless of focus
</summary>
</member>
<member name="M:Electron.BrowserWindow.moveTabToNewWindow">
<summary>
 [macOS] Moves the current tab into a new window if native tabs are enabled
 and there is more than one tab in the current window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.moveAbove(System.String)">
 <summary>
   Moves the window above the source window in the sense of z-order. If the
   `mediaSourceId` is not of type window or if the window does not exist then this
   method throws an error.
 </summary>
 <param name="mediaSourceId">
   Window id in the format of DesktopCapturerSource's id. For example
   "window:1869:0".
 </param>
</member>
<member name="M:Electron.BrowserWindow.minimize">
<summary>
 Minimizes the window. On some platforms the minimized window will be shown
 in the Dock.
</summary>
</member>
<member name="M:Electron.BrowserWindow.mergeAllWindows">
<summary>
 [macOS] Merges all windows into one window with multiple tabs when native
 tabs are enabled and there is more than one open window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.maximize">
<summary>
 Maximizes the window. This will also show (but not focus) the window if it
 isn&apos;t being displayed already.
</summary>
</member>
<member name="M:Electron.BrowserWindow.loadURL(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.LoadURLOptions})">
<summary>
 Returns a promise that will resolve when the page has finished loading
 (see `did-finish-load`), and rejects if the page fails to load (see
 `did-fail-load`).

 Same as webContents.loadURL(url[, options]). The url can be a remote
 address (e.g. http://) or a path to a local HTML file using the file://
 protocol. To ensure that file URLs are properly formatted, it is
 recommended to use Node&apos;s url.format method.
</summary>
</member>
<member name="M:Electron.BrowserWindow.loadFile(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.LoadFileOptions})">
<summary>
 Returns a promise that will resolve when the page has finished loading
 (see `did-finish-load`), and rejects if the page fails to load (see
 `did-fail-load`).

 Same as webContents.loadFile, filePath should be a path to an HTML file
 relative to the root of your application.  See the webContents docs for
 more information.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isWindowMessageHooked(System.Int32)">
<summary>
 [Windows] Indicates whether the message is hooked.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isVisibleOnAllWorkspaces">
<summary>
 [macOS, Linux] Indicates whether the window is visible on all workspaces.

 Note: This API always returns false on Windows.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isVisible">
<summary>
 Indicates whether the window is visible to the user.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isSimpleFullScreen">
<summary>
 [macOS] Indicates whether the window is in simple (pre-Lion) fullscreen
 mode.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isResizable">
<summary>
 Indicates whether the window can be manually resized by the user.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isNormal">
<summary>
 Indicates whether the window is in normal state (not maximized, not
 minimized, not in fullscreen mode).
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMovable">
<summary>
 [macOS, Windows] Indicates whether the window can be moved by user. On
 Linux always returns true.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isModal">
<summary>
 Indicates whether current window is a modal window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMinimized">
<summary>
 Indicates whether the window is minimized.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMinimizable">
<summary>
 [macOS, Windows] Indicates whether the window can be manually minimized by
 user. On Linux always returns true.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMenuBarVisible">
<summary>
 Indicates whether the menu bar is visible.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMenuBarAutoHide">
<summary>
 Indicates whether menu bar automatically hides itself.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMaximized">
<summary>
 Indicates whether the window is maximized.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isMaximizable">
<summary>
 [Windows, macOS] Indicates whether the window can be manually maximized by
 user. On Linux always returns true.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isKiosk">
<summary>
 Indicates whether the window is in kiosk mode.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isFullScreenable">
<summary>
 Indicates whether the maximize/zoom window button toggles fullscreen mode
 or maximizes the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isFullScreen">
<summary>
 Indicates whether the window is in fullscreen mode.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isFocused">
<summary>
 Indicates whether the window is focused.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isEnabled">
<summary>
 Indicates whether the window is enabled.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isDocumentEdited">
<summary>
 [macOS] Indicates whether the window&apos;s document has been edited.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isDestroyed">
<summary>
 Indicates whether the window is destroyed.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isClosable">
<summary>
 [macOS, Windows] Indicates whether the window can be manually closed by
 user. On Linux always returns true.
</summary>
</member>
<member name="M:Electron.BrowserWindow.isAlwaysOnTop">
<summary>
 Indicates whether the window is always on top of other windows.
</summary>
</member>
<member name="M:Electron.BrowserWindow.hookWindowMessage(System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [Windows] Hooks a windows message. The callback is called when the message
 is received in the WndProc.
</summary>
</member>
<member name="M:Electron.BrowserWindow.hide">
<summary>
 Hides the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.hasShadow">
<summary>
 [macOS] Indicates whether the window has a shadow. On Windows and Linux
 always returns true.
</summary>
</member>
<member name="P:Electron.BrowserWindow.webContents">
<summary>
 A WebContents object this window owns. All web page related events and
 operations will be done via it.
</summary>
</member>
<member name="P:Electron.BrowserWindow.visibleOnAllWorkspaces">
<summary>
 Determines whether the window is visible on all workspaces.

 **Note:** Always returns false on Windows.
</summary>
</member>
<member name="P:Electron.BrowserWindow.title">
<summary>
 Determines the title of the native window.

 **Note:** The title of the web page can be different from the title of the native
 window.
</summary>
</member>
<member name="P:Electron.BrowserWindow.simpleFullScreen">
<summary>
 Determines whether the window is in simple (pre-Lion) fullscreen mode.
</summary>
</member>
<member name="P:Electron.BrowserWindow.shadow">
<summary>
 Determines whether the window has a shadow.
</summary>
</member>
<member name="P:Electron.BrowserWindow.resizable">
<summary>
 Determines whether the window can be manually resized by user.
</summary>
</member>
<member name="P:Electron.BrowserWindow.representedFilename">
<summary>
 [macOS] Determines the pathname of the file the window represents, and the icon of
 the file will show in window&apos;s title bar.
</summary>
</member>
<member name="P:Electron.BrowserWindow.movable">
<summary>
 Determines Whether the window can be moved by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.minimizable">
<summary>
 Determines whether the window can be manually minimized by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.menuBarVisible">
<summary>
 [Windows, Linux] Determines whether the menu bar should be visible.

 **Note:** If the menu bar is auto-hide, users can still bring up the menu bar by
 pressing the single Alt key.
</summary>
</member>
<member name="P:Electron.BrowserWindow.maximizable">
<summary>
 Determines whether the window can be manually maximized by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.kiosk">
<summary>
 Determines whether the window is in kiosk mode.
</summary>
</member>
<member name="P:Electron.BrowserWindow.id">
<summary>
 An integer representing the unique ID of the window. Each ID is unique among all
 BrowserWindow instances of the entire Electron application.
</summary>
</member>
<member name="P:Electron.BrowserWindow.fullScreenable">
<summary>
 Determines whether the maximize/zoom window button toggles fullscreen mode
 or maximizes the window.
</summary>
</member>
<member name="P:Electron.BrowserWindow.fullScreen">
<summary>
 Determines whether the window is in fullscreen mode.
</summary>
</member>
<member name="P:Electron.BrowserWindow.excludedFromShownWindowsMenu">
<summary>
 [macOS] Determines whether the window is excluded from the application’s
 Windows menu. `false` by default.
</summary>
</member>
<member name="P:Electron.BrowserWindow.documentEdited">
<summary>
 [macOS] Specifies whether the window’s document has been edited.

 The icon in title bar will become gray when set to true.
</summary>
</member>
<member name="P:Electron.BrowserWindow.closable">
<summary>
 Determines whether the window can be manually closed by user.

 On Linux the setter is a no-op, although the getter returns `true`.
</summary>
</member>
<member name="P:Electron.BrowserWindow.autoHideMenuBar">
<summary>
 Determines whether the window menu bar should hide itself automatically.
 Once set, the menu bar will only show when users press the single Alt key.

 If the menu bar is already visible, setting this property to true won&apos;t
 hide it immediately.
</summary>
</member>
<member name="P:Electron.BrowserWindow.accessibleTitle">
<summary>
 Defines an alternative title provided only to accessibility tools such as screen
 readers. This string is not directly visible to users.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getTitle">
<summary>
 Returns the title of the native window.

 Note: The title of the web page can be different from the title of the
 native window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getSize">
<summary>
 Returns the window&apos;s width and height.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getRepresentedFilename">
<summary>
 [macOS] Returns the pathname of the file the window represents.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getPosition">
<summary>
 Returns the window&apos;s current position.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getParentWindow">
<summary>
 Returns the parent window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getOpacity">
<summary>
 Returns a number between 0.0 (fully transparent) and 1.0 (fully opaque).
 On Linux, always returns 1.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getNormalBounds">
<summary>
 Returns a Rectangle that contains the window bounds of the normal state.

 Note: whatever the current state of the window : maximized, minimized or
 in fullscreen, this function always returns the position and size of the
 window in normal state. In normal state, getBounds and getNormalBounds
 returns the same Rectangle.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getNativeWindowHandle">
<summary>
 The native type of the handle is HWND on Windows, NSView* on macOS, and
 Window (unsigned long) on Linux.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getMinimumSize">
<summary>
 Returns the window&apos;s minimum width and height.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getMediaSourceId">
<summary>
 Returns the window id in the format of DesktopCapturerSource&apos;s id. For example
 &quot;window:0&quot;.

 More precisely the format is `window:id:other_id` where `id` is `HWND` on Windows,
 `CGWindowID` (`uint64_t`) on macOS and `Window` (`unsigned long`) on Linux.
 `other_id` is used to identify web contents (tabs) within the same top level window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getMaximumSize">
<summary>
 Returns the window&apos;s maximum width and height.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getContentSize">
<summary>
 Returns the window&apos;s client area&apos;s width and height.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getChildWindows">
<summary>
 Returns all child windows.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getBrowserViews">
<summary>
 Returns array of BrowserView what was an attached with `addBrowserView` or
 `setBrowserView`.

 Note: The BrowserView API is currently experimental and may change or be
 removed in future Electron releases.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getBrowserView">
<summary>
 Returns the BrowserView attached to the window. Returns None if one is not attached.
 Throws an error if multiple BrowserViews are attached.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getBounds">
<summary>
 Returns the bounds of this BrowserView instance.
</summary>
</member>
<member name="M:Electron.BrowserWindow.getBackgroundColor">
<summary>
 Returns the background color of the window. See [Setting
 `backgroundColor`](https://www.electronjs.org/docs/api/browser-window#setting-backgroundcolor).
</summary>
</member>
<member name="M:Electron.BrowserWindow.focus">
<summary>
 Focuses on the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.flashFrame(System.Boolean)">
<summary>
 Starts or stops flashing the window to attract user&apos;s attention.
</summary>
</member>
<member name="M:Electron.BrowserWindow.destroy">
<summary>
 Force closing the window, the `unload` and `beforeunload` event won&apos;t be
 emitted for the web page, and `close` event will also not be emitted for
 this window, but it guarantees the `closed` event will be emitted.
</summary>
</member>
<member name="M:Electron.BrowserWindow.closeFilePreview">
<summary>
 [macOS] Closes the currently open Quick Look panel.
</summary>
</member>
<member name="M:Electron.BrowserWindow.close">
<summary>
 Try to close the window. This has the same effect as a user manually
 clicking the close button of the window. The web page may cancel the close
 though (see the `close` event).
</summary>
</member>
<member name="M:Electron.BrowserWindow.center">
<summary>
 Moves window to the center of the screen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.capturePage(Microsoft.FSharp.Core.FSharpOption{Electron.Rectangle})">
<summary>
 Captures a snapshot of the page within rect. Omitting rect will capture
 the whole visible page.
</summary>
</member>
<member name="M:Electron.BrowserWindow.blur">
<summary>
 Removes focus from the window.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addTabbedWindow(Electron.BrowserWindow)">
<summary>
 [macOS] Adds a window as a tab on this window, after the tab for the
 window instance.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerWillResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillResize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerWillMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Rectangle,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillMove.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerUnresponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnresponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerUnmaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUnmaximize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerSwipe(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.SwipeDirection,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onSwipe.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onShow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerSheetEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSheetEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerSheetBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSheetBegin.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerSessionEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSessionEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerScrollTouchEnd(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchEnd.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerScrollTouchEdge(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchEdge.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerScrollTouchBegin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onScrollTouchBegin.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerRotateGesture(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRotateGesture.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerRestore(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onRestore.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerResponsive(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResponsive.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerResize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onResize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerReadyToShow(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onReadyToShow.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerPageTitleUpdated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onPageTitleUpdated.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onNewWindowForTab.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerMoved(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMoved.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerMove(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMove.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerMinimize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMinimize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerMaximize(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onMaximize.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerLeaveHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerLeaveFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onLeaveFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerHide(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onHide.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onFocus.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerEnterHtmlFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterHtmlFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerEnterFullScreen(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onEnterFullScreen.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClosed.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerClose(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onClose.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBlur.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerAppCommand(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAppCommand.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addListenerAlwaysOnTopChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAlwaysOnTopChanged.
</summary>
</member>
<member name="M:Electron.BrowserWindow.addBrowserView(Electron.BrowserView)">
<summary>
 Replacement API for setBrowserView supporting work with multi browser
 views.
</summary>
</member>
<member name="T:Electron.AlwaysOnTopLevel.PopUpMenu">
<summary>
 Note: The window is placed above the Dock on macOS and above the taskbar
 on Windows.
</summary>
</member>
<member name="T:Electron.AlwaysOnTopLevel.Status">
<summary>
 Note: The window is placed below the Dock on macOS and below the taskbar
 on Windows.
</summary>
</member>
<member name="T:Electron.AlwaysOnTopLevel.MainMenu">
<summary>
 Note: The window is placed below the Dock on macOS and below the taskbar
 on Windows.
</summary>
</member>
<member name="T:Electron.AlwaysOnTopLevel.ModalPanel">
<summary>
 Note: The window is placed below the Dock on macOS and below the taskbar
 on Windows.
</summary>
</member>
<member name="T:Electron.AlwaysOnTopLevel.TornOffMenu">
<summary>
 Note: The window is placed below the Dock on macOS and below the taskbar
 on Windows.
</summary>
</member>
<member name="T:Electron.AlwaysOnTopLevel.Floating">
<summary>
 Note: The window is placed below the Dock on macOS and below the taskbar
 on Windows.
</summary>
</member>
<member name="M:Electron.BrowserViewStatic.getAllViews">
<summary>
 Returns all opened BrowserViews.
</summary>
</member>
<member name="M:Electron.BrowserViewStatic.fromWebContents(Electron.WebContents)">
<summary>
 Returns the BrowserView that owns the given webContents or None if the
 contents are not owned by a BrowserView.
</summary>
</member>
<member name="M:Electron.BrowserViewStatic.fromId(System.Int32)">
<summary>
 Returns the BrowserView with the given id.
</summary>
</member>
<member name="M:Electron.BrowserViewStatic.Create(Microsoft.FSharp.Core.FSharpOption{Electron.BrowserViewOptions})">
<summary>
 Instantiates a BrowserWindow.
</summary>
</member>
<member name="M:Electron.BrowserView.setBackgroundColor(System.String)">
<summary>
 Sets the background color. Accepted formats: #aarrggbb, #rrggbb, #argb,
 #rgb.
</summary>
</member>
<member name="M:Electron.BrowserView.setAutoResize(Electron.AutoResizeOptions)">
<summary>
 Sets whether the view&apos;s height and/or width will grow and shrink together
 with the window.
</summary>
</member>
<member name="M:Electron.BrowserView.isDestroyed">
<summary>
 Indicates whether the view is destroyed.
</summary>
</member>
<member name="P:Electron.BrowserView.webContents">
<summary>
 A WebContents object owned by this view.
</summary>
</member>
<member name="P:Electron.BrowserView.id">
<summary>
 An integer representing the unique ID of the view.
</summary>
</member>
<member name="M:Electron.BrowserView.destroy">
<summary>
 Force closing the view, the `unload` and `beforeunload` events won&apos;t be
 emitted for the web page. After you&apos;re done with a view, call this
 function in order to free memory and other resources as soon as possible.
</summary>
</member>
<member name="T:Electron.BrowserView">
<summary>
 A BrowserView can be used to embed additional web content into a
 BrowserWindow. It is like a child window, except that it is positioned
 relative to its owning window.
</summary>
</member>
<member name="M:Electron.AutoUpdater.setFeedURL(Electron.AutoUpdateFeedOptions)">
<summary>
 Sets the url and initialize the auto updater.
</summary>
</member>
<member name="M:Electron.AutoUpdater.removeListenerUpdateNotAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdateNotAvailable.
</summary>
</member>
<member name="M:Electron.AutoUpdater.removeListenerUpdateDownloaded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.DateTime,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onUpdateDownloaded.
</summary>
</member>
<member name="M:Electron.AutoUpdater.removeListenerUpdateAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdateAvailable.
</summary>
</member>
<member name="M:Electron.AutoUpdater.removeListenerError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.AutoUpdater.removeListenerCheckingForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onCheckingForUpdate.
</summary>
</member>
<member name="M:Electron.AutoUpdater.removeListenerBeforeQuitForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBeforeQuitForUpdate.
</summary>
</member>
<member name="M:Electron.AutoUpdater.quitAndInstall">
<summary>
 Restarts the app and installs the update after it has been downloaded. It
 should only be called after `update-downloaded` has been emitted.

 Under the hood calling autoUpdater.quitAndInstall() will close all
 application windows first, and automatically call app.quit() after all
 windows have been closed.

 Note: It is not strictly necessary to call this function to apply an
 update, as a successfully downloaded update will always be applied the
 next time the application starts.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onceUpdateNotAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdateNotAvailable.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onceUpdateDownloaded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.DateTime,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onUpdateDownloaded.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onceUpdateAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdateAvailable.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onceError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onceCheckingForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onCheckingForUpdate.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onceBeforeQuitForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBeforeQuitForUpdate.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onUpdateNotAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when there is no available update.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onUpdateDownloaded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.DateTime,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Emitted when an update has been downloaded.

 On Windows only `releaseName` is available.

 Note: It is not strictly necessary to handle this event. A successfully
 downloaded update will still be applied the next time the application
 starts.

 Parameters:

   - event
   - releaseNotes
   - releaseName
   - releaseDate
   - updateUrl
</summary>
</member>
<member name="M:Electron.AutoUpdater.onUpdateAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when there is an available update. The update is downloaded
 automatically.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when there is an error while updating.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onCheckingForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when checking if an update exists has started.
</summary>
</member>
<member name="M:Electron.AutoUpdater.onBeforeQuitForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 This event is emitted after a user calls quitAndInstall().

 When this API is called, the `before-quit` event is not emitted before all
 windows are closed. As a result you should listen to this event if you
 wish to perform actions before the windows are closed while a process is
 quitting, as well as listening to `before-quit`.
</summary>
</member>
<member name="M:Electron.AutoUpdater.getFeedURL">
<summary>
 Returns the current update feed URL.
</summary>
</member>
<member name="M:Electron.AutoUpdater.checkForUpdates">
<summary>
 Asks the server whether there is an update. You must call `setFeedURL`
 before using this API.
</summary>
</member>
<member name="M:Electron.AutoUpdater.addListenerUpdateNotAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdateNotAvailable.
</summary>
</member>
<member name="M:Electron.AutoUpdater.addListenerUpdateDownloaded(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.DateTime,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onUpdateDownloaded.
</summary>
</member>
<member name="M:Electron.AutoUpdater.addListenerUpdateAvailable(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onUpdateAvailable.
</summary>
</member>
<member name="M:Electron.AutoUpdater.addListenerError(Microsoft.FSharp.Core.FSharpFunc{Node.Base.Error,Microsoft.FSharp.Core.Unit})">
<summary>
 See onError.
</summary>
</member>
<member name="M:Electron.AutoUpdater.addListenerCheckingForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onCheckingForUpdate.
</summary>
</member>
<member name="M:Electron.AutoUpdater.addListenerBeforeQuitForUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBeforeQuitForUpdate.
</summary>
</member>
<member name="M:Electron.App.whenReady">
<summary>
 Returns a promise that is fulfilled when Electron is initialized. May be
 used as a convenient alternative to checking app.isReady() and subscribing
 to the `ready` event if the app is not ready yet.
</summary>
</member>
<member name="M:Electron.App.updateCurrentActivity(System.String,Microsoft.FSharp.Core.FSharpOption{System.Object})">
 <summary>
   [macOS] Updates the current activity if its type matches `type`, merging
   the entries from `userInfo` into its current `userInfo` dictionary.
 </summary>
 <param name="type">
   Uniquely identifies the activity. Maps to NSUserActivity.activityType.
 </param>
 <param name="userInfo">
   App-specific state to store for use by another device.
 </param>
</member>
<member name="M:Electron.App.startAccessingSecurityScopedResource(System.String)">
<summary>
 [macOS (Mac App Store)] Start accessing a security scoped resource. With
 this method Electron applications that are packaged for the Mac App Store
 may reach outside their sandbox to access files chosen by the user. See
 Apple&apos;s documentation for a description of how this system works.

 Note: The returned function MUST be called once you have finished
 accessing the security scoped file. If you do not remember to stop
 accessing the bookmark, kernel resources will be leaked and your app will
 lose its ability to reach outside the sandbox completely, until your app
 is restarted.
</summary>
</member>
<member name="M:Electron.App.showEmojiPanel">
<summary>
 [macOS, Windows] Show the platform&apos;s native emoji picker.
</summary>
</member>
<member name="M:Electron.App.showAboutPanel">
<summary>
 [macOS, Linux] Show the app&apos;s about panel options. These options can be
 overridden with app.setAboutPanelOptions(options).
</summary>
</member>
<member name="M:Electron.App.show">
<summary>
 [macOS] Shows application windows after they were hidden. Does not
 automatically focus them.
</summary>
</member>
<member name="P:Electron.App.userAgentFallback(System.String)">
<summary>
 The user agent string Electron will use as a global fallback.

 This is the user agent that will be used when no user agent is set at the
 webContents or session level. It is useful for ensuring that your entire
 app has the same user agent. Set to a custom value as early as possible in
 your app&apos;s initialization to ensure that your overridden value is used.
</summary>
</member>
<member name="P:Electron.App.name(System.String)">
<summary>
 Indicates the current application&apos;s name, which is the name in the
 application&apos;s `package.json` file.

 Usually the `name` field of `package.json` is a short lowercase name,
 according to the npm modules spec. You should usually also specify a
 `productName` field, which is your application&apos;s full capitalized name,
 and which will be preferred over `name` by Electron.
</summary>
</member>
<member name="P:Electron.App.badgeCount(System.Int32)">
<summary>
 [Linux, macOS] Returns the badge count for current app. Setting the count
 to 0 will hide the badge.

 On macOS, setting this to any nonzero integer shows on the dock icon. On
 Linux, this property only works for Unity launcher.

 Note: Unity launcher requires the existence of a .desktop file to work,
 for more information please read [Desktop Environment
 Integration](https://electronjs.org/docs/tutorial/desktop-environment-integration#unity-launcher).
</summary>
</member>
<member name="P:Electron.App.applicationMenu(Microsoft.FSharp.Core.FSharpOption{Electron.Menu})">
<summary>
 Gets or sets the application menu.
</summary>
</member>
<member name="P:Electron.App.allowRendererProcessReuse(System.Boolean)">
<summary>
 A `Boolean` which when `true` disables the overrides that Electron has in
 place to ensure renderer processes are restarted on every navigation. The
 current default value for this property is `false`.

 The intention is for these overrides to become disabled by default and
 then at some point in the future this property will be removed. This
 property impacts which native modules you can use in the renderer process.
 For more information on the direction Electron is going with renderer
 process restarts and usage of native modules in the renderer process
 please check out this tracking issue:
 https://github.com/electron/electron/issues/18397
</summary>
</member>
<member name="P:Electron.App.accessibilitySupportEnabled(System.Boolean)">
<summary>
 A Boolean property that&apos;s `true` if Chrome&apos;s accessibility support is
 enabled, `false` otherwise. This property will be `true` if the use of
 assistive technologies, such as screen readers, has been detected. Setting
 this property to `true` manually enables Chrome&apos;s accessibility support,
 allowing developers to expose accessibility switch to users in application
 settings.

 See [Chromium&apos;s accessibility
 docs](https://www.chromium.org/developers/design-documents/accessibility)
 for more details. Disabled by default.

 This API must be called after the `ready` event is emitted.

 Note: Rendering accessibility tree can significantly affect the
 performance of your app. It should not be enabled by default.
</summary>
</member>
<member name="M:Electron.App.setUserTasks(Electron.Task[])">
<summary>
 [Windows] Adds `tasks` to the Tasks category of the Jump List on Windows.

 Note: If you&apos;d like to customize the Jump List even more, use
 app.setJumpList(categories) instead.
</summary>
</member>
<member name="M:Electron.App.setUserActivity(System.String,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
   [macOS] Creates an NSUserActivity and sets it as the current activity.
   The activity is eligible for Handoff to another device afterward.
 </summary>
 <param name="type">
   Uniquely identifies the activity. Maps to NSUserActivity.activityType.
 </param>
 <param name="userInfo">
   App-specific state to store for use by another device.
 </param>
 <param name="webpageURL">
   The web page to load in a browser if no suitable app is installed on the
   resuming device. The scheme must be http or https.
 </param>
</member>
<member name="M:Electron.App.setPath(Electron.AppPathName,System.String)">
<summary>
 Overrides the `path` to a special directory or file associated with
 `name`.

 If the path specifies a directory that does not exist, an Error is thrown.
 In that case, the directory should be created with fs.mkdirSync or
 similar.

 By default, web pages&apos; cookies and caches will be stored under the
 UserData directory. If you want to change this location, you have to
 override the UserData path before the `ready` event of the app module is
 emitted.
</summary>
</member>
<member name="M:Electron.App.setName(System.String)">
<summary>
 Overrides the current application&apos;s name.

 **Note:** This function overrides the name used internally by Electron; it does not
 affect the name that the OS uses.
</summary>
</member>
<member name="M:Electron.App.setLoginItemSettings(Electron.SetLoginItemSettings)">
<summary>
 Set the app&apos;s login item settings.

 To work with Electron&apos;s autoUpdater on Windows, which uses Squirrel,
 you&apos;ll want to set the launch path to Update.exe, and pass arguments that
 specify your application name.
</summary>
</member>
<member name="M:Electron.App.setJumpList(Microsoft.FSharp.Core.FSharpOption{Electron.JumpListCategory[]})">
<summary>
 Sets or removes a custom Jump List for the application.

 If categories is None the previously set custom Jump List (if any) will
 be replaced by the standard Jump List for the app (managed by Windows).

 Note: If a JumpListCategory object has neither the `type` nor the `name`
 property set then its `type` is assumed to be `tasks`. If the `name`
 property is set but the `type` property is omitted then the `type` is
 assumed to be `custom`.

 Note: Users can remove items from custom categories, and Windows will not
 allow a removed item to be added back into a custom category until after
 the next successful call to app.setJumpList(categories). Any attempt to
 re-add a removed item to a custom category earlier than that will result
 in the entire custom category being omitted from the Jump List. The list
 of removed items can be obtained using app.getJumpListSettings().
</summary>
</member>
<member name="M:Electron.App.setBadgeCount(System.Int32)">
<summary>
 [Linux, macOS] Sets the counter badge for current app. Setting the count
 to 0 will hide the badge.

 On macOS, it shows on the dock icon. On Linux, it only works for Unity
 launcher.

 Note: Unity launcher requires the existence of a .desktop file to work.
 For more information please read Desktop Environment Integration:
 https://electronjs.org/docs/tutorial/desktop-environment-integration#unity-launcher
</summary>
</member>
<member name="M:Electron.App.setAsDefaultProtocolClient(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String[]})">
 <summary>
   Sets the current executable as the default handler for a protocol (aka URI
   scheme). It allows you to integrate your app deeper into the operating system.
   Once registered, all links with `your-protocol://` will be opened with the current
   executable. The whole link, including protocol, will be passed to your application
   as a parameter.

   Returns a value indicating whether the call succeeded.

   Note: On macOS, you can only register protocols that have been added to your app's
   info.plist, which can not be modified at runtime. However, you can change the file
   during build time via Electron Forge, Electron Packager, or by editing info.plist
   with a text editor. Please refer to Apple's documentation for details.

   Note: In a Windows Store environment (when packaged as an `appx`) this API will
   return `true` for all calls but the registry key it sets won't be accessible by
   other applications.  In order to register your Windows Store application as a
   default protocol handler you must declare the protocol in your manifest:
   https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-protocol

   The API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.
 </summary>
 <param name="protocol">
   The name of your protocol, without `://`. For example, if you want your app to
   handle `electron://` links, pass `electron` as the value for this parameter.
 </param>
 <param name="path">The path to the Electron executable.</param>
 <param name="args">Arguments passed to the executable.</param>
</member>
<member name="M:Electron.App.setAppUserModelId(System.String)">
<summary>
 Changes the Application User Model ID to `id`. More info:
 https://docs.microsoft.com/en-us/windows/desktop/shell/appids
</summary>
</member>
<member name="M:Electron.App.setAppLogsPath(Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Sets or creates a directory your app&apos;s logs which can then be manipulated
 with app.getPath() or app.setPath(pathName, newPath). `path` must be
 absolute.

 Calling app.setAppLogsPath() without a path parameter will result in this
 directory being set to `~/Library/Logs/YourAppName` on macOS, and inside the
 `userData` directory on Linux and Windows.
</summary>
</member>
<member name="M:Electron.App.setActivationPolicy(Electron.ActivationPolicy)">
<summary>
 [macOS] Sets the activation policy for a given app.
</summary>
</member>
<member name="M:Electron.App.setAboutPanelOptions(Electron.AboutPanelOptions)">
<summary>
 [macOS, Linux] Set the about panel options. This will override the values defined in
 the app&apos;s `.plist` file on MacOS. See the Apple docs for more details. On Linux,
 values must be set in order to be shown; there are no defaults.

 If you do not set credits but still wish to surface them in your app, AppKit will
 look for a file named &quot;Credits.html&quot;, &quot;Credits.rtf&quot;, and &quot;Credits.rtfd&quot;, in that
 order, in the bundle returned by the NSBundle class method main. The first file
 found is used, and if none is found, the info area is left blank. See Apple
 documentation for more information.
</summary>
</member>
<member name="M:Electron.App.resignCurrentActivity">
<summary>
 [macOS] Marks the current Handoff user activity as inactive without
 invalidating it.
</summary>
</member>
<member name="M:Electron.App.requestSingleInstanceLock">
<summary>
 The return value of this method indicates whether or not this instance of
 your application successfully obtained the lock. If it failed to obtain
 the lock, you can assume that another instance of your application is
 already running with the lock and exit immediately.

 I.e. This method returns true if your process is the primary instance of
 your application and your app should continue loading. It returns false if
 your process should immediately quit as it has sent its parameters to
 another instance that has already acquired the lock.

 On macOS, the system enforces single instance automatically when users try
 to open a second instance of your app in Finder, and the `open-file` and
 `open-url` events will be emitted for that. However when users start your
 app in command line, the system&apos;s single instance mechanism will be
 bypassed, and you have to use this method to ensure single instance.
</summary>
</member>
<member name="M:Electron.App.removeListenerWindowAllClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWindowAllClosed.
</summary>
</member>
<member name="M:Electron.App.removeListenerWillQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillQuit.
</summary>
</member>
<member name="M:Electron.App.removeListenerWillFinishLaunching(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillFinishLaunching.
</summary>
</member>
<member name="M:Electron.App.removeListenerWillContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillContinueActivity.
</summary>
</member>
<member name="M:Electron.App.removeListenerWebContentsCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWebContentsCreated.
</summary>
</member>
<member name="M:Electron.App.removeListenerUpdateActivityState(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onUpdateActivityState.
</summary>
</member>
<member name="M:Electron.App.removeListenerSessionCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Session,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onSessionCreated.
</summary>
</member>
<member name="M:Electron.App.removeListenerSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onSelectClientCertificate.
</summary>
</member>
<member name="M:Electron.App.removeListenerSecondInstance(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onSecondInstance.
</summary>
</member>
<member name="M:Electron.App.removeListenerRendererProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRendererProcessCrashed.
</summary>
</member>
<member name="M:Electron.App.removeListenerRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteRequire.
</summary>
</member>
<member name="M:Electron.App.removeListenerRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteGetGlobal.
</summary>
</member>
<member name="M:Electron.App.removeListenerRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetCurrentWindow.
</summary>
</member>
<member name="M:Electron.App.removeListenerRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetCurrentWebContents.
</summary>
</member>
<member name="M:Electron.App.removeListenerRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteGetBuiltin.
</summary>
</member>
<member name="M:Electron.App.removeListenerReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onReady.
</summary>
</member>
<member name="M:Electron.App.removeListenerQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onQuit.
</summary>
</member>
<member name="M:Electron.App.removeListenerOpenUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onOpenUrl.
</summary>
</member>
<member name="M:Electron.App.removeListenerOpenFile(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onOpenFile.
</summary>
</member>
<member name="M:Electron.App.removeListenerNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onNewWindowForTab.
</summary>
</member>
<member name="M:Electron.App.removeListenerLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.App.removeListenerGpuProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onGpuProcessCrashed.
</summary>
</member>
<member name="M:Electron.App.removeListenerGpuInfoUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onGpuInfoUpdate.
</summary>
</member>
<member name="M:Electron.App.removeListenerDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDesktopCapturerGetSources.
</summary>
</member>
<member name="M:Electron.App.removeListenerContinueActivityError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onContinueActivityError.
</summary>
</member>
<member name="M:Electron.App.removeListenerContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onContinueActivity.
</summary>
</member>
<member name="M:Electron.App.removeListenerCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onCertificateError.
</summary>
</member>
<member name="M:Electron.App.removeListenerBrowserWindowFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowFocus.
</summary>
</member>
<member name="M:Electron.App.removeListenerBrowserWindowCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowCreated.
</summary>
</member>
<member name="M:Electron.App.removeListenerBrowserWindowBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowBlur.
</summary>
</member>
<member name="M:Electron.App.removeListenerBeforeQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBeforeQuit.
</summary>
</member>
<member name="M:Electron.App.removeListenerActivityWasContinued(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onActivityWasContinued.
</summary>
</member>
<member name="M:Electron.App.removeListenerActivate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onActivate.
</summary>
</member>
<member name="M:Electron.App.removeListenerAccessibilitySupportChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAccessibilitySupportChanged.
</summary>
</member>
<member name="M:Electron.App.removeAsDefaultProtocolClient(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String[]})">
<summary>
 This method checks if the current executable as the default handler for a
 protocol (aka URI scheme). If so, it will remove the app as the default
 handler.

 See `setAsDefaultProtocolClient` for more details. 
</summary>
</member>
<member name="M:Electron.App.releaseSingleInstanceLock">
<summary>
 Releases all locks that were created by requestSingleInstanceLock. This
 will allow multiple instances of the application to once again run side by
 side.
</summary>
</member>
<member name="M:Electron.App.relaunch(Microsoft.FSharp.Core.FSharpOption{Electron.RelaunchOptions})">
<summary>
 Relaunches the app when current instance exits.

 By default, the new instance will use the same working directory and
 command line arguments with current instance. When options.args is
 specified, the args will be passed as command line arguments instead. When
 options.execPath is specified, the execPath will be executed for relaunch
 instead of current app.

 Note that this method does not quit the app when executed. You have to
 call app.quit or app.exit after calling app.relaunch to make the app
 restart.

 When app.relaunch is called multiple times, multiple instances will be
 started after current instance exited.
</summary>
</member>
<member name="M:Electron.App.quit">
<summary>
 Try to close all windows. The `before-quit` event will be emitted first.
 If all windows are successfully closed, the `will-quit` event will be
 emitted and by default the application will terminate.

 This method guarantees that all `beforeunload` and `unload` event handlers
 are correctly executed. It is possible that a window cancels the quitting
 by returning `false` in the `beforeunload` event handler.
</summary>
</member>
<member name="M:Electron.App.onceWindowAllClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWindowAllClosed.
</summary>
</member>
<member name="M:Electron.App.onceWillQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillQuit.
</summary>
</member>
<member name="M:Electron.App.onceWillFinishLaunching(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillFinishLaunching.
</summary>
</member>
<member name="M:Electron.App.onceWillContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillContinueActivity.
</summary>
</member>
<member name="M:Electron.App.onceWebContentsCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWebContentsCreated.
</summary>
</member>
<member name="M:Electron.App.onceUpdateActivityState(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onUpdateActivityState.
</summary>
</member>
<member name="M:Electron.App.onceSessionCreated(Microsoft.FSharp.Core.FSharpFunc{Electron.Session,Microsoft.FSharp.Core.Unit})">
<summary>
 See onSessionCreated.
</summary>
</member>
<member name="M:Electron.App.onceSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onSelectClientCertificate.
</summary>
</member>
<member name="M:Electron.App.onceSecondInstance(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onSecondInstance.
</summary>
</member>
<member name="M:Electron.App.onceRendererProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRendererProcessCrashed.
</summary>
</member>
<member name="M:Electron.App.onceRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteRequire.
</summary>
</member>
<member name="M:Electron.App.onceRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteGetGlobal.
</summary>
</member>
<member name="M:Electron.App.onceRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetCurrentWindow.
</summary>
</member>
<member name="M:Electron.App.onceRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetCurrentWebContents.
</summary>
</member>
<member name="M:Electron.App.onceRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteGetBuiltin.
</summary>
</member>
<member name="M:Electron.App.onceReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onReady.
</summary>
</member>
<member name="M:Electron.App.onceQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onQuit.
</summary>
</member>
<member name="M:Electron.App.onceOpenUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onOpenUrl.
</summary>
</member>
<member name="M:Electron.App.onceOpenFile(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onOpenFile.
</summary>
</member>
<member name="M:Electron.App.onceNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onNewWindowForTab.
</summary>
</member>
<member name="M:Electron.App.onceLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.App.onceGpuProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onGpuProcessCrashed.
</summary>
</member>
<member name="M:Electron.App.onceGpuInfoUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onGpuInfoUpdate.
</summary>
</member>
<member name="M:Electron.App.onceDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDesktopCapturerGetSources.
</summary>
</member>
<member name="M:Electron.App.onceContinueActivityError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onContinueActivityError.
</summary>
</member>
<member name="M:Electron.App.onceContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onContinueActivity.
</summary>
</member>
<member name="M:Electron.App.onceCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onCertificateError.
</summary>
</member>
<member name="M:Electron.App.onceBrowserWindowFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowFocus.
</summary>
</member>
<member name="M:Electron.App.onceBrowserWindowCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowCreated.
</summary>
</member>
<member name="M:Electron.App.onceBrowserWindowBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowBlur.
</summary>
</member>
<member name="M:Electron.App.onceBeforeQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBeforeQuit.
</summary>
</member>
<member name="M:Electron.App.onceActivityWasContinued(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onActivityWasContinued.
</summary>
</member>
<member name="M:Electron.App.onceActivate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onActivate.
</summary>
</member>
<member name="M:Electron.App.onceAccessibilitySupportChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAccessibilitySupportChanged.
</summary>
</member>
<member name="M:Electron.App.onWindowAllClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when all windows have been closed. If you do not subscribe to this
 event and all windows are closed, the default behavior is to quit the app;
 however, if you subscribe, you control whether the app quits or not. If
 the user pressed Cmd + Q, or the developer called `app.quit()`, Electron
 will first try to close all the windows and then emit the `will-quit`
 event, and in this case the `window-all-closed` event would not be
 emitted.
</summary>
</member>
<member name="M:Electron.App.onWillQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when all windows have been closed and the application will quit.
 Calling `event.preventDefault()` will prevent the default behavior, which
 is terminating the application. See the description of `the
 window-all-closed` event for the differences between the `will-quit` and
 `window-all-closed` events.

 Note: On Windows, this event will not be emitted if the app is closed due
 to a shutdown/restart of the system or a user logout.
</summary>
</member>
<member name="M:Electron.App.onWillFinishLaunching(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when the application has finished basic startup. On Windows and
 Linux, the `will-finish-launching` event is the same as the `ready` event;
 on macOS, this event represents the `applicationWillFinishLaunching`
 notification of `NSApplication`. You would usually set up listeners for
 the `open-file` and `open-url` events here, and start the crash reporter
 and auto updater. In most cases, you should do everything in the `ready`
 event handler.
</summary>
</member>
<member name="M:Electron.App.onWillContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted during macOS Handoff before an activity from a different
 device wants to be resumed. You should call event.preventDefault() if you
 want to handle this event.

 Parameters:

   - event
   - type: A string identifying the activity. Maps to NSUserActivity.activityType.
</summary>
</member>
<member name="M:Electron.App.onWebContentsCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a new `webContents` is created.
</summary>
</member>
<member name="M:Electron.App.onUpdateActivityState(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Emitted when macOS Handoff is about to be resumed on another
 device. If you need to update the state to be transferred, you should call
 event.preventDefault() immediately, construct a new userInfo dictionary
 and call app.updateCurrentActiviy() in a timely manner. Otherwise, the
 operation will fail and `continue-activity-error` will be called.

 Parameters:

   - event
   - type: A string identifying the activity. Maps to NSUserActivity.activityType. 
   - userInfo: Contains app-specific state stored by the activity
</summary>
</member>
<member name="M:Electron.App.onSessionCreated(Microsoft.FSharp.Core.FSharpFunc{Electron.Session,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted when Electron has created a new session.
</summary>
</member>
<member name="M:Electron.App.onSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Emitted when a client certificate is requested. The `url` corresponds to
 the navigation entry requesting the client certificate and `callback` can
 be called with an entry filtered from the list. Using
 event.preventDefault() prevents the application from using the first
 certificate from the store.

 Parameters:

   - event
   - webContents
   - url
   - certificateList
   - callback
</summary>
</member>
<member name="M:Electron.App.onSecondInstance(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 This event will be emitted inside the primary instance of your application
 when a second instance has been executed and calls
 app.requestSingleInstanceLock(). Usually applications respond to this by
 making their primary window focused and non-minimized. This event is
 guaranteed to be emitted after the ready event of app gets emitted. Note:

 Note: Extra command line arguments might be added by Chromium, such as
 --original-process-start-time.

 Parameters:

   - event
   - argv: The second instance&apos;s command line arguments
   - workingDirectory: The second instance&apos;s working directory
</summary>
</member>
<member name="M:Electron.App.onRendererProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when the renderer process of `webContents` crashes or is killed.

 Parameters:

   - event
   - webContents
   - killed
</summary>
</member>
<member name="M:Electron.App.onRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when remote.require() is called in the renderer process of
 `webContents`. Calling event.preventDefault() will prevent the module from
 being returned. Custom value can be returned by setting
 `event.returnValue`.

 Parameters:

   - event
   - webContents
   - moduleName
</summary>
</member>
<member name="M:Electron.App.onRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when remote.getGlobal() is called in the renderer process of
 `webContents`. Calling event.preventDefault() will prevent the global from
 being returned. Custom value can be returned by setting
 `event.returnValue`.

 Parameters:

   - event
   - webContents
   - globalName
</summary>
</member>
<member name="M:Electron.App.onRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when remote.getCurrentWindow() is called in the renderer process
 of `webContents`. Calling event.preventDefault() will prevent the object
 from being returned. Custom value can be returned by setting
 `event.returnValue`.

 Parameters:

   - event
   - webContents
</summary>
</member>
<member name="M:Electron.App.onRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when remote.getCurrentWebContents() is called in the renderer
 process of `webContents`. Calling event.preventDefault() will prevent the
 object from being returned. Custom value can be returned by setting
 `event.returnValue`.

 Parameters:

   - event
   - webContents
</summary>
</member>
<member name="M:Electron.App.onRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Emitted when remote.getBuiltin() is called in the renderer process of
 `webContents`. Calling event.preventDefault() will prevent the module from
 being returned. Custom value can be returned by setting
 `event.returnValue`.

 Parameters:

   - event
   - webContents
   - moduleName
</summary>
</member>
<member name="M:Electron.App.onReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted once, when Electron has finished initializing. You can also call
 `app.isReady()` to check if this event has already fired and `app.whenReady()` to
 get a Promise that is fulfilled when Electron is initialized.

 The second parameter is macOS only and holds the `userInfo` of the
 `NSUserNotification` that was used to open the application, if it was launched from
 Notification Center.
</summary>
</member>
<member name="M:Electron.App.onQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the application is quitting. The listener is passed the exit code.

 Note: On Windows, this event will not be emitted if the app is closed due
 to a shutdown/restart of the system or a user logout.
</summary>
</member>
<member name="M:Electron.App.onOpenUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the user wants to open a URL with the application.
 The listener is passed the url.

 Your application&apos;s Info.plist file must define the URL scheme within the
 CFBundleURLTypes key, and set NSPrincipalClass to AtomApplication.

 You should call `event.preventDefault()` if you want to handle this event.
</summary>
</member>
<member name="M:Electron.App.onOpenFile(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the user wants to open a file with the application.
 The listener is passed the path of the file.

 The `open-file` event is usually emitted when the application is already
 open and the OS wants to reuse the application to open the file.
 `open-file` is also emitted when a file is dropped onto the dock and the
 application is not yet running. Make sure to listen for the `open-file`
 event very early in your application startup to handle this case (even
 before the `ready` event is emitted).

 You should call `event.preventDefault()` if you want to handle this event.

 On Windows, you have to parse `process.argv` (in the main process) to get
 the file path.
</summary>
</member>
<member name="M:Electron.App.onNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 [macOS] Emitted when the user clicks the native macOS new tab button. The
 new tab button is only visible if the current BrowserWindow has a
 `tabbingIdentifier`
</summary>
</member>
<member name="M:Electron.App.onLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 Emitted when webContents wants to do basic auth.

 The default behavior is to cancel all authentications. To override this
 you should prevent the default behavior with event.preventDefault() and
 call callback(username, password) with the credentials.

 Parameters:

   - event
   - webContents
   - authenticationResponseDetails
   - authInfo
   - callback(username, password)
</summary>
</member>
<member name="M:Electron.App.onGpuProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when the GPU process crashes or is killed.

 Parameters:

   - event
   - killed
</summary>
</member>
<member name="M:Electron.App.onGpuInfoUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted whenever there is a GPU info update.
</summary>
</member>
<member name="M:Electron.App.onDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when desktopCapturer.getSources() is called in the renderer
 process of `webContents`. Calling event.preventDefault() will make it
 return empty sources.
</summary>
</member>
<member name="M:Electron.App.onContinueActivityError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Emitted during macOS Handoff when an activity from a different
 device fails to be resumed.

 Parameters:

   - event
   - type: A string identifying the activity. Maps to NSUserActivity.activityType.
   - error: A string with the error&apos;s localized description
</summary>
</member>
<member name="M:Electron.App.onContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Emitted during macOS Handoff when an activity from a different
 device wants to be resumed. You should call `event.preventDefault()` if
 you want to handle this event.

 A user activity can be continued only in an app that has the same
 developer Team ID as the activity&apos;s source app and that supports the
 activity&apos;s type. Supported activity types are specified in the app&apos;s
 Info.plist under the NSUserActivityTypes key.

 Parameters:

   - event
   - type: A string identifying the activity. Maps to NSUserActivity.activityType.
   - userInfo: Contains app-specific state stored by the activity on another device
</summary>
</member>
<member name="M:Electron.App.onCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 Emitted when failed to verify the `certificate` for `url`. To trust the
 certificate you should prevent the default behavior with
 event.preventDefault() and call `callback(true)`.

 Parameters:

   - event
   - webContents
   - url
   - error: The error code
   - certificate
   - callback
       - isTrusted: Whether to consider the certificate as trusted
</summary>
</member>
<member name="M:Electron.App.onBrowserWindowFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a browserWindow gets focused.
</summary>
</member>
<member name="M:Electron.App.onBrowserWindowCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a new browserWindow is created.
</summary>
</member>
<member name="M:Electron.App.onBrowserWindowBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 Emitted when a browserWindow gets blurred.
</summary>
</member>
<member name="M:Electron.App.onBeforeQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 Emitted before the application starts closing its windows. Calling
 `event.preventDefault()` will prevent the default behavior, which is
 terminating the application.

 Note: If application quit was initiated by `autoUpdater.quitAndInstall()`,
 then `before-quit` is emitted *after* emitting the `close` event on all
 windows and closing them.

 Note: On Windows, this event will not be emitted if the app is closed due
 to a shutdown/restart of the system or a user logout.
</summary>
</member>
<member name="M:Electron.App.onActivityWasContinued(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 [macOS] Emitted during macOS Handoff after an activity from this device
 was successfully resumed on another one.

 Parameters:

   - event
   - type: A string identifying the activity. Maps to NSUserActivity.activityType.
   - userInfo: Contains app-specific state stored by the activity
</summary>
</member>
<member name="M:Electron.App.onActivate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS] Emitted when the application is activated. The boolean parameter
 is true if the app has visible windows, false otherwise.

 Various actions can trigger this event, such as launching the application
 for the first time, attempting to re-launch the application when it&apos;s
 already running, or clicking on the application&apos;s dock or taskbar icon.
</summary>
</member>
<member name="M:Electron.App.onAccessibilitySupportChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 [macOS, Windows] Emitted when Chrome&apos;s accessibility support changes. This
 event fires when assistive technologies, such as screen readers, are
 enabled or disabled. See
 https://www.chromium.org/developers/design-documents/accessibility for
 more details.

 Parameters:

   - event
   - accessibilitySupportEnabled: true when Chrome&apos;s accessibility support is enabled, false otherwise.
</summary>
</member>
<member name="M:Electron.App.moveToApplicationsFolder(Microsoft.FSharp.Core.FSharpOption{Electron.MoveToApplicationsFolderOptions})">
<summary>
 [macOS] Returns a value indicating whether the move was successful. Please
 note that if the move is successful, your application will quit and
 relaunch.

 No confirmation dialog will be presented by default. If you wish to allow
 the user to confirm the operation, you may do so using the dialog API.

 Note: This method throws errors if anything other than the user causes the
 move to fail. For instance if the user cancels the authorization dialog,
 this method returns false. If we fail to perform the copy, then this
 method will throw an error. The message in the error should be informative
 and tell you exactly what went wrong

 By default, if an app of the same name as the one being moved exists in
 the Applications directory and is not running, the existing app will be
 trashed and the active app moved into its place. If it is running, the
 pre-existing running app will assume focus and the the previously active
 app will quit itself. This behavior can be changed by providing the
 optional conflict handler, where the boolean returned by the handler
 determines whether or not the move conflict is resolved with default
 behavior. i.e. returning `false` will ensure no further action is taken,
 returning `true` will result in the default behavior and the method
 continuing.
</summary>
</member>
<member name="M:Electron.App.isUnityRunning">
<summary>
 [Linux] Whether the current desktop environment is Unity launcher.
</summary>
</member>
<member name="M:Electron.App.isReady">
<summary>
 Returns true if Electron has finished initializing, false otherwise.

 See also `app.whenReady()`.
</summary>
</member>
<member name="M:Electron.App.isInApplicationsFolder">
<summary>
 [macOS] Indicates whether the application is currently running from the
 systems Application folder. Use in combination with
 app.moveToApplicationsFolder().
</summary>
</member>
<member name="M:Electron.App.isEmojiPanelSupported">
<summary>
 Returns a value indicating whether or not the current OS version allows
 for native emoji pickers.
</summary>
</member>
<member name="M:Electron.App.isDefaultProtocolClient(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String[]})">
<summary>
 Returns a value indicating whether the current executable is the default
 handler for a protocol (aka URI scheme).

 Note: On macOS, you can use this method to check if the app has been
 registered as the default protocol handler for a protocol. You can also
 verify this by checking
 ~/Library/Preferences/com.apple.LaunchServices.plist on the macOS machine.
 Please refer to Apple&apos;s documentation for details.

 See `setAsDefaultProtocolClient` for more details. 
</summary>
</member>
<member name="M:Electron.App.invalidateCurrentActivity">
<summary>
 [macOS] Invalidates the current Handoff user activity.
</summary>
</member>
<member name="M:Electron.App.importCertificate(Electron.ImportCertificateOptions,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit})">
<summary>
 [Linux] Imports the certificate in pkcs12 format into the platform
 certificate store. `callback` is called with the result of import
 operation. A value of `0` indicates success while any other value
 indicates failure according to Chromium net_error_list:
 https://cs.chromium.org/chromium/src/net/base/net_error_list.h
</summary>
</member>
<member name="M:Electron.App.hide">
<summary>
 [macOS] Hides all application windows without minimizing them.
</summary>
</member>
<member name="M:Electron.App.hasSingleInstanceLock">
<summary>
 This method returns whether or not this instance of your app is currently
 holding the single instance lock. You can request the lock with
 app.requestSingleInstanceLock() and release with
 app.releaseSingleInstanceLock()
</summary>
</member>
<member name="P:Electron.App.userAgentFallback">
<summary>
 The user agent string Electron will use as a global fallback.

 This is the user agent that will be used when no user agent is set at the
 webContents or session level. It is useful for ensuring that your entire
 app has the same user agent. Set to a custom value as early as possible in
 your app&apos;s initialization to ensure that your overridden value is used.
</summary>
</member>
<member name="P:Electron.App.name">
<summary>
 Indicates the current application&apos;s name, which is the name in the
 application&apos;s `package.json` file.

 Usually the `name` field of `package.json` is a short lowercase name,
 according to the npm modules spec. You should usually also specify a
 `productName` field, which is your application&apos;s full capitalized name,
 and which will be preferred over `name` by Electron.
</summary>
</member>
<member name="P:Electron.App.isPackaged">
<summary>
 Returns true if the app is packaged, false otherwise. For many apps, this
 property can be used to distinguish development and production
 environments.
</summary>
</member>
<member name="P:Electron.App.dock">
<summary>
 Allows you to perform actions on your app icon in the user&apos;s dock on
 macOS.
</summary>
</member>
<member name="P:Electron.App.commandLine">
<summary>
 Allows you to read and manipulate the command line arguments that Chromium
 uses.
</summary>
</member>
<member name="P:Electron.App.badgeCount">
<summary>
 [Linux, macOS] Returns the badge count for current app. Setting the count
 to 0 will hide the badge.

 On macOS, setting this to any nonzero integer shows on the dock icon. On
 Linux, this property only works for Unity launcher.

 Note: Unity launcher requires the existence of a .desktop file to work,
 for more information please read [Desktop Environment
 Integration](https://electronjs.org/docs/tutorial/desktop-environment-integration#unity-launcher).
</summary>
</member>
<member name="P:Electron.App.applicationMenu">
<summary>
 Gets or sets the application menu.
</summary>
</member>
<member name="P:Electron.App.allowRendererProcessReuse">
<summary>
 A `Boolean` which when `true` disables the overrides that Electron has in
 place to ensure renderer processes are restarted on every navigation. The
 current default value for this property is `false`.

 The intention is for these overrides to become disabled by default and
 then at some point in the future this property will be removed. This
 property impacts which native modules you can use in the renderer process.
 For more information on the direction Electron is going with renderer
 process restarts and usage of native modules in the renderer process
 please check out this tracking issue:
 https://github.com/electron/electron/issues/18397
</summary>
</member>
<member name="P:Electron.App.accessibilitySupportEnabled">
<summary>
 A Boolean property that&apos;s `true` if Chrome&apos;s accessibility support is
 enabled, `false` otherwise. This property will be `true` if the use of
 assistive technologies, such as screen readers, has been detected. Setting
 this property to `true` manually enables Chrome&apos;s accessibility support,
 allowing developers to expose accessibility switch to users in application
 settings.

 See [Chromium&apos;s accessibility
 docs](https://www.chromium.org/developers/design-documents/accessibility)
 for more details. Disabled by default.

 This API must be called after the `ready` event is emitted.

 Note: Rendering accessibility tree can significantly affect the
 performance of your app. It should not be enabled by default.
</summary>
</member>
<member name="M:Electron.App.getVersion">
<summary>
 Returns the version of the loaded application. If no version is found in
 the application&apos;s package.json file, the version of the current bundle or
 executable is returned.
</summary>
</member>
<member name="M:Electron.App.getPath(Electron.AppPathName)">
<summary>
 Returns the specified special directory or file. On failure, an `Error` is
 thrown.

 If app.getPath(AppPathName.Logs) is called without called
 app.setAppLogsPath() being called first, a default log directory will be
 created equivalent to calling app.setAppLogsPath() without a path
 parameter.
</summary>
</member>
<member name="M:Electron.App.getName">
<summary>
 Returns the current application&apos;s name, which is the name in the
 application&apos;s package.json file.

 Usually the `name` field of package.json is a short lowercase name,
 according to the npm modules spec. You should usually also specify a
 `productName` field, which is your application&apos;s full capitalized name,
 and which will be preferred over `name` by Electron.
</summary>
</member>
<member name="M:Electron.App.getLoginItemSettings(Microsoft.FSharp.Core.FSharpOption{Electron.GetLoginItemSettingsOptions})">
<summary>
 [macOS, Windows] If you provided path and args options to
 app.setLoginItemSettings, then you need to pass the same arguments here
 for openAtLogin to be set correctly.
</summary>
</member>
<member name="M:Electron.App.getLocaleCountryCode">
<summary>
 returns the operating system&apos;s locale two-letter ISO 3166 country code.
 The value is taken from native OS APIs.

 Note: When unable to detect locale country code, it returns empty string.
</summary>
</member>
<member name="M:Electron.App.getLocale">
<summary>
 Returns the current application locale. Possible return values are
 documented here: https://electronjs.org/docs/api/locales

 To set the locale, you&apos;ll want to use a command line switch at app
 startup, which may be found here:
 https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md

 Note: When distributing your packaged app, you have to also ship the
 `locales` folder.

 Note: On Windows, you have to call it after the `ready` events gets
 emitted.
</summary>
</member>
<member name="M:Electron.App.getGPUInfo(Electron.GpuInfoType)">
<summary>
 For GpuInfoType.Complete, returns an object containing all the GPU
 Information in chromium&apos;s GPUInfo object. This includes the version and
 driver information that&apos;s shown on chrome://gpu page.

 For GpuInfoType.Basic, returns a subset of the complete info. Using Basic
 should be preferred if only basic information like vendorId or driverId is
 needed.
</summary>
</member>
<member name="M:Electron.App.getGPUFeatureStatus">
<summary>
 Returns the Graphics Feature Status from chrome://gpu/.

 Note: This information is only usable after the `gpu-info-update` event is
 emitted.
</summary>
</member>
<member name="M:Electron.App.getFileIcon(System.String,Microsoft.FSharp.Core.FSharpOption{Electron.FileIconOptions})">
<summary>
 Fetches a path&apos;s associated icon.

 On Windows, there are 2 kinds of icons: Icons associated with certain file
 extensions, like .mp3, .png, etc., and icons inside the file itself, like
 .exe, .dll, .ico.

 On Linux and macOS, icons depend on the application associated with file
 mime type.
</summary>
</member>
<member name="M:Electron.App.getCurrentActivityType">
<summary>
 [macOS] Returns the type of the currently running activity.
</summary>
</member>
<member name="M:Electron.App.getBadgeCount">
<summary>
 Returns the current value displayed in the counter badge.
</summary>
</member>
<member name="M:Electron.App.getApplicationNameForProtocol(System.String)">
 <summary>
   Returns the name of the application handling the protocol (aka URI scheme) of the
   URL, or an empty string if there is no handler. For instance, if Electron is the
   default handler of the URL, this could be `Electron` on Windows and Mac. However,
   don't rely on the precise format which is not guaranteed to remain unchanged.
   Expect a different format on Linux, possibly with a `.desktop` suffix.
 </summary>
 <param name="url">
   A URL with the protocol name to check. Unlike the other methods in this family,
   this accepts an entire URL, including `://` at a minimum (e.g. `https://`).
 </param>
</member>
<member name="M:Electron.App.getAppPath">
<summary>
 Returns the current application directory.
</summary>
</member>
<member name="M:Electron.App.getAppMetrics">
<summary>
 Returns objects that correspond to memory and CPU usage statistics of all
 the processes associated with the app.
</summary>
</member>
<member name="M:Electron.App.focus(Microsoft.FSharp.Core.FSharpOption{Electron.FocusOptions})">
<summary>
 On Linux, focuses on the first visible window. On macOS, makes the application the
 active app. On Windows, focuses on the application&apos;s first window.

 You should seek to use the `steal` option as sparingly as possible.
</summary>
</member>
<member name="M:Electron.App.exit(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Exits immediately with `exitCode` (default 0). All windows will be closed
 immediately without asking the user, and the `before-quit` and `will-quit`
 events will not be emitted.
</summary>
</member>
<member name="M:Electron.App.enableSandbox">
<summary>
 Enables full sandbox mode on the app. This method can only be called
 before app is ready.
</summary>
</member>
<member name="M:Electron.App.disableHardwareAcceleration">
<summary>
 Disables hardware acceleration for current app. This method can only be
 called before app is ready.
</summary>
</member>
<member name="M:Electron.App.disableDomainBlockingFor3DAPIs">
<summary>
 By default, Chromium disables 3D APIs (e.g. WebGL) until restart on a per
 domain basis if the GPU processes crashes too frequently. This function
 disables that behavior. This method can only be called before app is
 ready.
</summary>
</member>
<member name="M:Electron.App.clearRecentDocuments">
<summary>
 [macOS, Windows] Clears the recent documents list.
</summary>
</member>
<member name="M:Electron.App.addRecentDocument(System.String)">
<summary>
 [macOS, Windows] Adds `path` to the recent documents list. This list is
 managed by the OS. On Windows, you can visit the list from the task bar,
 and on macOS, you can visit it from dock menu.
</summary>
</member>
<member name="M:Electron.App.addListenerWindowAllClosed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWindowAllClosed.
</summary>
</member>
<member name="M:Electron.App.addListenerWillQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillQuit.
</summary>
</member>
<member name="M:Electron.App.addListenerWillFinishLaunching(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onWillFinishLaunching.
</summary>
</member>
<member name="M:Electron.App.addListenerWillContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWillContinueActivity.
</summary>
</member>
<member name="M:Electron.App.addListenerWebContentsCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onWebContentsCreated.
</summary>
</member>
<member name="M:Electron.App.addListenerUpdateActivityState(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onUpdateActivityState.
</summary>
</member>
<member name="M:Electron.App.addListenerSessionCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.Session,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onSessionCreated.
</summary>
</member>
<member name="M:Electron.App.addListenerSelectClientCertificate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate[],Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onSelectClientCertificate.
</summary>
</member>
<member name="M:Electron.App.addListenerSecondInstance(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onSecondInstance.
</summary>
</member>
<member name="M:Electron.App.addListenerRendererProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRendererProcessCrashed.
</summary>
</member>
<member name="M:Electron.App.addListenerRemoteRequire(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteRequire.
</summary>
</member>
<member name="M:Electron.App.addListenerRemoteGetGlobal(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteGetGlobal.
</summary>
</member>
<member name="M:Electron.App.addListenerRemoteGetCurrentWindow(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetCurrentWindow.
</summary>
</member>
<member name="M:Electron.App.addListenerRemoteGetCurrentWebContents(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onRemoteGetCurrentWebContents.
</summary>
</member>
<member name="M:Electron.App.addListenerRemoteGetBuiltin(Microsoft.FSharp.Core.FSharpFunc{Electron.ReturnValueEvent,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onRemoteGetBuiltin.
</summary>
</member>
<member name="M:Electron.App.addListenerReady(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onReady.
</summary>
</member>
<member name="M:Electron.App.addListenerQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onQuit.
</summary>
</member>
<member name="M:Electron.App.addListenerOpenUrl(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onOpenUrl.
</summary>
</member>
<member name="M:Electron.App.addListenerOpenFile(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onOpenFile.
</summary>
</member>
<member name="M:Electron.App.addListenerNewWindowForTab(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onNewWindowForTab.
</summary>
</member>
<member name="M:Electron.App.addListenerLogin(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthenticationResponseDetails,Microsoft.FSharp.Core.FSharpFunc{Electron.AuthInfo,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}}}}})">
<summary>
 See onLogin.
</summary>
</member>
<member name="M:Electron.App.addListenerGpuProcessCrashed(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onGpuProcessCrashed.
</summary>
</member>
<member name="M:Electron.App.addListenerGpuInfoUpdate(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 See onGpuInfoUpdate.
</summary>
</member>
<member name="M:Electron.App.addListenerDesktopCapturerGetSources(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onDesktopCapturerGetSources.
</summary>
</member>
<member name="M:Electron.App.addListenerContinueActivityError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onContinueActivityError.
</summary>
</member>
<member name="M:Electron.App.addListenerContinueActivity(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onContinueActivity.
</summary>
</member>
<member name="M:Electron.App.addListenerCertificateError(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.WebContents,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Electron.Certificate,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}}})">
<summary>
 See onCertificateError.
</summary>
</member>
<member name="M:Electron.App.addListenerBrowserWindowFocus(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowFocus.
</summary>
</member>
<member name="M:Electron.App.addListenerBrowserWindowCreated(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowCreated.
</summary>
</member>
<member name="M:Electron.App.addListenerBrowserWindowBlur(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{Electron.BrowserWindow,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onBrowserWindowBlur.
</summary>
</member>
<member name="M:Electron.App.addListenerBeforeQuit(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.Unit})">
<summary>
 See onBeforeQuit.
</summary>
</member>
<member name="M:Electron.App.addListenerActivityWasContinued(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.Unit}}})">
<summary>
 See onActivityWasContinued.
</summary>
</member>
<member name="M:Electron.App.addListenerActivate(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onActivate.
</summary>
</member>
<member name="M:Electron.App.addListenerAccessibilitySupportChanged(Microsoft.FSharp.Core.FSharpFunc{Browser.Types.Event,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.Unit}})">
<summary>
 See onAccessibilitySupportChanged.
</summary>
</member>
<member name="T:Electron.ActivationPolicy.Prohibited">
<summary>
 The application doesn’t appear in the Dock and may not create windows or be
 activated.
</summary>
</member>
<member name="T:Electron.ActivationPolicy.Accessory">
<summary>
 The application doesn’t appear in the Dock and doesn’t have a menu bar, but it may
 be activated programmatically or by clicking on one of its windows.
</summary>
</member>
<member name="T:Electron.ActivationPolicy.Regular">
<summary>
 The application is an ordinary app that appears in the Dock and may have a user
 interface.
</summary>
</member>
<member name="P:Electron.FocusOptions.steal(System.Boolean)">
<summary>
 Make the receiver the active app even if another app is currently active.
</summary>
</member>
<member name="P:Electron.FocusOptions.steal">
<summary>
 Make the receiver the active app even if another app is currently active.
</summary>
</member>
<member name="T:Electron.MoveToApplicationsFolderConflictType.ExistsAndRunning">
<summary>
 An app of the same name is present in the Applications directory and is
 presently running.
</summary>
</member>
<member name="T:Electron.MoveToApplicationsFolderConflictType.Exists">
<summary>
 An app of the same name is present in the Applications directory.
</summary>
</member>
<member name="T:Electron.SetJumpListResult.CustomCategoryAccessDeniedError">
<summary>
 Custom categories can&apos;t be added to the Jump List due to user privacy or
 group policy settings.
</summary>
</member>
<member name="T:Electron.SetJumpListResult.FileTypeRegistrationError">
<summary>
 An attempt was made to add a file link to the Jump List for a file type
 the app isn&apos;t registered to handle.
</summary>
</member>
<member name="T:Electron.SetJumpListResult.InvalidSeparatorError">
<summary>
 An attempt was made to add a separator to a custom category in the Jump
 List. Separators are only allowed in the standard Tasks category.
</summary>
</member>
<member name="T:Electron.SetJumpListResult.Error">
<summary>
 One or more errors occurred, enable runtime logging to figure out the
 likely cause.
</summary>
</member>
<member name="T:Electron.SetJumpListResult.Ok">
<summary>
 Nothing went wrong.
</summary>
</member>
<member name="T:Electron.AppPathName.CrashDumps">
<summary>
 Directory where crash dumps are stored.
</summary>
</member>
<member name="T:Electron.AppPathName.PepperFlashSystemPlugin">
<summary>
 Full path to the system version of the Pepper Flash plugin.
</summary>
</member>
<member name="T:Electron.AppPathName.Logs">
<summary>
 Directory for your app&apos;s log folder.
</summary>
</member>
<member name="T:Electron.AppPathName.Videos">
<summary>
 Directory for a user&apos;s videos.
</summary>
</member>
<member name="T:Electron.AppPathName.Pictures">
<summary>
 Directory for a user&apos;s pictures.
</summary>
</member>
<member name="T:Electron.AppPathName.Music">
<summary>
 Directory for a user&apos;s music.
</summary>
</member>
<member name="T:Electron.AppPathName.Downloads">
<summary>
 Directory for a user&apos;s downloads.
</summary>
</member>
<member name="T:Electron.AppPathName.Documents">
<summary>
 Directory for a user&apos;s &quot;My Documents&quot;.
</summary>
</member>
<member name="T:Electron.AppPathName.Desktop">
<summary>
 The current user&apos;s Desktop directory.
</summary>
</member>
<member name="T:Electron.AppPathName.Module">
<summary>
 The libchromiumcontent library.
</summary>
</member>
<member name="T:Electron.AppPathName.Exe">
<summary>
 The current executable file.
</summary>
</member>
<member name="T:Electron.AppPathName.Temp">
<summary>
 Temporary directory.
</summary>
</member>
<member name="T:Electron.AppPathName.UserData">
<summary>
 The directory for storing your app&apos;s configuration files, which by default
 it is the AppData directory appended with your app&apos;s name.
</summary>
</member>
<member name="T:Electron.AppPathName.AppData">
<summary>
 Per-user application data directory, which by default points to:
  - %APPDATA% on Windows
  - $XDG_CONFIG_HOME or ~/.config on Linux
  - ~/Library/Application Support on macOS
</summary>
</member>
<member name="T:Electron.AppPathName.Home">
<summary>
 The user&apos;s home directory.
</summary>
</member>
<member name="T:Electron.GpuInfoType.Complete">
<summary>
 Complete GPU info.
</summary>
</member>
<member name="T:Electron.GpuInfoType.Basic">
<summary>
 Basic GPU info.
</summary>
</member>
<member name="P:Electron.RendererInterface.webFrame">
<summary>
 Customize the rendering of the current web page. This module is an
 instance of the WebFrame class representing the top frame of the current
 BrowserWindow. Sub-frames can be retrieved by certain properties and
 methods (e.g. webFrame.firstChild).
</summary>
</member>
<member name="P:Electron.RendererInterface.remote">
<summary>
 Use main process modules from the renderer process. The `remote` module
 provides a simple way to do inter-process communication (IPC) between the
 renderer process (web page) and the main process.
</summary>
</member>
<member name="P:Electron.RendererInterface.ipcRenderer">
<summary>
 Communicate asynchronously from a renderer process to the main process.

 https://electronjs.org/docs/api/ipc-renderer
</summary>
</member>
<member name="P:Electron.RendererInterface.desktopCapturer">
<summary>
 Access information about media sources that can be used to capture audio
 and video from the desktop using the `navigator.mediaDevices.getUserMedia`
 API.

 https://electronjs.org/docs/api/desktop-capturer
</summary>
</member>
<member name="P:Electron.RendererInterface.contextBridge">
<summary>
 Create a safe, bi-directional, synchronous bridge across isolated contexts

 https://electronjs.org/docs/api/context-bridge
</summary>
</member>
<member name="P:Electron.MainInterface.systemPreferences">
<summary>
 Get system preferences.

 https://electronjs.org/docs/api/system-preferences
</summary>
</member>
<member name="P:Electron.MainInterface.screen">
<summary>
 Retrieve information about screen size, displays, cursor position, etc.

 This module cannot be used until the `ready` event of the `app` module is
 emitted.

 https://electronjs.org/docs/api/screen
</summary>
</member>
<member name="P:Electron.MainInterface.protocol">
<summary>
 Register a custom protocol and intercept existing protocol requests.

 https://electronjs.org/docs/api/protocol
</summary>
</member>
<member name="P:Electron.MainInterface.powerSaveBlocker">
<summary>
 Block the system from entering low-power (sleep) mode.

 https://electronjs.org/docs/api/power-save-blocker
</summary>
</member>
<member name="P:Electron.MainInterface.powerMonitor">
<summary>
 Monitor power state changes.

 This module cannot be used until the `ready` event of the `app` module is
 emitted.

 https://electronjs.org/docs/api/power-monitor
</summary>
</member>
<member name="P:Electron.MainInterface.netLog">
<summary>
 Logging network events for a session.

 https://electronjs.org/docs/api/net-log
</summary>
</member>
<member name="P:Electron.MainInterface.net">
<summary>
 Issue HTTP/HTTPS requests using Chromium&apos;s native networking library.

 https://electronjs.org/docs/api/net
</summary>
</member>
<member name="P:Electron.MainInterface.nativeTheme">
<summary>
 Read and respond to changes in Chromium&apos;s native color theme.

 https://electronjs.org/docs/api/native-theme
</summary>
</member>
<member name="P:Electron.MainInterface.ipcMain">
<summary>
 Communicate asynchronously from the main process to renderer processes.
 This module it handles asynchronous and synchronous messages sent from a
 renderer process (web page). Messages sent from a renderer will be emitted
 to this module.

 https://electronjs.org/docs/api/ipc-main
</summary>
</member>
<member name="P:Electron.MainInterface.inAppPurchase">
<summary>
 In-app purchases on Mac App Store.

 https://electronjs.org/docs/api/in-app-purchase
</summary>
</member>
<member name="P:Electron.MainInterface.globalShortcut">
<summary>
 Detect keyboard events when the application does not have keyboard focus.
 The `globalShortcut` module can register/unregister a global keyboard
 shortcut with the operating system so that you can customize the
 operations for various shortcuts. Note: The shortcut is global; it will
 work even if the app does not have the keyboard focus. You should not use
 this module until the ready event of the app module is emitted.

 https://electronjs.org/docs/api/global-shortcut
</summary>
</member>
<member name="P:Electron.MainInterface.dialog">
<summary>
 Display native system dialogs for opening and saving files, alerting, etc.

 https://electronjs.org/docs/api/dialog
</summary>
</member>
<member name="P:Electron.MainInterface.contentTracing">
<summary>
 Collect tracing data from Chromium to find performance bottlenecks and
 slow operations.

 This module does not include a web interface. To view recorded traces, use
 [trace /// viewer](https://github.com/catapult-project/catapult/blob/master/tracing),
 available at `chrome://tracing` in Chrome.

 Note: You should not use this module until the `ready` event of the `app`
 module is emitted.

 https://electronjs.org/docs/api/content-tracing
</summary>
</member>
<member name="P:Electron.MainInterface.autoUpdater">
<summary>
 Enable apps to automatically update themselves.

 https://electronjs.org/docs/api/auto-updater
</summary>
</member>
<member name="P:Electron.MainInterface.app">
<summary>
 Control your application&apos;s event lifecycle.

 https://electronjs.org/docs/api/app
</summary>
</member>
<member name="P:Electron.MainInterface.WebContents">
<summary>
 Render and control web pages.

 https://electronjs.org/docs/api/web-contents
</summary>
</member>
<member name="P:Electron.MainInterface.Tray">
<summary>
 Add icons and context menus to the system&apos;s notification area.

 https://electronjs.org/docs/api/tray
</summary>
</member>
<member name="P:Electron.MainInterface.TouchBar">
<summary>
 Create TouchBar layouts for native macOS applications

 https://electronjs.org/docs/api/touch-bar
</summary>
</member>
<member name="P:Electron.MainInterface.Session">
<summary>
 Manage browser sessions, cookies, cache, proxy settings, etc.

 https://electronjs.org/docs/api/session
</summary>
</member>
<member name="P:Electron.MainInterface.Notification">
<summary>
 Create OS desktop notifications.

 https://electronjs.org/docs/api/notification
</summary>
</member>
<member name="P:Electron.MainInterface.MenuItem">
<summary>
 Add items to native application menus and context menus.

 https://electronjs.org/docs/api/menu-item
</summary>
</member>
<member name="P:Electron.MainInterface.Menu">
<summary>
 Create native application menus and context menus.

 https://electronjs.org/docs/api/menu
</summary>
</member>
<member name="P:Electron.MainInterface.ClientRequest">
<summary>
 Make HTTP/HTTPS requests. Also see the `net` module to create
 ClientRequest instances.

 https://electronjs.org/docs/api/client-request
</summary>
</member>
<member name="P:Electron.MainInterface.BrowserWindow">
<summary>
 Create and control browser windows.

 https://electronjs.org/docs/api/browser-window
</summary>
</member>
<member name="P:Electron.MainInterface.BrowserView">
<summary>
 Create and control views. A BrowserView can be used to embed additional
 web content into a BrowserWindow. It is like a child window, except that
 it is positioned relative to its owning window.

 https://electronjs.org/docs/api/browser-view
</summary>
</member>
<member name="P:Electron.CommonInterface.shell">
<summary>
 Manage files and URLs using their default applications. Provides functions
 related to desktop integration.

 https://electronjs.org/docs/api/shell
</summary>
</member>
<member name="P:Electron.CommonInterface.crashReporter">
<summary>
 Submit crash reports to a remote server.

 https://electronjs.org/docs/api/crash-reporter
</summary>
</member>
<member name="P:Electron.CommonInterface.clipboard">
<summary>
 Perform copy and paste operations on the system clipboard. On Linux, there
 is also a selection clipboard. To manipulate it you need to pass
 ClipboardType.Selection to relevant methods.

 https://electronjs.org/docs/api/clipboard
</summary>
</member>
<member name="P:Electron.CommonInterface.NativeImage">
<summary>
 Create tray, dock, and application icons using PNG or JPG files. In
 Electron, for the APIs that take images, you can pass either file paths or
 NativeImage instances. An empty image will be used when null is passed.

 https://electronjs.org/docs/api/native-image
</summary>
</member>
<member name="P:Electron.KeyboardEvent.triggeredByAccelerator">
<summary>
 Whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click
</summary>
</member>
<member name="P:Electron.KeyboardEvent.shiftKey">
<summary>
 Whether a Shift key was used in an accelerator to trigger the Event
</summary>
</member>
<member name="P:Electron.KeyboardEvent.metaKey">
<summary>
 Whether a meta key was used in an accelerator to trigger the Event
</summary>
</member>
<member name="P:Electron.KeyboardEvent.ctrlKey">
<summary>
 Whether the Control key was used in an accelerator to trigger the Event
</summary>
</member>
<member name="P:Electron.KeyboardEvent.altKey">
<summary>
 Whether an Alt key was used in an accelerator to trigger the Event
</summary>
</member>
<member name="P:Electron.IpcRendererEvent.senderId">
<summary>
 Returns the webContents.id that sent the message, you can call
 event.sender.sendTo(event.senderId, ...) to reply to the message, see
 ipcRenderer.sendTo for more information. This only applies to messages
 sent from a different renderer. Messages sent directly from the main
 process set event.senderId to 0.
</summary>
</member>
<member name="P:Electron.IpcRendererEvent.sender">
<summary>
 The IpcRenderer instance that emitted the event originally
</summary>
</member>
<member name="P:Electron.IpcMainInvokeEvent.sender">
<summary>
 The webContents that sent the message.
</summary>
</member>
<member name="P:Electron.IpcMainInvokeEvent.frameId">
<summary>
 The ID of the renderer frame that sent this message.
</summary>
</member>
<member name="P:Electron.IpcMainEvent.returnValue(Microsoft.FSharp.Core.FSharpOption{System.Object})">
<summary>
 Set this to the value to be returned in a synchronous message.
</summary>
</member>
<member name="M:Electron.IpcMainEvent.reply(System.String,System.Object[])">
<summary>
 A function that will send an IPC message to the renderer frame that sent
 the original message that you are currently handling. You should use this
 method to &quot;reply&quot; to the sent message in order to guarantee the reply will
 go to the correct process and frame.
</summary>
</member>
<member name="P:Electron.IpcMainEvent.sender">
<summary>
 The webContents that sent the message.
</summary>
</member>
<member name="P:Electron.IpcMainEvent.returnValue">
<summary>
 Set this to the value to be returned in a synchronous message.
</summary>
</member>
<member name="P:Electron.IpcMainEvent.frameId">
<summary>
 The ID of the renderer frame that sent this message.
</summary>
</member>
<member name="P:Electron.ReturnValueEvent.returnValue(Microsoft.FSharp.Core.FSharpOption{System.Object})">
<summary>
 Set this to return a custom value.
</summary>
</member>
<member name="P:Electron.ReturnValueEvent.returnValue">
<summary>
 Set this to return a custom value.
</summary>
</member>
<member name="P:Electron.Electron.renderer">
<summary>
 All Electron APIs usable from the renderer process.
</summary>
</member>
<member name="P:Electron.Electron.main">
<summary>
 All Electron APIs usable from the main process.
</summary>
</member>
<member name="P:Electron.Electron.electron">
<summary>
 All Electron APIs. Consider using `main` or `renderer` as your entry points;
 there is nothing here that is not accessible through them.
</summary>
</member>
<member name="T:Electron.Helpers.Key.NumDiv">
<summary>
 Numpad /
</summary>
</member>
<member name="T:Electron.Helpers.Key.NumMult">
<summary>
 Numpad *
</summary>
</member>
<member name="T:Electron.Helpers.Key.NumSub">
<summary>
 Numpad -
</summary>
</member>
<member name="T:Electron.Helpers.Key.NumAdd">
<summary>
 Numpad +
</summary>
</member>
<member name="T:Electron.Helpers.Key.NumDec">
<summary>
 Numpad decimal
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num9">
<summary>
 Numpad 9
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num8">
<summary>
 Numpad 8
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num7">
<summary>
 Numpad 7
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num6">
<summary>
 Numpad 6
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num5">
<summary>
 Numpad 5
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num4">
<summary>
 Numpad 4
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num3">
<summary>
 Numpad 3
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num2">
<summary>
 Numpad 2
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num1">
<summary>
 Numpad 1
</summary>
</member>
<member name="T:Electron.Helpers.Key.Num0">
<summary>
 Numpad 0
</summary>
</member>
<member name="T:Electron.Helpers.Key.Esc">
<summary>
 Alias for Escape
</summary>
</member>
<member name="T:Electron.Helpers.Key.Enter">
<summary>
 Alias for Return
</summary>
</member>
<member name="T:Electron.Helpers.Key.DoubleQuote">
<summary>
 &quot;
</summary>
</member>
<member name="T:Electron.Helpers.Key.Apostrophe">
<summary>
 Alias for SingleQuote
</summary>
</member>
<member name="T:Electron.Helpers.Key.SingleQuote">
<summary>
 &apos;
</summary>
</member>
<member name="T:Electron.Helpers.Key.Pipe">
<summary>
 |
</summary>
</member>
<member name="T:Electron.Helpers.Key.RBracket">
<summary>
 ]
</summary>
</member>
<member name="T:Electron.Helpers.Key.LBracket">
<summary>
 [
</summary>
</member>
<member name="T:Electron.Helpers.Key.RBrace">
<summary>
 }
</summary>
</member>
<member name="T:Electron.Helpers.Key.LBrace">
<summary>
 {
</summary>
</member>
<member name="T:Electron.Helpers.Key.Backtick">
<summary>
 `
</summary>
</member>
<member name="T:Electron.Helpers.Key.Tilde">
<summary>
 ~
</summary>
</member>
<member name="T:Electron.Helpers.Key.Backslash">
<summary>
 \
</summary>
</member>
<member name="T:Electron.Helpers.Key.ForwardSlash">
<summary>
 /
</summary>
</member>
<member name="T:Electron.Helpers.Key.Dot">
<summary>
 .
</summary>
</member>
<member name="T:Electron.Helpers.Key.Hyphen">
<summary>
 Alias for Dash
</summary>
</member>
<member name="T:Electron.Helpers.Key.Dash">
<summary>
 -
</summary>
</member>
<member name="T:Electron.Helpers.Key.Underscore">
<summary>
 _
</summary>
</member>
<member name="T:Electron.Helpers.Key.Comma">
<summary>
 ,
</summary>
</member>
<member name="T:Electron.Helpers.Key.GreaterThan">
<summary>
 &gt;
</summary>
</member>
<member name="T:Electron.Helpers.Key.LessThan">
 <
</member>
<member name="T:Electron.Helpers.Key.Equals">
<summary>
 =
</summary>
</member>
<member name="T:Electron.Helpers.Key.Semicolon">
<summary>
 ;
</summary>
</member>
<member name="T:Electron.Helpers.Key.Colon">
<summary>
 :
</summary>
</member>
<member name="T:Electron.Helpers.Key.Asterisk">
<summary>
 *
</summary>
</member>
<member name="T:Electron.Helpers.Key.Ampersand">
<summary>
 &amp;
</summary>
</member>
<member name="T:Electron.Helpers.Key.Caret">
<summary>
 ^
</summary>
</member>
<member name="T:Electron.Helpers.Key.Percent">
<summary>
 %
</summary>
</member>
<member name="T:Electron.Helpers.Key.Dollar">
<summary>
 $
</summary>
</member>
<member name="T:Electron.Helpers.Key.Hash">
<summary>
 #
</summary>
</member>
<member name="T:Electron.Helpers.Key.At">
<summary>
 @
</summary>
</member>
<member name="T:Electron.Helpers.Key.Question">
<summary>
 ?
</summary>
</member>
<member name="T:Electron.Helpers.Key.Exclamation">
<summary>
 !
</summary>
</member>
<member name="T:Electron.Helpers.Key.LParen">
<summary>
 (
</summary>
</member>
<member name="T:Electron.Helpers.Key.RParen">
<summary>
 )
</summary>
</member>
<member name="T:Electron.Helpers.Key.F24">
<summary>
 Function key 24.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F23">
<summary>
 Function key 23.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F22">
<summary>
 Function key 22.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F21">
<summary>
 Function key 21.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F20">
<summary>
 Function key 20.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F19">
<summary>
 Function key 19.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F18">
<summary>
 Function key 18.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F17">
<summary>
 Function key 17.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F16">
<summary>
 Function key 16.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F15">
<summary>
 Function key 15.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F14">
<summary>
 Function key 14.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F13">
<summary>
 Function key 13.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F12">
<summary>
 Function key 12.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F11">
<summary>
 Function key 11.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F10">
<summary>
 Function key 10.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F9">
<summary>
 Function key 9.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F8">
<summary>
 Function key 8.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F7">
<summary>
 Function key 7.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F6">
<summary>
 Function key 6.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F5">
<summary>
 Function key 5.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F4">
<summary>
 Function key 4.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F3">
<summary>
 Function key 3.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F2">
<summary>
 Function key 2.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F1">
<summary>
 Function key 1.
</summary>
</member>
<member name="T:Electron.Helpers.Key.Z">
<summary>
 The letter Z.
</summary>
</member>
<member name="T:Electron.Helpers.Key.Y">
<summary>
 The letter Y.
</summary>
</member>
<member name="T:Electron.Helpers.Key.X">
<summary>
 The letter X.
</summary>
</member>
<member name="T:Electron.Helpers.Key.W">
<summary>
 The letter W.
</summary>
</member>
<member name="T:Electron.Helpers.Key.V">
<summary>
 The letter V.
</summary>
</member>
<member name="T:Electron.Helpers.Key.U">
<summary>
 The letter U.
</summary>
</member>
<member name="T:Electron.Helpers.Key.T">
<summary>
 The letter T.
</summary>
</member>
<member name="T:Electron.Helpers.Key.S">
<summary>
 The letter S.
</summary>
</member>
<member name="T:Electron.Helpers.Key.R">
<summary>
 The letter R.
</summary>
</member>
<member name="T:Electron.Helpers.Key.Q">
<summary>
 The letter Q.
</summary>
</member>
<member name="T:Electron.Helpers.Key.P">
<summary>
 The letter P.
</summary>
</member>
<member name="T:Electron.Helpers.Key.O">
<summary>
 The letter O.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N">
<summary>
 The letter N.
</summary>
</member>
<member name="T:Electron.Helpers.Key.M">
<summary>
 The letter M.
</summary>
</member>
<member name="T:Electron.Helpers.Key.L">
<summary>
 The letter L.
</summary>
</member>
<member name="T:Electron.Helpers.Key.K">
<summary>
 The letter K.
</summary>
</member>
<member name="T:Electron.Helpers.Key.J">
<summary>
 The letter J.
</summary>
</member>
<member name="T:Electron.Helpers.Key.I">
<summary>
 The letter I.
</summary>
</member>
<member name="T:Electron.Helpers.Key.H">
<summary>
 The letter H.
</summary>
</member>
<member name="T:Electron.Helpers.Key.G">
<summary>
 The letter G.
</summary>
</member>
<member name="T:Electron.Helpers.Key.F">
<summary>
 The letter F.
</summary>
</member>
<member name="T:Electron.Helpers.Key.E">
<summary>
 The letter E.
</summary>
</member>
<member name="T:Electron.Helpers.Key.D">
<summary>
 The letter D.
</summary>
</member>
<member name="T:Electron.Helpers.Key.C">
<summary>
 The letter C.
</summary>
</member>
<member name="T:Electron.Helpers.Key.B">
<summary>
 The letter B.
</summary>
</member>
<member name="T:Electron.Helpers.Key.A">
<summary>
 The letter A.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N9">
<summary>
 The number 9.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N8">
<summary>
 The number 8.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N7">
<summary>
 The number 7.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N6">
<summary>
 The number 6.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N5">
<summary>
 The number 5.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N4">
<summary>
 The number 4.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N3">
<summary>
 The number 3.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N2">
<summary>
 The number 2.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N1">
<summary>
 The number 1.
</summary>
</member>
<member name="T:Electron.Helpers.Key.N0">
<summary>
 The number 0 (not NumPad).
</summary>
</member>
<member name="T:Electron.Helpers.Modifier.Super">
<summary>
 Mapped to the Windows key on Windows and Linux and the Cmd key on macOS.
</summary>
</member>
<member name="T:Electron.Helpers.Modifier.Option">
<summary>
 macOS only. Use Alt instead.
</summary>
</member>
<member name="T:Electron.Helpers.Modifier.CmdOrCtrl">
<summary>
 Alias for CommandOrControl
</summary>
</member>
<member name="T:Electron.Helpers.Modifier.Ctrl">
<summary>
 Alias for Control
</summary>
</member>
<member name="T:Electron.Helpers.Modifier.Cmd">
<summary>
 Alias for Command
</summary>
</member>
<member name="T:Electron.Helpers.Modifier.Command">
<summary>
 macOS only. Use CmdOrCtrl instead.
</summary>
</member>
<member name="M:Electron.Helpers.createAccelerator(Microsoft.FSharp.Collections.FSharpList{Electron.Helpers.Modifier},Electron.Helpers.Key)">
<summary>
 Returns an accelerator string that can be used to register shortcuts.
</summary>
</member>
</members>
</doc>
